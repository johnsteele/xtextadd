/*
* generated by Xtext
*/
package com.euclideanspace.phantom1.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class Test1GrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cContentsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cContentsRecurseParserRuleCall_0 = (RuleCall)cContentsAssignment.eContents().get(0);
		
		//Model:
		//	contents+=Recurse*;
		public ParserRule getRule() { return rule; }

		//contents+=Recurse*
		public Assignment getContentsAssignment() { return cContentsAssignment; }

		//Recurse
		public RuleCall getContentsRecurseParserRuleCall_0() { return cContentsRecurseParserRuleCall_0; }
	}

	public class RecurseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Recurse");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNIDTerminalRuleCall_0_0 = (RuleCall)cNAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cKW_OCURLYTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cRAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRRecurseParserRuleCall_1_1_0 = (RuleCall)cRAssignment_1_1.eContents().get(0);
		private final RuleCall cKW_CCURLYTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cKW_SEMICOLONTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		
		//Recurse:
		//	n=ID | KW_OCURLY r=Recurse KW_CCURLY KW_SEMICOLON?;
		public ParserRule getRule() { return rule; }

		//n=ID | KW_OCURLY r=Recurse KW_CCURLY KW_SEMICOLON?
		public Alternatives getAlternatives() { return cAlternatives; }

		//n=ID
		public Assignment getNAssignment_0() { return cNAssignment_0; }

		//ID
		public RuleCall getNIDTerminalRuleCall_0_0() { return cNIDTerminalRuleCall_0_0; }

		//KW_OCURLY r=Recurse KW_CCURLY KW_SEMICOLON?
		public Group getGroup_1() { return cGroup_1; }

		//KW_OCURLY
		public RuleCall getKW_OCURLYTerminalRuleCall_1_0() { return cKW_OCURLYTerminalRuleCall_1_0; }

		//r=Recurse
		public Assignment getRAssignment_1_1() { return cRAssignment_1_1; }

		//Recurse
		public RuleCall getRRecurseParserRuleCall_1_1_0() { return cRRecurseParserRuleCall_1_1_0; }

		//KW_CCURLY
		public RuleCall getKW_CCURLYTerminalRuleCall_1_2() { return cKW_CCURLYTerminalRuleCall_1_2; }

		//KW_SEMICOLON?
		public RuleCall getKW_SEMICOLONTerminalRuleCall_1_3() { return cKW_SEMICOLONTerminalRuleCall_1_3; }
	}
	
	
	private final ModelElements pModel;
	private final TerminalRule tKW_OCURLY;
	private final TerminalRule tKW_CCURLY;
	private final TerminalRule tKW_SEMICOLON;
	private final RecurseElements pRecurse;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public Test1GrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.tKW_OCURLY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "KW_OCURLY");
		this.tKW_CCURLY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "KW_CCURLY");
		this.tKW_SEMICOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "KW_SEMICOLON");
		this.pRecurse = new RecurseElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.euclideanspace.phantom1.Test1".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	contents+=Recurse*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//terminal KW_OCURLY:
	//	"{";
	public TerminalRule getKW_OCURLYRule() {
		return tKW_OCURLY;
	} 

	//terminal KW_CCURLY:
	//	"}";
	public TerminalRule getKW_CCURLYRule() {
		return tKW_CCURLY;
	} 

	//terminal KW_SEMICOLON:
	//	";";
	public TerminalRule getKW_SEMICOLONRule() {
		return tKW_SEMICOLON;
	} 

	//Recurse:
	//	n=ID | KW_OCURLY r=Recurse KW_CCURLY KW_SEMICOLON?;
	public RecurseElements getRecurseAccess() {
		return pRecurse;
	}
	
	public ParserRule getRecurseRule() {
		return getRecurseAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
