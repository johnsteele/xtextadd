/*
* generated by Xtext
*/
grammar InternalTest1;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package com.euclideanspace.phantom1.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.euclideanspace.phantom1.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.euclideanspace.phantom1.services.Test1GrammarAccess;

}

@parser::members {
 
 	private Test1GrammarAccess grammarAccess;
 	
    public void setGrammarAccess(Test1GrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getContentsAssignment()); }
(rule__Model__ContentsAssignment)*
{ after(grammarAccess.getModelAccess().getContentsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRecurse
entryRuleRecurse 
:
{ before(grammarAccess.getRecurseRule()); }
	 ruleRecurse
{ after(grammarAccess.getRecurseRule()); } 
	 EOF 
;

// Rule Recurse
ruleRecurse
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRecurseAccess().getAlternatives()); }
(rule__Recurse__Alternatives)
{ after(grammarAccess.getRecurseAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Recurse__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecurseAccess().getNAssignment_0()); }
(rule__Recurse__NAssignment_0)
{ after(grammarAccess.getRecurseAccess().getNAssignment_0()); }
)

    |(
{ before(grammarAccess.getRecurseAccess().getGroup_1()); }
(rule__Recurse__Group_1__0)
{ after(grammarAccess.getRecurseAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Recurse__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Recurse__Group_1__0__Impl
	rule__Recurse__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Recurse__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecurseAccess().getKW_OCURLYTerminalRuleCall_1_0()); }
	RULE_KW_OCURLY
{ after(grammarAccess.getRecurseAccess().getKW_OCURLYTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Recurse__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Recurse__Group_1__1__Impl
	rule__Recurse__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Recurse__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecurseAccess().getRAssignment_1_1()); }
(rule__Recurse__RAssignment_1_1)
{ after(grammarAccess.getRecurseAccess().getRAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Recurse__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Recurse__Group_1__2__Impl
	rule__Recurse__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Recurse__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecurseAccess().getKW_CCURLYTerminalRuleCall_1_2()); }
	RULE_KW_CCURLY
{ after(grammarAccess.getRecurseAccess().getKW_CCURLYTerminalRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Recurse__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Recurse__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Recurse__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecurseAccess().getKW_SEMICOLONTerminalRuleCall_1_3()); }
(	RULE_KW_SEMICOLON)?
{ after(grammarAccess.getRecurseAccess().getKW_SEMICOLONTerminalRuleCall_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__Model__ContentsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getContentsRecurseParserRuleCall_0()); }
	ruleRecurse{ after(grammarAccess.getModelAccess().getContentsRecurseParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Recurse__NAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecurseAccess().getNIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getRecurseAccess().getNIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Recurse__RAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecurseAccess().getRRecurseParserRuleCall_1_1_0()); }
	ruleRecurse{ after(grammarAccess.getRecurseAccess().getRRecurseParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_KW_OCURLY : '{';

RULE_KW_CCURLY : '}';

RULE_KW_SEMICOLON : ';';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


