/*******************************************************************************
 * Copyright (c) 2010 itemis AG (http://www.itemis.eu) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
grammar com.euclideanspace.pbase.Tutorial /*with org.eclipse.xtext.xbase.Xtype*/

generate demo "http://www.euclideanspace.com/pbase/Tutorial"
//import "http://www.eclipse.org/xtext/xbase/Xbase"
//import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model hidden(SL_COMMENT,WS):
	m+=Member*
;

/*
* This is an inner element inside a class, interface or enum, such as:
* 'val' or 'var' returns EuclidField
* 'def' method returns EuclidFunction
* inner class returns EuclidInnerClass
*/
Member returns EuclidMember hidden(SL_COMMENT,WS):
//{EuclidMember} annotations+=XAnnotation*
(
  //{EuclidField.annotationInfo = current}
  //visibility=Visibility?
  (
  	(extension?='extension' (final?='val' | 'var')? type=ID name1=ValidID?
      | static?='static'? (type=ID | (final?='val' | 'var')) name2=ValidID)
    ('=' initialValue=XExpression)? ';'?
    //| {EuclidInnerClass.annotationInfo = current}
    'class' name=ValidID ('<' typeParameters+=ID (',' typeParameters+=ID)* '>')?
    ("extends" extends=ID)?
    ('implements' implements+=ID (',' ID)*)?
    '{' (members+=Member)* '}'
  ) | (
    //| {EuclidFunction.annotationInfo = current}
    ('def' | override?='override') /*visibility=Visibility?*/ static?='static'? (dispatch?='dispatch'?)
    ('<' typeParameters+=ID (',' typeParameters+=ID)* '>')?
    ( /* =>(returnType=ID createExtensionInfo=CreateExtensionInfo name=ValidID '(')
      |*/ =>(returnType=ID name3=ValidID '(')
      //| =>(createExtensionInfo=CreateExtensionInfo name=ValidID '(')
      | name4=ValidID '('
    )
    (parameters+=Parameter (',' parameters+=Parameter)*)? ')'
    ('throws' exceptions+=ID (',' exceptions+=ID)*)?
    (expression=XBlockExpression)?
  ) | (
    /*| {EuclidConstructor.annotationInfo = current}
    visibility=Visibility?*/ 'new'
    ('<' typeParameters+=ID (',' typeParameters+=ID)* '>')?
    '(' (parameters+=Parameter (',' parameters+=Parameter)*)? ')'
    ('throws' exceptions+=ID (',' exceptions+=ID)*)?
    expression=XBlockExpression
  )
) ;

Parameter returns EuclidParameter:
//annotations+=XAnnotation*
parameterType=ID varArg?='...'? name=ValidID;


XExpression hidden(SL_COMMENT,WS) /*returns XExpression*/ :
	XAssignment;


XAssignment returns XExpression hidden(SL_COMMENT,WS):
	{XAssignment} feature=ID OpSingleAssign value=XAssignment |	
	XOrExpression (
		=>({XBinaryOperation.leftOperand=current} feature=OpMultiAssign) rightOperand=XAssignment
	)?;

OpSingleAssign hidden(SL_COMMENT,WS):
	'='
;

OpMultiAssign hidden(SL_COMMENT,WS):
	'+=' | '-=' | '*=' | '/=' | '%=' | 
	'<' '<' '=' | 
	'>' '>'? '>=';

XOrExpression returns XExpression hidden(SL_COMMENT,WS):
	XAndExpression (=>({XBinaryOperation.leftOperand=current} feature=OpOr) rightOperand=XAndExpression)*;

OpOr:
	'||';

XAndExpression returns XExpression hidden(SL_COMMENT,WS):
	XEqualityExpression (=>({XBinaryOperation.leftOperand=current} feature=OpAnd) rightOperand=XEqualityExpression)*;

OpAnd:
	'&&';

XEqualityExpression returns XExpression hidden(SL_COMMENT,WS):
	XRelationalExpression (=>({XBinaryOperation.leftOperand=current} feature=OpEquality)
	rightOperand=XRelationalExpression)*;

OpEquality:
	'==' | '!=' | '===' | '!==';

XRelationalExpression returns XExpression hidden(SL_COMMENT,WS):
	XOtherOperatorExpression
	(=>({XInstanceOfExpression.expression=current} 'instanceof') type=ID |
	 =>({XBinaryOperation.leftOperand=current} feature=OpCompare) rightOperand=XOtherOperatorExpression)*;

OpCompare:
	'>=' | '<' '=' | '>' | '<' ;

XOtherOperatorExpression returns XExpression hidden(SL_COMMENT,WS):
	XAdditiveExpression (=>({XBinaryOperation.leftOperand=current} feature=OpOther)
	rightOperand=XAdditiveExpression)*;

OpOther:
	  '->' 
	| '..<'
	| '>' '..'
	| '..'
	| '=>' 
	| '>' (=>('>' '>') | '>') 
	| '<' (=>('<' '<') | '<' | '=>')
	| '<>'
	| '?:';

XAdditiveExpression returns XExpression hidden(SL_COMMENT,WS):
	XMultiplicativeExpression (=>({XBinaryOperation.leftOperand=current} feature=OpAdd)
	rightOperand=XMultiplicativeExpression)*;

OpAdd:
	'+' | '-';

XMultiplicativeExpression returns XExpression hidden(SL_COMMENT,WS):
	XUnaryOperation (=>({XBinaryOperation.leftOperand=current} feature=OpMulti) rightOperand=XUnaryOperation)*;

OpMulti:
	'*' | '**' | '/' | '%';

XUnaryOperation returns XExpression hidden(SL_COMMENT,WS):
	{XUnaryOperation} feature=OpUnary operand=XUnaryOperation
	| =>XCastedExpression;

OpUnary:
	"!" | "-" | "+";
	
XCastedExpression returns XExpression hidden(SL_COMMENT,WS):
	XPostfixOperation (=>({XCastedExpression.target=current} 'as') type=ID)*
;

XPostfixOperation returns XExpression hidden(SL_COMMENT,WS):
	XMemberFeatureCall =>({XPostfixOperation.operand=current} feature=OpPostfix)?
;

OpPostfix hidden(SL_COMMENT,WS):
	"++" | "--"
;

XMemberFeatureCall returns XExpression hidden(SL_COMMENT,WS):
	XPrimaryExpression
	(=>({XAssignment.assignable=current} ('.'|explicitStatic?="::") feature=ID OpSingleAssign) value=XAssignment
	|=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|explicitStatic?="::")) 
		('<' typeArguments+=ID (',' typeArguments+=ID)* '>')?  
		feature=ID (
			=>explicitOperationCall?='(' 
				(
				    memberCallArguments+=XShortClosure
				  |	memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
				)? 
			')')?
			memberCallArguments+=XClosure?
		)*;

XPrimaryExpression returns XExpression hidden(SL_COMMENT,WS):
	XConstructorCall |
	XBlockExpression |
	XSwitchExpression |
	XSynchronizedExpression |
	XFeatureCall |
	XLiteral |
	XIfExpression |
	XForLoopExpression |
	XBasicForLoopExpression |
	XWhileExpression |
	XDoWhileExpression |
	XThrowExpression |
	XReturnExpression |
	XTryCatchFinallyExpression |
	XParenthesizedExpression;

XLiteral returns XExpression hidden(SL_COMMENT,WS):
	XCollectionLiteral |
	XClosure |
	XBooleanLiteral |
	XNumberLiteral |
	XNullLiteral |
	XStringLiteral |
	XTypeLiteral
;

XCollectionLiteral hidden(SL_COMMENT,WS):
	XSetLiteral | XListLiteral
;

XSetLiteral hidden(SL_COMMENT,WS):
	{XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression )*)? '}'
;

XListLiteral hidden(SL_COMMENT,WS):
	{XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression )*)? ']'
;

XClosure returns XExpression hidden(SL_COMMENT,WS):
	=>({XClosure} 
	'[') 
		=>((declaredFormalParameters+=ID (',' declaredFormalParameters+=ID)*)? explicitSyntax?='|')? 
		expression=XExpressionInClosure 
	']';
	
XExpressionInClosure returns XExpression hidden(SL_COMMENT,WS): 
	{XBlockExpression}
	(expressions+=XExpressionOrVarDeclaration ';'?)*
;

XShortClosure returns XExpression hidden(SL_COMMENT,WS):
	=>({XClosure} (declaredFormalParameters+=ID (',' declaredFormalParameters+=ID)*)? explicitSyntax?='|') expression=XExpression;

XParenthesizedExpression returns XExpression hidden(SL_COMMENT,WS):
	'(' XExpression ')';

XIfExpression returns XExpression hidden(SL_COMMENT,WS):
	{XIfExpression}
	'if' '(' if=XExpression ')'
	then=XExpression
	(=>'else' else=XExpression)?;

XSwitchExpression returns XExpression hidden(SL_COMMENT,WS):
	{XSwitchExpression}
	'switch' (=>('(' declaredParam=ID ':') switch=XExpression ')'
		| =>(declaredParam=ID ':')? switch=XExpression) '{'
	(cases+=XCasePart)*
	('default' ':' default=XExpression )?
	'}';

XCasePart hidden(SL_COMMENT,WS):
	{XCasePart}
	typeGuard=ID? ('case' case=XExpression)? 
		(':' then=XExpression | fallThrough?=',') ;

XForLoopExpression returns XExpression hidden(SL_COMMENT,WS):
	=>({XForLoopExpression}
	'for' '(' declaredParam=ID ':') forExpression=XExpression ')'
		eachExpression=XExpression;

XBasicForLoopExpression returns XExpression hidden(SL_COMMENT,WS):
	{XBasicForLoopExpression}
	'for' '('(initExpressions+=XExpressionOrVarDeclaration (',' initExpressions+=XExpressionOrVarDeclaration)*)? ';' 
		expression=XExpression? ';' 
		(updateExpressions+=XExpression (',' updateExpressions+=XExpression)*)? ')'
		eachExpression=XExpression;

XWhileExpression returns XExpression hidden(SL_COMMENT,WS):
	{XWhileExpression}
	'while' '(' predicate=XExpression ')'
		body=XExpression
	;
	
XDoWhileExpression returns XExpression hidden(SL_COMMENT,WS):
	{XDoWhileExpression}
   'do'
       body=XExpression
   'while' '(' predicate=XExpression ')';

XBlockExpression returns XExpression hidden(SL_COMMENT,WS): 
	{XBlockExpression}
	'{'
		(expressions+=XExpressionOrVarDeclaration ';'?)*
	'}';

XExpressionOrVarDeclaration returns XExpression hidden(SL_COMMENT,WS):
	XVariableDeclaration | XExpression;

XVariableDeclaration returns XExpression hidden(SL_COMMENT,WS):
	{XVariableDeclaration}
	(writeable?='var'|'val') (=>(type=ID name=ValidID) | name=ValidID) ('=' right=XExpression)?;

/*ID returns types::jvmFormalParameter:
	(parameterType=JvmTypeReference)? name=ValidID;
	
FullID returns types::jvmFormalParameter:
	parameterType=JvmTypeReference name=ValidID;*/

XFeatureCall returns XExpression hidden(SL_COMMENT,WS):
	{XFeatureCall}
	('<' typeArguments+=ID (',' typeArguments+=ID)* '>')? 
	feature=ID 
	(=>explicitOperationCall?='(' 
		(
		    featureCallArguments+=XShortClosure
		  |	featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*
		)? 
	')')?
	featureCallArguments+=XClosure?;
	
FeatureCallID:
	ValidID | 'extends' | 'static' | 'import' | 'extension'
;

IdOrSuper :
	FeatureCallID | 'super'
;
	
XConstructorCall returns XExpression hidden(SL_COMMENT,WS):
	{XConstructorCall}
	'new' constructor=ID 
	(=>'<' typeArguments+=ID (',' typeArguments+=ID)* '>')?
	(=>explicitConstructorCall?='(' 
		(
		    arguments+=XShortClosure
		  |	arguments+=XExpression (',' arguments+=XExpression)*
		)? 
	')')?
	arguments+=XClosure?;

XBooleanLiteral returns XExpression hidden(SL_COMMENT,WS):
	{XBooleanLiteral} ('false' | isTrue?='true');

XNullLiteral returns XExpression hidden(SL_COMMENT,WS):
	{XNullLiteral} 'null';

XNumberLiteral returns XExpression hidden(SL_COMMENT,WS):
	{XNumberLiteral} value=Number;

XStringLiteral returns XExpression hidden(SL_COMMENT,WS):
	{XStringLiteral} value=STRING;

XTypeLiteral returns XExpression hidden(SL_COMMENT,WS):
	{XTypeLiteral} 'typeof' '(' type=ID (arrayDimensions+=ArrayBrackets)* ')'
;

XThrowExpression returns XExpression hidden(SL_COMMENT,WS):
	{XThrowExpression} 'throw' expression=XExpression;
	
XReturnExpression returns XExpression hidden(SL_COMMENT,WS):
	{XReturnExpression} 'return' (->expression=XExpression)?;
	
XTryCatchFinallyExpression returns XExpression hidden(SL_COMMENT,WS):
	{XTryCatchFinallyExpression}
	'try' 
		expression=XExpression
	(
		catchClauses+=XCatchClause+
		(=>'finally' finallyExpression=XExpression)?
	|	'finally' finallyExpression=XExpression
	);
	
XSynchronizedExpression returns XExpression hidden(SL_COMMENT,WS):
	=>({XSynchronizedExpression}
	'synchronized' '(') param=XExpression ')' expression=XExpression;

XCatchClause hidden(SL_COMMENT,WS):
	=>'catch' '(' declaredParam=ID ')' expression=XExpression;

ArrayBrackets hidden(SL_COMMENT,WS):'[' ID ']';

QualifiedName hidden(SL_COMMENT,WS):
  ValidID (=>'.' ValidID)*;

Number hidden(SL_COMMENT,WS):
	HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	
ValidID hidden(SL_COMMENT,WS): ID;

terminal STRING	: 
			'"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
			"'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'";

/**
 * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
 * which makes downstream grammars break on classloading, when a rule is removed.
 */
StaticQualifier hidden(SL_COMMENT,WS):
	(ValidID '::')+
;
terminal ID : '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

terminal HEX:
	('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F'|'_')+ 
	('#' (('b'|'B')('i'|'I') | ('l'|'L')))?;
	
terminal INT returns ecore::EInt:
	'0'..'9' ('0'..'9'|'_')*; 

terminal DECIMAL:
	INT 
	(('e'|'E') ('+'|'-')? INT)? 
	(('b'|'B')('i'|'I'|'d'|'D') | ('l'|'L'|'d'|'D'|'f'|'F'))?;
	
terminal ML_COMMENT	: '/*' -> '*/';
terminal SL_COMMENT 	: '//' !('\n'|'\r')* ('\r'? '\n')?;

terminal WS			: (' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER: .;
