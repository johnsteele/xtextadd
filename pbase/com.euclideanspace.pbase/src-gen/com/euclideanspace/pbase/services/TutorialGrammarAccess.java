/*
* generated by Xtext
*/
package com.euclideanspace.pbase.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class TutorialGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cMAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cMMemberParserRuleCall_0 = (RuleCall)cMAssignment.eContents().get(0);
		
		//Model hidden(SL_COMMENT, WS):
		//	m+=Member*;
		public ParserRule getRule() { return rule; }

		//m+=Member*
		public Assignment getMAssignment() { return cMAssignment; }

		//Member
		public RuleCall getMMemberParserRuleCall_0() { return cMMemberParserRuleCall_0; }
	}

	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Member");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Group cGroup_0_0_0 = (Group)cAlternatives_0_0.eContents().get(0);
		private final Assignment cExtensionAssignment_0_0_0_0 = (Assignment)cGroup_0_0_0.eContents().get(0);
		private final Keyword cExtensionExtensionKeyword_0_0_0_0_0 = (Keyword)cExtensionAssignment_0_0_0_0.eContents().get(0);
		private final Alternatives cAlternatives_0_0_0_1 = (Alternatives)cGroup_0_0_0.eContents().get(1);
		private final Assignment cFinalAssignment_0_0_0_1_0 = (Assignment)cAlternatives_0_0_0_1.eContents().get(0);
		private final Keyword cFinalValKeyword_0_0_0_1_0_0 = (Keyword)cFinalAssignment_0_0_0_1_0.eContents().get(0);
		private final Keyword cVarKeyword_0_0_0_1_1 = (Keyword)cAlternatives_0_0_0_1.eContents().get(1);
		private final Assignment cTypeAssignment_0_0_0_2 = (Assignment)cGroup_0_0_0.eContents().get(2);
		private final RuleCall cTypeIDTerminalRuleCall_0_0_0_2_0 = (RuleCall)cTypeAssignment_0_0_0_2.eContents().get(0);
		private final Assignment cName1Assignment_0_0_0_3 = (Assignment)cGroup_0_0_0.eContents().get(3);
		private final RuleCall cName1ValidIDParserRuleCall_0_0_0_3_0 = (RuleCall)cName1Assignment_0_0_0_3.eContents().get(0);
		private final Group cGroup_0_0_1 = (Group)cAlternatives_0_0.eContents().get(1);
		private final Assignment cStaticAssignment_0_0_1_0 = (Assignment)cGroup_0_0_1.eContents().get(0);
		private final Keyword cStaticStaticKeyword_0_0_1_0_0 = (Keyword)cStaticAssignment_0_0_1_0.eContents().get(0);
		private final Alternatives cAlternatives_0_0_1_1 = (Alternatives)cGroup_0_0_1.eContents().get(1);
		private final Assignment cTypeAssignment_0_0_1_1_0 = (Assignment)cAlternatives_0_0_1_1.eContents().get(0);
		private final RuleCall cTypeIDTerminalRuleCall_0_0_1_1_0_0 = (RuleCall)cTypeAssignment_0_0_1_1_0.eContents().get(0);
		private final Alternatives cAlternatives_0_0_1_1_1 = (Alternatives)cAlternatives_0_0_1_1.eContents().get(1);
		private final Assignment cFinalAssignment_0_0_1_1_1_0 = (Assignment)cAlternatives_0_0_1_1_1.eContents().get(0);
		private final Keyword cFinalValKeyword_0_0_1_1_1_0_0 = (Keyword)cFinalAssignment_0_0_1_1_1_0.eContents().get(0);
		private final Keyword cVarKeyword_0_0_1_1_1_1 = (Keyword)cAlternatives_0_0_1_1_1.eContents().get(1);
		private final Assignment cName2Assignment_0_0_1_2 = (Assignment)cGroup_0_0_1.eContents().get(2);
		private final RuleCall cName2ValidIDParserRuleCall_0_0_1_2_0 = (RuleCall)cName2Assignment_0_0_1_2.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cInitialValueAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cInitialValueXExpressionParserRuleCall_0_1_1_0 = (RuleCall)cInitialValueAssignment_0_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cClassKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cNameAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cNameValidIDParserRuleCall_0_4_0 = (RuleCall)cNameAssignment_0_4.eContents().get(0);
		private final Group cGroup_0_5 = (Group)cGroup_0.eContents().get(5);
		private final Keyword cLessThanSignKeyword_0_5_0 = (Keyword)cGroup_0_5.eContents().get(0);
		private final Assignment cTypeParametersAssignment_0_5_1 = (Assignment)cGroup_0_5.eContents().get(1);
		private final RuleCall cTypeParametersIDTerminalRuleCall_0_5_1_0 = (RuleCall)cTypeParametersAssignment_0_5_1.eContents().get(0);
		private final Group cGroup_0_5_2 = (Group)cGroup_0_5.eContents().get(2);
		private final Keyword cCommaKeyword_0_5_2_0 = (Keyword)cGroup_0_5_2.eContents().get(0);
		private final Assignment cTypeParametersAssignment_0_5_2_1 = (Assignment)cGroup_0_5_2.eContents().get(1);
		private final RuleCall cTypeParametersIDTerminalRuleCall_0_5_2_1_0 = (RuleCall)cTypeParametersAssignment_0_5_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_5_3 = (Keyword)cGroup_0_5.eContents().get(3);
		private final Group cGroup_0_6 = (Group)cGroup_0.eContents().get(6);
		private final Keyword cExtendsKeyword_0_6_0 = (Keyword)cGroup_0_6.eContents().get(0);
		private final Assignment cExtendsAssignment_0_6_1 = (Assignment)cGroup_0_6.eContents().get(1);
		private final RuleCall cExtendsIDTerminalRuleCall_0_6_1_0 = (RuleCall)cExtendsAssignment_0_6_1.eContents().get(0);
		private final Group cGroup_0_7 = (Group)cGroup_0.eContents().get(7);
		private final Keyword cImplementsKeyword_0_7_0 = (Keyword)cGroup_0_7.eContents().get(0);
		private final Assignment cImplementsAssignment_0_7_1 = (Assignment)cGroup_0_7.eContents().get(1);
		private final RuleCall cImplementsIDTerminalRuleCall_0_7_1_0 = (RuleCall)cImplementsAssignment_0_7_1.eContents().get(0);
		private final Group cGroup_0_7_2 = (Group)cGroup_0_7.eContents().get(2);
		private final Keyword cCommaKeyword_0_7_2_0 = (Keyword)cGroup_0_7_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_7_2_1 = (RuleCall)cGroup_0_7_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0_8 = (Keyword)cGroup_0.eContents().get(8);
		private final Assignment cMembersAssignment_0_9 = (Assignment)cGroup_0.eContents().get(9);
		private final RuleCall cMembersMemberParserRuleCall_0_9_0 = (RuleCall)cMembersAssignment_0_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_10 = (Keyword)cGroup_0.eContents().get(10);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cDefKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Assignment cOverrideAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final Keyword cOverrideOverrideKeyword_1_0_1_0 = (Keyword)cOverrideAssignment_1_0_1.eContents().get(0);
		private final Assignment cStaticAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cStaticStaticKeyword_1_1_0 = (Keyword)cStaticAssignment_1_1.eContents().get(0);
		private final Assignment cDispatchAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Keyword cDispatchDispatchKeyword_1_2_0 = (Keyword)cDispatchAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cLessThanSignKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cTypeParametersAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cTypeParametersIDTerminalRuleCall_1_3_1_0 = (RuleCall)cTypeParametersAssignment_1_3_1.eContents().get(0);
		private final Group cGroup_1_3_2 = (Group)cGroup_1_3.eContents().get(2);
		private final Keyword cCommaKeyword_1_3_2_0 = (Keyword)cGroup_1_3_2.eContents().get(0);
		private final Assignment cTypeParametersAssignment_1_3_2_1 = (Assignment)cGroup_1_3_2.eContents().get(1);
		private final RuleCall cTypeParametersIDTerminalRuleCall_1_3_2_1_0 = (RuleCall)cTypeParametersAssignment_1_3_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3_3 = (Keyword)cGroup_1_3.eContents().get(3);
		private final Alternatives cAlternatives_1_4 = (Alternatives)cGroup_1.eContents().get(4);
		private final Group cGroup_1_4_0 = (Group)cAlternatives_1_4.eContents().get(0);
		private final Group cGroup_1_4_0_0 = (Group)cGroup_1_4_0.eContents().get(0);
		private final Assignment cReturnTypeAssignment_1_4_0_0_0 = (Assignment)cGroup_1_4_0_0.eContents().get(0);
		private final RuleCall cReturnTypeIDTerminalRuleCall_1_4_0_0_0_0 = (RuleCall)cReturnTypeAssignment_1_4_0_0_0.eContents().get(0);
		private final Assignment cName3Assignment_1_4_0_0_1 = (Assignment)cGroup_1_4_0_0.eContents().get(1);
		private final RuleCall cName3ValidIDParserRuleCall_1_4_0_0_1_0 = (RuleCall)cName3Assignment_1_4_0_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_4_0_0_2 = (Keyword)cGroup_1_4_0_0.eContents().get(2);
		private final Group cGroup_1_4_1 = (Group)cAlternatives_1_4.eContents().get(1);
		private final Assignment cName4Assignment_1_4_1_0 = (Assignment)cGroup_1_4_1.eContents().get(0);
		private final RuleCall cName4ValidIDParserRuleCall_1_4_1_0_0 = (RuleCall)cName4Assignment_1_4_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_4_1_1 = (Keyword)cGroup_1_4_1.eContents().get(1);
		private final Group cGroup_1_5 = (Group)cGroup_1.eContents().get(5);
		private final Assignment cParametersAssignment_1_5_0 = (Assignment)cGroup_1_5.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_1_5_0_0 = (RuleCall)cParametersAssignment_1_5_0.eContents().get(0);
		private final Group cGroup_1_5_1 = (Group)cGroup_1_5.eContents().get(1);
		private final Keyword cCommaKeyword_1_5_1_0 = (Keyword)cGroup_1_5_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_5_1_1 = (Assignment)cGroup_1_5_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_1_5_1_1_0 = (RuleCall)cParametersAssignment_1_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Group cGroup_1_7 = (Group)cGroup_1.eContents().get(7);
		private final Keyword cThrowsKeyword_1_7_0 = (Keyword)cGroup_1_7.eContents().get(0);
		private final Assignment cExceptionsAssignment_1_7_1 = (Assignment)cGroup_1_7.eContents().get(1);
		private final RuleCall cExceptionsIDTerminalRuleCall_1_7_1_0 = (RuleCall)cExceptionsAssignment_1_7_1.eContents().get(0);
		private final Group cGroup_1_7_2 = (Group)cGroup_1_7.eContents().get(2);
		private final Keyword cCommaKeyword_1_7_2_0 = (Keyword)cGroup_1_7_2.eContents().get(0);
		private final Assignment cExceptionsAssignment_1_7_2_1 = (Assignment)cGroup_1_7_2.eContents().get(1);
		private final RuleCall cExceptionsIDTerminalRuleCall_1_7_2_1_0 = (RuleCall)cExceptionsAssignment_1_7_2_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_8 = (Assignment)cGroup_1.eContents().get(8);
		private final RuleCall cExpressionXBlockExpressionParserRuleCall_1_8_0 = (RuleCall)cExpressionAssignment_1_8.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cNewKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cTypeParametersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cTypeParametersIDTerminalRuleCall_2_1_1_0 = (RuleCall)cTypeParametersAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_1_2 = (Group)cGroup_2_1.eContents().get(2);
		private final Keyword cCommaKeyword_2_1_2_0 = (Keyword)cGroup_2_1_2.eContents().get(0);
		private final Assignment cTypeParametersAssignment_2_1_2_1 = (Assignment)cGroup_2_1_2.eContents().get(1);
		private final RuleCall cTypeParametersIDTerminalRuleCall_2_1_2_1_0 = (RuleCall)cTypeParametersAssignment_2_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_1_3 = (Keyword)cGroup_2_1.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Assignment cParametersAssignment_2_3_0 = (Assignment)cGroup_2_3.eContents().get(0);
		private final RuleCall cParametersParameterParserRuleCall_2_3_0_0 = (RuleCall)cParametersAssignment_2_3_0.eContents().get(0);
		private final Group cGroup_2_3_1 = (Group)cGroup_2_3.eContents().get(1);
		private final Keyword cCommaKeyword_2_3_1_0 = (Keyword)cGroup_2_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_3_1_1 = (Assignment)cGroup_2_3_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_2_3_1_1_0 = (RuleCall)cParametersAssignment_2_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_2_5 = (Group)cGroup_2.eContents().get(5);
		private final Keyword cThrowsKeyword_2_5_0 = (Keyword)cGroup_2_5.eContents().get(0);
		private final Assignment cExceptionsAssignment_2_5_1 = (Assignment)cGroup_2_5.eContents().get(1);
		private final RuleCall cExceptionsIDTerminalRuleCall_2_5_1_0 = (RuleCall)cExceptionsAssignment_2_5_1.eContents().get(0);
		private final Group cGroup_2_5_2 = (Group)cGroup_2_5.eContents().get(2);
		private final Keyword cCommaKeyword_2_5_2_0 = (Keyword)cGroup_2_5_2.eContents().get(0);
		private final Assignment cExceptionsAssignment_2_5_2_1 = (Assignment)cGroup_2_5_2.eContents().get(1);
		private final RuleCall cExceptionsIDTerminalRuleCall_2_5_2_1_0 = (RuleCall)cExceptionsAssignment_2_5_2_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2_6 = (Assignment)cGroup_2.eContents().get(6);
		private final RuleCall cExpressionXBlockExpressionParserRuleCall_2_6_0 = (RuleCall)cExpressionAssignment_2_6.eContents().get(0);
		
		/// *
		// * This is an inner element inside a class, interface or enum, such as:
		// * 'val' or 'var' returns EuclidField
		// * 'def' method returns EuclidFunction
		// * inner class returns EuclidInnerClass
		// * / Member returns EuclidMember hidden(SL_COMMENT, WS):
		//	(extension?="extension" (final?="val" | "var")? type=ID name1=ValidID? | static?="static"? (type=ID | (final?="val" |
		//	"var")) name2=ValidID) ("=" initialValue=XExpression)? ";"? //| {EuclidInnerClass.annotationInfo = current}
		//	"class" name=ValidID ("<" typeParameters+=ID ("," typeParameters+=ID)* ">")? ("extends" extends=ID)? ("implements"
		//	implements+=ID ("," ID)*)? "{" members+=Member* "}" //{EuclidMember} annotations+=XAnnotation*
		//	//{EuclidField.annotationInfo = current}
		//	//visibility=Visibility?
		//	| ("def" //| {EuclidFunction.annotationInfo = current}
		//	| override?="override") / *visibility=Visibility?* / static?="static"? dispatch?="dispatch"? ("<" typeParameters+=ID (","
		//	typeParameters+=ID)* ">")? (=> (returnType=ID name3=ValidID "(") / * =>(returnType=ID createExtensionInfo=CreateExtensionInfo name=ValidID '(')
		//      |* / //| =>(createExtensionInfo=CreateExtensionInfo name=ValidID '(')
		//	| name4=ValidID "(") (parameters+=Parameter ("," parameters+=Parameter)*)? ")" ("throws" exceptions+=ID (","
		//	exceptions+=ID)*)? expression=XBlockExpression? | / *| {EuclidConstructor.annotationInfo = current}
		//    visibility=Visibility?* / "new" ("<" typeParameters+=ID ("," typeParameters+=ID)* ">")? "(" (parameters+=Parameter
		//	("," parameters+=Parameter)*)? ")" ("throws" exceptions+=ID ("," exceptions+=ID)*)? expression=XBlockExpression;
		public ParserRule getRule() { return rule; }

		//(extension?="extension" (final?="val" | "var")? type=ID name1=ValidID? | static?="static"? (type=ID | (final?="val" |
		//"var")) name2=ValidID) ("=" initialValue=XExpression)? ";"? //| {EuclidInnerClass.annotationInfo = current}
		//"class" name=ValidID ("<" typeParameters+=ID ("," typeParameters+=ID)* ">")? ("extends" extends=ID)? ("implements"
		//implements+=ID ("," ID)*)? "{" members+=Member* "}" //{EuclidMember} annotations+=XAnnotation*
		////{EuclidField.annotationInfo = current}
		////visibility=Visibility?
		//| ("def" //| {EuclidFunction.annotationInfo = current}
		//| override?="override") / *visibility=Visibility?* / static?="static"? dispatch?="dispatch"? ("<" typeParameters+=ID (","
		//typeParameters+=ID)* ">")? (=> (returnType=ID name3=ValidID "(") / * =>(returnType=ID createExtensionInfo=CreateExtensionInfo name=ValidID '(')
		//      |* / //| =>(createExtensionInfo=CreateExtensionInfo name=ValidID '(')
		//| name4=ValidID "(") (parameters+=Parameter ("," parameters+=Parameter)*)? ")" ("throws" exceptions+=ID (","
		//exceptions+=ID)*)? expression=XBlockExpression? | / *| {EuclidConstructor.annotationInfo = current}
		//    visibility=Visibility?* / "new" ("<" typeParameters+=ID ("," typeParameters+=ID)* ">")? "(" (parameters+=Parameter
		//("," parameters+=Parameter)*)? ")" ("throws" exceptions+=ID ("," exceptions+=ID)*)? expression=XBlockExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//(extension?="extension" (final?="val" | "var")? type=ID name1=ValidID? | static?="static"? (type=ID | (final?="val" |
		//"var")) name2=ValidID) ("=" initialValue=XExpression)? ";"? //| {EuclidInnerClass.annotationInfo = current}
		//"class" name=ValidID ("<" typeParameters+=ID ("," typeParameters+=ID)* ">")? ("extends" extends=ID)? ("implements"
		//implements+=ID ("," ID)*)? "{" members+=Member* "}"
		public Group getGroup_0() { return cGroup_0; }

		//extension?="extension" (final?="val" | "var")? type=ID name1=ValidID? | static?="static"? (type=ID | (final?="val" |
		//"var")) name2=ValidID
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//extension?="extension" (final?="val" | "var")? type=ID name1=ValidID?
		public Group getGroup_0_0_0() { return cGroup_0_0_0; }

		//extension?="extension"
		public Assignment getExtensionAssignment_0_0_0_0() { return cExtensionAssignment_0_0_0_0; }

		//"extension"
		public Keyword getExtensionExtensionKeyword_0_0_0_0_0() { return cExtensionExtensionKeyword_0_0_0_0_0; }

		//(final?="val" | "var")?
		public Alternatives getAlternatives_0_0_0_1() { return cAlternatives_0_0_0_1; }

		//final?="val"
		public Assignment getFinalAssignment_0_0_0_1_0() { return cFinalAssignment_0_0_0_1_0; }

		//"val"
		public Keyword getFinalValKeyword_0_0_0_1_0_0() { return cFinalValKeyword_0_0_0_1_0_0; }

		//"var"
		public Keyword getVarKeyword_0_0_0_1_1() { return cVarKeyword_0_0_0_1_1; }

		//type=ID
		public Assignment getTypeAssignment_0_0_0_2() { return cTypeAssignment_0_0_0_2; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_0_0_0_2_0() { return cTypeIDTerminalRuleCall_0_0_0_2_0; }

		//name1=ValidID?
		public Assignment getName1Assignment_0_0_0_3() { return cName1Assignment_0_0_0_3; }

		//ValidID
		public RuleCall getName1ValidIDParserRuleCall_0_0_0_3_0() { return cName1ValidIDParserRuleCall_0_0_0_3_0; }

		//static?="static"? (type=ID | (final?="val" | "var")) name2=ValidID
		public Group getGroup_0_0_1() { return cGroup_0_0_1; }

		//static?="static"?
		public Assignment getStaticAssignment_0_0_1_0() { return cStaticAssignment_0_0_1_0; }

		//"static"
		public Keyword getStaticStaticKeyword_0_0_1_0_0() { return cStaticStaticKeyword_0_0_1_0_0; }

		//type=ID | (final?="val" | "var")
		public Alternatives getAlternatives_0_0_1_1() { return cAlternatives_0_0_1_1; }

		//type=ID
		public Assignment getTypeAssignment_0_0_1_1_0() { return cTypeAssignment_0_0_1_1_0; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_0_0_1_1_0_0() { return cTypeIDTerminalRuleCall_0_0_1_1_0_0; }

		//final?="val" | "var"
		public Alternatives getAlternatives_0_0_1_1_1() { return cAlternatives_0_0_1_1_1; }

		//final?="val"
		public Assignment getFinalAssignment_0_0_1_1_1_0() { return cFinalAssignment_0_0_1_1_1_0; }

		//"val"
		public Keyword getFinalValKeyword_0_0_1_1_1_0_0() { return cFinalValKeyword_0_0_1_1_1_0_0; }

		//"var"
		public Keyword getVarKeyword_0_0_1_1_1_1() { return cVarKeyword_0_0_1_1_1_1; }

		//name2=ValidID
		public Assignment getName2Assignment_0_0_1_2() { return cName2Assignment_0_0_1_2; }

		//ValidID
		public RuleCall getName2ValidIDParserRuleCall_0_0_1_2_0() { return cName2ValidIDParserRuleCall_0_0_1_2_0; }

		//("=" initialValue=XExpression)?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_0_1_0() { return cEqualsSignKeyword_0_1_0; }

		//initialValue=XExpression
		public Assignment getInitialValueAssignment_0_1_1() { return cInitialValueAssignment_0_1_1; }

		//XExpression
		public RuleCall getInitialValueXExpressionParserRuleCall_0_1_1_0() { return cInitialValueXExpressionParserRuleCall_0_1_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }

		////| {EuclidInnerClass.annotationInfo = current}
		//"class"
		public Keyword getClassKeyword_0_3() { return cClassKeyword_0_3; }

		//name=ValidID
		public Assignment getNameAssignment_0_4() { return cNameAssignment_0_4; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_4_0() { return cNameValidIDParserRuleCall_0_4_0; }

		//("<" typeParameters+=ID ("," typeParameters+=ID)* ">")?
		public Group getGroup_0_5() { return cGroup_0_5; }

		//"<"
		public Keyword getLessThanSignKeyword_0_5_0() { return cLessThanSignKeyword_0_5_0; }

		//typeParameters+=ID
		public Assignment getTypeParametersAssignment_0_5_1() { return cTypeParametersAssignment_0_5_1; }

		//ID
		public RuleCall getTypeParametersIDTerminalRuleCall_0_5_1_0() { return cTypeParametersIDTerminalRuleCall_0_5_1_0; }

		//("," typeParameters+=ID)*
		public Group getGroup_0_5_2() { return cGroup_0_5_2; }

		//","
		public Keyword getCommaKeyword_0_5_2_0() { return cCommaKeyword_0_5_2_0; }

		//typeParameters+=ID
		public Assignment getTypeParametersAssignment_0_5_2_1() { return cTypeParametersAssignment_0_5_2_1; }

		//ID
		public RuleCall getTypeParametersIDTerminalRuleCall_0_5_2_1_0() { return cTypeParametersIDTerminalRuleCall_0_5_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_0_5_3() { return cGreaterThanSignKeyword_0_5_3; }

		//("extends" extends=ID)?
		public Group getGroup_0_6() { return cGroup_0_6; }

		//"extends"
		public Keyword getExtendsKeyword_0_6_0() { return cExtendsKeyword_0_6_0; }

		//extends=ID
		public Assignment getExtendsAssignment_0_6_1() { return cExtendsAssignment_0_6_1; }

		//ID
		public RuleCall getExtendsIDTerminalRuleCall_0_6_1_0() { return cExtendsIDTerminalRuleCall_0_6_1_0; }

		//("implements" implements+=ID ("," ID)*)?
		public Group getGroup_0_7() { return cGroup_0_7; }

		//"implements"
		public Keyword getImplementsKeyword_0_7_0() { return cImplementsKeyword_0_7_0; }

		//implements+=ID
		public Assignment getImplementsAssignment_0_7_1() { return cImplementsAssignment_0_7_1; }

		//ID
		public RuleCall getImplementsIDTerminalRuleCall_0_7_1_0() { return cImplementsIDTerminalRuleCall_0_7_1_0; }

		//("," ID)*
		public Group getGroup_0_7_2() { return cGroup_0_7_2; }

		//","
		public Keyword getCommaKeyword_0_7_2_0() { return cCommaKeyword_0_7_2_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_7_2_1() { return cIDTerminalRuleCall_0_7_2_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_8() { return cLeftCurlyBracketKeyword_0_8; }

		//members+=Member*
		public Assignment getMembersAssignment_0_9() { return cMembersAssignment_0_9; }

		//Member
		public RuleCall getMembersMemberParserRuleCall_0_9_0() { return cMembersMemberParserRuleCall_0_9_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_10() { return cRightCurlyBracketKeyword_0_10; }

		//("def" //| {EuclidFunction.annotationInfo = current}
		//| override?="override") / *visibility=Visibility?* / static?="static"? dispatch?="dispatch"? ("<" typeParameters+=ID (","
		//typeParameters+=ID)* ">")? (=> (returnType=ID name3=ValidID "(") / * =>(returnType=ID createExtensionInfo=CreateExtensionInfo name=ValidID '(')
		//      |* / //| =>(createExtensionInfo=CreateExtensionInfo name=ValidID '(')
		//| name4=ValidID "(") (parameters+=Parameter ("," parameters+=Parameter)*)? ")" ("throws" exceptions+=ID (","
		//exceptions+=ID)*)? expression=XBlockExpression?
		public Group getGroup_1() { return cGroup_1; }

		//"def" //| {EuclidFunction.annotationInfo = current}
		//| override?="override"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"def"
		public Keyword getDefKeyword_1_0_0() { return cDefKeyword_1_0_0; }

		//override?="override"
		public Assignment getOverrideAssignment_1_0_1() { return cOverrideAssignment_1_0_1; }

		//"override"
		public Keyword getOverrideOverrideKeyword_1_0_1_0() { return cOverrideOverrideKeyword_1_0_1_0; }

		/// *visibility=Visibility?* / static?="static"?
		public Assignment getStaticAssignment_1_1() { return cStaticAssignment_1_1; }

		//"static"
		public Keyword getStaticStaticKeyword_1_1_0() { return cStaticStaticKeyword_1_1_0; }

		//dispatch?="dispatch"?
		public Assignment getDispatchAssignment_1_2() { return cDispatchAssignment_1_2; }

		//"dispatch"
		public Keyword getDispatchDispatchKeyword_1_2_0() { return cDispatchDispatchKeyword_1_2_0; }

		//("<" typeParameters+=ID ("," typeParameters+=ID)* ">")?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//"<"
		public Keyword getLessThanSignKeyword_1_3_0() { return cLessThanSignKeyword_1_3_0; }

		//typeParameters+=ID
		public Assignment getTypeParametersAssignment_1_3_1() { return cTypeParametersAssignment_1_3_1; }

		//ID
		public RuleCall getTypeParametersIDTerminalRuleCall_1_3_1_0() { return cTypeParametersIDTerminalRuleCall_1_3_1_0; }

		//("," typeParameters+=ID)*
		public Group getGroup_1_3_2() { return cGroup_1_3_2; }

		//","
		public Keyword getCommaKeyword_1_3_2_0() { return cCommaKeyword_1_3_2_0; }

		//typeParameters+=ID
		public Assignment getTypeParametersAssignment_1_3_2_1() { return cTypeParametersAssignment_1_3_2_1; }

		//ID
		public RuleCall getTypeParametersIDTerminalRuleCall_1_3_2_1_0() { return cTypeParametersIDTerminalRuleCall_1_3_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_3_3() { return cGreaterThanSignKeyword_1_3_3; }

		//=> (returnType=ID name3=ValidID "(") / * =>(returnType=ID createExtensionInfo=CreateExtensionInfo name=ValidID '(')
		//      |* / //| =>(createExtensionInfo=CreateExtensionInfo name=ValidID '(')
		//| name4=ValidID "("
		public Alternatives getAlternatives_1_4() { return cAlternatives_1_4; }

		//=> (returnType=ID name3=ValidID "(")
		public Group getGroup_1_4_0() { return cGroup_1_4_0; }

		//returnType=ID name3=ValidID "("
		public Group getGroup_1_4_0_0() { return cGroup_1_4_0_0; }

		//returnType=ID
		public Assignment getReturnTypeAssignment_1_4_0_0_0() { return cReturnTypeAssignment_1_4_0_0_0; }

		//ID
		public RuleCall getReturnTypeIDTerminalRuleCall_1_4_0_0_0_0() { return cReturnTypeIDTerminalRuleCall_1_4_0_0_0_0; }

		//name3=ValidID
		public Assignment getName3Assignment_1_4_0_0_1() { return cName3Assignment_1_4_0_0_1; }

		//ValidID
		public RuleCall getName3ValidIDParserRuleCall_1_4_0_0_1_0() { return cName3ValidIDParserRuleCall_1_4_0_0_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_4_0_0_2() { return cLeftParenthesisKeyword_1_4_0_0_2; }

		//name4=ValidID "("
		public Group getGroup_1_4_1() { return cGroup_1_4_1; }

		//name4=ValidID
		public Assignment getName4Assignment_1_4_1_0() { return cName4Assignment_1_4_1_0; }

		//ValidID
		public RuleCall getName4ValidIDParserRuleCall_1_4_1_0_0() { return cName4ValidIDParserRuleCall_1_4_1_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_4_1_1() { return cLeftParenthesisKeyword_1_4_1_1; }

		//(parameters+=Parameter ("," parameters+=Parameter)*)?
		public Group getGroup_1_5() { return cGroup_1_5; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_1_5_0() { return cParametersAssignment_1_5_0; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_1_5_0_0() { return cParametersParameterParserRuleCall_1_5_0_0; }

		//("," parameters+=Parameter)*
		public Group getGroup_1_5_1() { return cGroup_1_5_1; }

		//","
		public Keyword getCommaKeyword_1_5_1_0() { return cCommaKeyword_1_5_1_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_1_5_1_1() { return cParametersAssignment_1_5_1_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_1_5_1_1_0() { return cParametersParameterParserRuleCall_1_5_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_6() { return cRightParenthesisKeyword_1_6; }

		//("throws" exceptions+=ID ("," exceptions+=ID)*)?
		public Group getGroup_1_7() { return cGroup_1_7; }

		//"throws"
		public Keyword getThrowsKeyword_1_7_0() { return cThrowsKeyword_1_7_0; }

		//exceptions+=ID
		public Assignment getExceptionsAssignment_1_7_1() { return cExceptionsAssignment_1_7_1; }

		//ID
		public RuleCall getExceptionsIDTerminalRuleCall_1_7_1_0() { return cExceptionsIDTerminalRuleCall_1_7_1_0; }

		//("," exceptions+=ID)*
		public Group getGroup_1_7_2() { return cGroup_1_7_2; }

		//","
		public Keyword getCommaKeyword_1_7_2_0() { return cCommaKeyword_1_7_2_0; }

		//exceptions+=ID
		public Assignment getExceptionsAssignment_1_7_2_1() { return cExceptionsAssignment_1_7_2_1; }

		//ID
		public RuleCall getExceptionsIDTerminalRuleCall_1_7_2_1_0() { return cExceptionsIDTerminalRuleCall_1_7_2_1_0; }

		//expression=XBlockExpression?
		public Assignment getExpressionAssignment_1_8() { return cExpressionAssignment_1_8; }

		//XBlockExpression
		public RuleCall getExpressionXBlockExpressionParserRuleCall_1_8_0() { return cExpressionXBlockExpressionParserRuleCall_1_8_0; }

		/// *| {EuclidConstructor.annotationInfo = current}
		//    visibility=Visibility?* / "new" ("<" typeParameters+=ID ("," typeParameters+=ID)* ">")? "(" (parameters+=Parameter
		//("," parameters+=Parameter)*)? ")" ("throws" exceptions+=ID ("," exceptions+=ID)*)? expression=XBlockExpression
		public Group getGroup_2() { return cGroup_2; }

		/// *| {EuclidConstructor.annotationInfo = current}
		//    visibility=Visibility?* / "new"
		public Keyword getNewKeyword_2_0() { return cNewKeyword_2_0; }

		//("<" typeParameters+=ID ("," typeParameters+=ID)* ">")?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"<"
		public Keyword getLessThanSignKeyword_2_1_0() { return cLessThanSignKeyword_2_1_0; }

		//typeParameters+=ID
		public Assignment getTypeParametersAssignment_2_1_1() { return cTypeParametersAssignment_2_1_1; }

		//ID
		public RuleCall getTypeParametersIDTerminalRuleCall_2_1_1_0() { return cTypeParametersIDTerminalRuleCall_2_1_1_0; }

		//("," typeParameters+=ID)*
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//","
		public Keyword getCommaKeyword_2_1_2_0() { return cCommaKeyword_2_1_2_0; }

		//typeParameters+=ID
		public Assignment getTypeParametersAssignment_2_1_2_1() { return cTypeParametersAssignment_2_1_2_1; }

		//ID
		public RuleCall getTypeParametersIDTerminalRuleCall_2_1_2_1_0() { return cTypeParametersIDTerminalRuleCall_2_1_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_1_3() { return cGreaterThanSignKeyword_2_1_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }

		//(parameters+=Parameter ("," parameters+=Parameter)*)?
		public Group getGroup_2_3() { return cGroup_2_3; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_2_3_0() { return cParametersAssignment_2_3_0; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_3_0_0() { return cParametersParameterParserRuleCall_2_3_0_0; }

		//("," parameters+=Parameter)*
		public Group getGroup_2_3_1() { return cGroup_2_3_1; }

		//","
		public Keyword getCommaKeyword_2_3_1_0() { return cCommaKeyword_2_3_1_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_2_3_1_1() { return cParametersAssignment_2_3_1_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_2_3_1_1_0() { return cParametersParameterParserRuleCall_2_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_4() { return cRightParenthesisKeyword_2_4; }

		//("throws" exceptions+=ID ("," exceptions+=ID)*)?
		public Group getGroup_2_5() { return cGroup_2_5; }

		//"throws"
		public Keyword getThrowsKeyword_2_5_0() { return cThrowsKeyword_2_5_0; }

		//exceptions+=ID
		public Assignment getExceptionsAssignment_2_5_1() { return cExceptionsAssignment_2_5_1; }

		//ID
		public RuleCall getExceptionsIDTerminalRuleCall_2_5_1_0() { return cExceptionsIDTerminalRuleCall_2_5_1_0; }

		//("," exceptions+=ID)*
		public Group getGroup_2_5_2() { return cGroup_2_5_2; }

		//","
		public Keyword getCommaKeyword_2_5_2_0() { return cCommaKeyword_2_5_2_0; }

		//exceptions+=ID
		public Assignment getExceptionsAssignment_2_5_2_1() { return cExceptionsAssignment_2_5_2_1; }

		//ID
		public RuleCall getExceptionsIDTerminalRuleCall_2_5_2_1_0() { return cExceptionsIDTerminalRuleCall_2_5_2_1_0; }

		//expression=XBlockExpression
		public Assignment getExpressionAssignment_2_6() { return cExpressionAssignment_2_6; }

		//XBlockExpression
		public RuleCall getExpressionXBlockExpressionParserRuleCall_2_6_0() { return cExpressionXBlockExpressionParserRuleCall_2_6_0; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParameterTypeIDTerminalRuleCall_0_0 = (RuleCall)cParameterTypeAssignment_0.eContents().get(0);
		private final Assignment cVarArgAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cVarArgFullStopFullStopFullStopKeyword_1_0 = (Keyword)cVarArgAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Parameter returns EuclidParameter: //annotations+=XAnnotation*
		//	parameterType=ID varArg?="..."? name=ValidID;
		public ParserRule getRule() { return rule; }

		////annotations+=XAnnotation*
		//parameterType=ID varArg?="..."? name=ValidID
		public Group getGroup() { return cGroup; }

		////annotations+=XAnnotation*
		//parameterType=ID
		public Assignment getParameterTypeAssignment_0() { return cParameterTypeAssignment_0; }

		//ID
		public RuleCall getParameterTypeIDTerminalRuleCall_0_0() { return cParameterTypeIDTerminalRuleCall_0_0; }

		//varArg?="..."?
		public Assignment getVarArgAssignment_1() { return cVarArgAssignment_1; }

		//"..."
		public Keyword getVarArgFullStopFullStopFullStopKeyword_1_0() { return cVarArgFullStopFullStopFullStopKeyword_1_0; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
	}

	public class XExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XExpression");
		private final RuleCall cXAssignmentParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// *returns XExpression* / XExpression hidden(SL_COMMENT, WS):
		//	XAssignment;
		public ParserRule getRule() { return rule; }

		//XAssignment
		public RuleCall getXAssignmentParserRuleCall() { return cXAssignmentParserRuleCall; }
	}

	public class XAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XAssignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cXAssignmentAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cFeatureAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFeatureIDTerminalRuleCall_0_1_0 = (RuleCall)cFeatureAssignment_0_1.eContents().get(0);
		private final RuleCall cOpSingleAssignParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Assignment cValueAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cValueXAssignmentParserRuleCall_0_3_0 = (RuleCall)cValueAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cXOrExpressionParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_0_0 = (Group)cGroup_1_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_1_0_0_0 = (Action)cGroup_1_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_1_0_0_1 = (Assignment)cGroup_1_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpMultiAssignParserRuleCall_1_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRightOperandXAssignmentParserRuleCall_1_1_1_0 = (RuleCall)cRightOperandAssignment_1_1_1.eContents().get(0);
		
		//XAssignment returns XExpression hidden(SL_COMMENT, WS):
		//	{XAssignment} feature=ID OpSingleAssign value=XAssignment | XOrExpression (=> ({XBinaryOperation.leftOperand=current}
		//	feature=OpMultiAssign) rightOperand=XAssignment)?;
		public ParserRule getRule() { return rule; }

		//{XAssignment} feature=ID OpSingleAssign value=XAssignment | XOrExpression (=> ({XBinaryOperation.leftOperand=current}
		//feature=OpMultiAssign) rightOperand=XAssignment)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//{XAssignment} feature=ID OpSingleAssign value=XAssignment
		public Group getGroup_0() { return cGroup_0; }

		//{XAssignment}
		public Action getXAssignmentAction_0_0() { return cXAssignmentAction_0_0; }

		//feature=ID
		public Assignment getFeatureAssignment_0_1() { return cFeatureAssignment_0_1; }

		//ID
		public RuleCall getFeatureIDTerminalRuleCall_0_1_0() { return cFeatureIDTerminalRuleCall_0_1_0; }

		//OpSingleAssign
		public RuleCall getOpSingleAssignParserRuleCall_0_2() { return cOpSingleAssignParserRuleCall_0_2; }

		//value=XAssignment
		public Assignment getValueAssignment_0_3() { return cValueAssignment_0_3; }

		//XAssignment
		public RuleCall getValueXAssignmentParserRuleCall_0_3_0() { return cValueXAssignmentParserRuleCall_0_3_0; }

		//XOrExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpMultiAssign) rightOperand=XAssignment)?
		public Group getGroup_1() { return cGroup_1; }

		//XOrExpression
		public RuleCall getXOrExpressionParserRuleCall_1_0() { return cXOrExpressionParserRuleCall_1_0; }

		//(=> ({XBinaryOperation.leftOperand=current} feature=OpMultiAssign) rightOperand=XAssignment)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//=> ({XBinaryOperation.leftOperand=current} feature=OpMultiAssign)
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//{XBinaryOperation.leftOperand=current} feature=OpMultiAssign
		public Group getGroup_1_1_0_0() { return cGroup_1_1_0_0; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_1_0_0_0; }

		//feature=OpMultiAssign
		public Assignment getFeatureAssignment_1_1_0_0_1() { return cFeatureAssignment_1_1_0_0_1; }

		//OpMultiAssign
		public RuleCall getFeatureOpMultiAssignParserRuleCall_1_1_0_0_1_0() { return cFeatureOpMultiAssignParserRuleCall_1_1_0_0_1_0; }

		//rightOperand=XAssignment
		public Assignment getRightOperandAssignment_1_1_1() { return cRightOperandAssignment_1_1_1; }

		//XAssignment
		public RuleCall getRightOperandXAssignmentParserRuleCall_1_1_1_0() { return cRightOperandXAssignmentParserRuleCall_1_1_1_0; }
	}

	public class OpSingleAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpSingleAssign");
		private final Keyword cEqualsSignKeyword = (Keyword)rule.eContents().get(1);
		
		//OpSingleAssign hidden(SL_COMMENT, WS):
		//	"=";
		public ParserRule getRule() { return rule; }

		//"="
		public Keyword getEqualsSignKeyword() { return cEqualsSignKeyword; }
	}

	public class OpMultiAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpMultiAssign");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSolidusEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cPercentSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLessThanSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLessThanSignKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cEqualsSignKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cGreaterThanSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		
		//OpMultiAssign hidden(SL_COMMENT, WS):
		//	"+=" | "-=" | "*=" | "/=" | "%=" | "<" "<" "=" | ">" ">"? ">=";
		public ParserRule getRule() { return rule; }

		//"+=" | "-=" | "*=" | "/=" | "%=" | "<" "<" "=" | ">" ">"? ">="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+="
		public Keyword getPlusSignEqualsSignKeyword_0() { return cPlusSignEqualsSignKeyword_0; }

		//"-="
		public Keyword getHyphenMinusEqualsSignKeyword_1() { return cHyphenMinusEqualsSignKeyword_1; }

		//"*="
		public Keyword getAsteriskEqualsSignKeyword_2() { return cAsteriskEqualsSignKeyword_2; }

		//"/="
		public Keyword getSolidusEqualsSignKeyword_3() { return cSolidusEqualsSignKeyword_3; }

		//"%="
		public Keyword getPercentSignEqualsSignKeyword_4() { return cPercentSignEqualsSignKeyword_4; }

		//"<" "<" "="
		public Group getGroup_5() { return cGroup_5; }

		//"<"
		public Keyword getLessThanSignKeyword_5_0() { return cLessThanSignKeyword_5_0; }

		//"<"
		public Keyword getLessThanSignKeyword_5_1() { return cLessThanSignKeyword_5_1; }

		//"="
		public Keyword getEqualsSignKeyword_5_2() { return cEqualsSignKeyword_5_2; }

		//">" ">"? ">="
		public Group getGroup_6() { return cGroup_6; }

		//">"
		public Keyword getGreaterThanSignKeyword_6_0() { return cGreaterThanSignKeyword_6_0; }

		//">"?
		public Keyword getGreaterThanSignKeyword_6_1() { return cGreaterThanSignKeyword_6_1; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_6_2() { return cGreaterThanSignEqualsSignKeyword_6_2; }
	}

	public class XOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpOrParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandXAndExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//XOrExpression returns XExpression hidden(SL_COMMENT, WS):
		//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpOr) rightOperand=XAndExpression)*;
		public ParserRule getRule() { return rule; }

		//XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpOr) rightOperand=XAndExpression)*
		public Group getGroup() { return cGroup; }

		//XAndExpression
		public RuleCall getXAndExpressionParserRuleCall_0() { return cXAndExpressionParserRuleCall_0; }

		//(=> ({XBinaryOperation.leftOperand=current} feature=OpOr) rightOperand=XAndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XBinaryOperation.leftOperand=current} feature=OpOr)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XBinaryOperation.leftOperand=current} feature=OpOr
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=OpOr
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpOr
		public RuleCall getFeatureOpOrParserRuleCall_1_0_0_1_0() { return cFeatureOpOrParserRuleCall_1_0_0_1_0; }

		//rightOperand=XAndExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//XAndExpression
		public RuleCall getRightOperandXAndExpressionParserRuleCall_1_1_0() { return cRightOperandXAndExpressionParserRuleCall_1_1_0; }
	}

	public class OpOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpOr");
		private final Keyword cVerticalLineVerticalLineKeyword = (Keyword)rule.eContents().get(1);
		
		//OpOr:
		//	"||";
		public ParserRule getRule() { return rule; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword() { return cVerticalLineVerticalLineKeyword; }
	}

	public class XAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpAndParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandXEqualityExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//XAndExpression returns XExpression hidden(SL_COMMENT, WS):
		//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpAnd) rightOperand=XEqualityExpression)*;
		public ParserRule getRule() { return rule; }

		//XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpAnd) rightOperand=XEqualityExpression)*
		public Group getGroup() { return cGroup; }

		//XEqualityExpression
		public RuleCall getXEqualityExpressionParserRuleCall_0() { return cXEqualityExpressionParserRuleCall_0; }

		//(=> ({XBinaryOperation.leftOperand=current} feature=OpAnd) rightOperand=XEqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XBinaryOperation.leftOperand=current} feature=OpAnd)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XBinaryOperation.leftOperand=current} feature=OpAnd
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=OpAnd
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpAnd
		public RuleCall getFeatureOpAndParserRuleCall_1_0_0_1_0() { return cFeatureOpAndParserRuleCall_1_0_0_1_0; }

		//rightOperand=XEqualityExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//XEqualityExpression
		public RuleCall getRightOperandXEqualityExpressionParserRuleCall_1_1_0() { return cRightOperandXEqualityExpressionParserRuleCall_1_1_0; }
	}

	public class OpAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpAnd");
		private final Keyword cAmpersandAmpersandKeyword = (Keyword)rule.eContents().get(1);
		
		//OpAnd:
		//	"&&";
		public ParserRule getRule() { return rule; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword() { return cAmpersandAmpersandKeyword; }
	}

	public class XEqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XEqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXRelationalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpEqualityParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandXRelationalExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//XEqualityExpression returns XExpression hidden(SL_COMMENT, WS):
		//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpEquality)
		//	rightOperand=XRelationalExpression)*;
		public ParserRule getRule() { return rule; }

		//XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpEquality)
		//rightOperand=XRelationalExpression)*
		public Group getGroup() { return cGroup; }

		//XRelationalExpression
		public RuleCall getXRelationalExpressionParserRuleCall_0() { return cXRelationalExpressionParserRuleCall_0; }

		//(=> ({XBinaryOperation.leftOperand=current} feature=OpEquality) rightOperand=XRelationalExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XBinaryOperation.leftOperand=current} feature=OpEquality)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XBinaryOperation.leftOperand=current} feature=OpEquality
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=OpEquality
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpEquality
		public RuleCall getFeatureOpEqualityParserRuleCall_1_0_0_1_0() { return cFeatureOpEqualityParserRuleCall_1_0_0_1_0; }

		//rightOperand=XRelationalExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//XRelationalExpression
		public RuleCall getRightOperandXRelationalExpressionParserRuleCall_1_1_0() { return cRightOperandXRelationalExpressionParserRuleCall_1_1_0; }
	}

	public class OpEqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpEquality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cExclamationMarkEqualsSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//OpEquality:
		//	"==" | "!=" | "===" | "!==";
		public ParserRule getRule() { return rule; }

		//"==" | "!=" | "===" | "!=="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }

		//"==="
		public Keyword getEqualsSignEqualsSignEqualsSignKeyword_2() { return cEqualsSignEqualsSignEqualsSignKeyword_2; }

		//"!=="
		public Keyword getExclamationMarkEqualsSignEqualsSignKeyword_3() { return cExclamationMarkEqualsSignEqualsSignKeyword_3; }
	}

	public class XRelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XRelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXOtherOperatorExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cGroup_1_0_0.eContents().get(0);
		private final Action cXInstanceOfExpressionExpressionAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cInstanceofKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cTypeIDTerminalRuleCall_1_0_1_0 = (RuleCall)cTypeAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_0_0 = (Group)cGroup_1_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_1_0_0_0 = (Action)cGroup_1_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_1_0_0_1 = (Assignment)cGroup_1_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpCompareParserRuleCall_1_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRightOperandXOtherOperatorExpressionParserRuleCall_1_1_1_0 = (RuleCall)cRightOperandAssignment_1_1_1.eContents().get(0);
		
		//XRelationalExpression returns XExpression hidden(SL_COMMENT, WS):
		//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=ID | =>
		//	({XBinaryOperation.leftOperand=current} feature=OpCompare) rightOperand=XOtherOperatorExpression)*;
		public ParserRule getRule() { return rule; }

		//XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=ID | =>
		//({XBinaryOperation.leftOperand=current} feature=OpCompare) rightOperand=XOtherOperatorExpression)*
		public Group getGroup() { return cGroup; }

		//XOtherOperatorExpression
		public RuleCall getXOtherOperatorExpressionParserRuleCall_0() { return cXOtherOperatorExpressionParserRuleCall_0; }

		//(=> ({XInstanceOfExpression.expression=current} "instanceof") type=ID | => ({XBinaryOperation.leftOperand=current}
		//feature=OpCompare) rightOperand=XOtherOperatorExpression)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//=> ({XInstanceOfExpression.expression=current} "instanceof") type=ID
		public Group getGroup_1_0() { return cGroup_1_0; }

		//=> ({XInstanceOfExpression.expression=current} "instanceof")
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XInstanceOfExpression.expression=current} "instanceof"
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }

		//{XInstanceOfExpression.expression=current}
		public Action getXInstanceOfExpressionExpressionAction_1_0_0_0_0() { return cXInstanceOfExpressionExpressionAction_1_0_0_0_0; }

		//"instanceof"
		public Keyword getInstanceofKeyword_1_0_0_0_1() { return cInstanceofKeyword_1_0_0_0_1; }

		//type=ID
		public Assignment getTypeAssignment_1_0_1() { return cTypeAssignment_1_0_1; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_1_0_1_0() { return cTypeIDTerminalRuleCall_1_0_1_0; }

		//=> ({XBinaryOperation.leftOperand=current} feature=OpCompare) rightOperand=XOtherOperatorExpression
		public Group getGroup_1_1() { return cGroup_1_1; }

		//=> ({XBinaryOperation.leftOperand=current} feature=OpCompare)
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//{XBinaryOperation.leftOperand=current} feature=OpCompare
		public Group getGroup_1_1_0_0() { return cGroup_1_1_0_0; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_1_0_0_0; }

		//feature=OpCompare
		public Assignment getFeatureAssignment_1_1_0_0_1() { return cFeatureAssignment_1_1_0_0_1; }

		//OpCompare
		public RuleCall getFeatureOpCompareParserRuleCall_1_1_0_0_1_0() { return cFeatureOpCompareParserRuleCall_1_1_0_0_1_0; }

		//rightOperand=XOtherOperatorExpression
		public Assignment getRightOperandAssignment_1_1_1() { return cRightOperandAssignment_1_1_1; }

		//XOtherOperatorExpression
		public RuleCall getRightOperandXOtherOperatorExpressionParserRuleCall_1_1_1_0() { return cRightOperandXOtherOperatorExpressionParserRuleCall_1_1_1_0; }
	}

	public class OpCompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpCompare");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//OpCompare:
		//	">=" | "<" "=" | ">" | "<";
		public ParserRule getRule() { return rule; }

		//">=" | "<" "=" | ">" | "<"
		public Alternatives getAlternatives() { return cAlternatives; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_0() { return cGreaterThanSignEqualsSignKeyword_0; }

		//"<" "="
		public Group getGroup_1() { return cGroup_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }

		//"<"
		public Keyword getLessThanSignKeyword_3() { return cLessThanSignKeyword_3; }
	}

	public class XOtherOperatorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XOtherOperatorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpOtherParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandXAdditiveExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//XOtherOperatorExpression returns XExpression hidden(SL_COMMENT, WS):
		//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpOther) rightOperand=XAdditiveExpression)*;
		public ParserRule getRule() { return rule; }

		//XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpOther) rightOperand=XAdditiveExpression)*
		public Group getGroup() { return cGroup; }

		//XAdditiveExpression
		public RuleCall getXAdditiveExpressionParserRuleCall_0() { return cXAdditiveExpressionParserRuleCall_0; }

		//(=> ({XBinaryOperation.leftOperand=current} feature=OpOther) rightOperand=XAdditiveExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XBinaryOperation.leftOperand=current} feature=OpOther)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XBinaryOperation.leftOperand=current} feature=OpOther
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=OpOther
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpOther
		public RuleCall getFeatureOpOtherParserRuleCall_1_0_0_1_0() { return cFeatureOpOtherParserRuleCall_1_0_0_1_0; }

		//rightOperand=XAdditiveExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//XAdditiveExpression
		public RuleCall getRightOperandXAdditiveExpressionParserRuleCall_1_1_0() { return cRightOperandXAdditiveExpressionParserRuleCall_1_1_0; }
	}

	public class OpOtherElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpOther");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFullStopFullStopLessThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cFullStopFullStopKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cEqualsSignGreaterThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cGreaterThanSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Alternatives cAlternatives_5_1 = (Alternatives)cGroup_5.eContents().get(1);
		private final Group cGroup_5_1_0 = (Group)cAlternatives_5_1.eContents().get(0);
		private final Group cGroup_5_1_0_0 = (Group)cGroup_5_1_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_5_1_0_0_0 = (Keyword)cGroup_5_1_0_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_5_1_0_0_1 = (Keyword)cGroup_5_1_0_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_5_1_1 = (Keyword)cAlternatives_5_1.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cLessThanSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Alternatives cAlternatives_6_1 = (Alternatives)cGroup_6.eContents().get(1);
		private final Group cGroup_6_1_0 = (Group)cAlternatives_6_1.eContents().get(0);
		private final Group cGroup_6_1_0_0 = (Group)cGroup_6_1_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_6_1_0_0_0 = (Keyword)cGroup_6_1_0_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_6_1_0_0_1 = (Keyword)cGroup_6_1_0_0.eContents().get(1);
		private final Keyword cLessThanSignKeyword_6_1_1 = (Keyword)cAlternatives_6_1.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_6_1_2 = (Keyword)cAlternatives_6_1.eContents().get(2);
		private final Keyword cLessThanSignGreaterThanSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cQuestionMarkColonKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		
		//OpOther:
		//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:";
		public ParserRule getRule() { return rule; }

		//"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_0() { return cHyphenMinusGreaterThanSignKeyword_0; }

		//"..<"
		public Keyword getFullStopFullStopLessThanSignKeyword_1() { return cFullStopFullStopLessThanSignKeyword_1; }

		//">" ".."
		public Group getGroup_2() { return cGroup_2; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_0() { return cGreaterThanSignKeyword_2_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_2_1() { return cFullStopFullStopKeyword_2_1; }

		//".."
		public Keyword getFullStopFullStopKeyword_3() { return cFullStopFullStopKeyword_3; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_4() { return cEqualsSignGreaterThanSignKeyword_4; }

		//">" (=> (">" ">") | ">")
		public Group getGroup_5() { return cGroup_5; }

		//">"
		public Keyword getGreaterThanSignKeyword_5_0() { return cGreaterThanSignKeyword_5_0; }

		//=> (">" ">") | ">"
		public Alternatives getAlternatives_5_1() { return cAlternatives_5_1; }

		//=> (">" ">")
		public Group getGroup_5_1_0() { return cGroup_5_1_0; }

		//">" ">"
		public Group getGroup_5_1_0_0() { return cGroup_5_1_0_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_5_1_0_0_0() { return cGreaterThanSignKeyword_5_1_0_0_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_5_1_0_0_1() { return cGreaterThanSignKeyword_5_1_0_0_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_5_1_1() { return cGreaterThanSignKeyword_5_1_1; }

		//"<" (=> ("<" "<") | "<" | "=>")
		public Group getGroup_6() { return cGroup_6; }

		//"<"
		public Keyword getLessThanSignKeyword_6_0() { return cLessThanSignKeyword_6_0; }

		//=> ("<" "<") | "<" | "=>"
		public Alternatives getAlternatives_6_1() { return cAlternatives_6_1; }

		//=> ("<" "<")
		public Group getGroup_6_1_0() { return cGroup_6_1_0; }

		//"<" "<"
		public Group getGroup_6_1_0_0() { return cGroup_6_1_0_0; }

		//"<"
		public Keyword getLessThanSignKeyword_6_1_0_0_0() { return cLessThanSignKeyword_6_1_0_0_0; }

		//"<"
		public Keyword getLessThanSignKeyword_6_1_0_0_1() { return cLessThanSignKeyword_6_1_0_0_1; }

		//"<"
		public Keyword getLessThanSignKeyword_6_1_1() { return cLessThanSignKeyword_6_1_1; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_6_1_2() { return cEqualsSignGreaterThanSignKeyword_6_1_2; }

		//"<>"
		public Keyword getLessThanSignGreaterThanSignKeyword_7() { return cLessThanSignGreaterThanSignKeyword_7; }

		//"?:"
		public Keyword getQuestionMarkColonKeyword_8() { return cQuestionMarkColonKeyword_8; }
	}

	public class XAdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XAdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpAddParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandXMultiplicativeExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//XAdditiveExpression returns XExpression hidden(SL_COMMENT, WS):
		//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpAdd)
		//	rightOperand=XMultiplicativeExpression)*;
		public ParserRule getRule() { return rule; }

		//XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpAdd)
		//rightOperand=XMultiplicativeExpression)*
		public Group getGroup() { return cGroup; }

		//XMultiplicativeExpression
		public RuleCall getXMultiplicativeExpressionParserRuleCall_0() { return cXMultiplicativeExpressionParserRuleCall_0; }

		//(=> ({XBinaryOperation.leftOperand=current} feature=OpAdd) rightOperand=XMultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XBinaryOperation.leftOperand=current} feature=OpAdd)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XBinaryOperation.leftOperand=current} feature=OpAdd
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=OpAdd
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpAdd
		public RuleCall getFeatureOpAddParserRuleCall_1_0_0_1_0() { return cFeatureOpAddParserRuleCall_1_0_0_1_0; }

		//rightOperand=XMultiplicativeExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//XMultiplicativeExpression
		public RuleCall getRightOperandXMultiplicativeExpressionParserRuleCall_1_1_0() { return cRightOperandXMultiplicativeExpressionParserRuleCall_1_1_0; }
	}

	public class OpAddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpAdd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpAdd:
		//	"+" | "-";
		public ParserRule getRule() { return rule; }

		//"+" | "-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}

	public class XMultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXUnaryOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpMultiParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandXUnaryOperationParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//XMultiplicativeExpression returns XExpression hidden(SL_COMMENT, WS):
		//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=OpMulti) rightOperand=XUnaryOperation)*;
		public ParserRule getRule() { return rule; }

		//XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=OpMulti) rightOperand=XUnaryOperation)*
		public Group getGroup() { return cGroup; }

		//XUnaryOperation
		public RuleCall getXUnaryOperationParserRuleCall_0() { return cXUnaryOperationParserRuleCall_0; }

		//(=> ({XBinaryOperation.leftOperand=current} feature=OpMulti) rightOperand=XUnaryOperation)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XBinaryOperation.leftOperand=current} feature=OpMulti)
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XBinaryOperation.leftOperand=current} feature=OpMulti
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XBinaryOperation.leftOperand=current}
		public Action getXBinaryOperationLeftOperandAction_1_0_0_0() { return cXBinaryOperationLeftOperandAction_1_0_0_0; }

		//feature=OpMulti
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }

		//OpMulti
		public RuleCall getFeatureOpMultiParserRuleCall_1_0_0_1_0() { return cFeatureOpMultiParserRuleCall_1_0_0_1_0; }

		//rightOperand=XUnaryOperation
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }

		//XUnaryOperation
		public RuleCall getRightOperandXUnaryOperationParserRuleCall_1_1_0() { return cRightOperandXUnaryOperationParserRuleCall_1_1_0; }
	}

	public class OpMultiElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpMulti");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSolidusKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cPercentSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//OpMulti:
		//	"*" | "**" | "/" | "%";
		public ParserRule getRule() { return rule; }

		//"*" | "**" | "/" | "%"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }

		//"**"
		public Keyword getAsteriskAsteriskKeyword_1() { return cAsteriskAsteriskKeyword_1; }

		//"/"
		public Keyword getSolidusKeyword_2() { return cSolidusKeyword_2; }

		//"%"
		public Keyword getPercentSignKeyword_3() { return cPercentSignKeyword_3; }
	}

	public class XUnaryOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XUnaryOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cXUnaryOperationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cFeatureAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFeatureOpUnaryParserRuleCall_0_1_0 = (RuleCall)cFeatureAssignment_0_1.eContents().get(0);
		private final Assignment cOperandAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOperandXUnaryOperationParserRuleCall_0_2_0 = (RuleCall)cOperandAssignment_0_2.eContents().get(0);
		private final RuleCall cXCastedExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//XUnaryOperation returns XExpression hidden(SL_COMMENT, WS):
		//	{XUnaryOperation} feature=OpUnary operand=XUnaryOperation | => XCastedExpression;
		public ParserRule getRule() { return rule; }

		//{XUnaryOperation} feature=OpUnary operand=XUnaryOperation | => XCastedExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//{XUnaryOperation} feature=OpUnary operand=XUnaryOperation
		public Group getGroup_0() { return cGroup_0; }

		//{XUnaryOperation}
		public Action getXUnaryOperationAction_0_0() { return cXUnaryOperationAction_0_0; }

		//feature=OpUnary
		public Assignment getFeatureAssignment_0_1() { return cFeatureAssignment_0_1; }

		//OpUnary
		public RuleCall getFeatureOpUnaryParserRuleCall_0_1_0() { return cFeatureOpUnaryParserRuleCall_0_1_0; }

		//operand=XUnaryOperation
		public Assignment getOperandAssignment_0_2() { return cOperandAssignment_0_2; }

		//XUnaryOperation
		public RuleCall getOperandXUnaryOperationParserRuleCall_0_2_0() { return cOperandXUnaryOperationParserRuleCall_0_2_0; }

		//=> XCastedExpression
		public RuleCall getXCastedExpressionParserRuleCall_1() { return cXCastedExpressionParserRuleCall_1; }
	}

	public class OpUnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpUnary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPlusSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//OpUnary:
		//	"!" | "-" | "+";
		public ParserRule getRule() { return rule; }

		//"!" | "-" | "+"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"!"
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//"+"
		public Keyword getPlusSignKeyword_2() { return cPlusSignKeyword_2; }
	}

	public class XCastedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XCastedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXPostfixOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cXCastedExpressionTargetAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeIDTerminalRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		
		//XCastedExpression returns XExpression hidden(SL_COMMENT, WS):
		//	XPostfixOperation (=> ({XCastedExpression.target=current} "as") type=ID)*;
		public ParserRule getRule() { return rule; }

		//XPostfixOperation (=> ({XCastedExpression.target=current} "as") type=ID)*
		public Group getGroup() { return cGroup; }

		//XPostfixOperation
		public RuleCall getXPostfixOperationParserRuleCall_0() { return cXPostfixOperationParserRuleCall_0; }

		//(=> ({XCastedExpression.target=current} "as") type=ID)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ({XCastedExpression.target=current} "as")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XCastedExpression.target=current} "as"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XCastedExpression.target=current}
		public Action getXCastedExpressionTargetAction_1_0_0_0() { return cXCastedExpressionTargetAction_1_0_0_0; }

		//"as"
		public Keyword getAsKeyword_1_0_0_1() { return cAsKeyword_1_0_0_1; }

		//type=ID
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_1_1_0() { return cTypeIDTerminalRuleCall_1_1_0; }
	}

	public class XPostfixOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XPostfixOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXMemberFeatureCallParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cXPostfixOperationOperandAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cFeatureOpPostfixParserRuleCall_1_0_1_0 = (RuleCall)cFeatureAssignment_1_0_1.eContents().get(0);
		
		//XPostfixOperation returns XExpression hidden(SL_COMMENT, WS):
		//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=OpPostfix)?;
		public ParserRule getRule() { return rule; }

		//XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=OpPostfix)?
		public Group getGroup() { return cGroup; }

		//XMemberFeatureCall
		public RuleCall getXMemberFeatureCallParserRuleCall_0() { return cXMemberFeatureCallParserRuleCall_0; }

		//=> ({XPostfixOperation.operand=current} feature=OpPostfix)?
		public Group getGroup_1() { return cGroup_1; }

		//{XPostfixOperation.operand=current} feature=OpPostfix
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{XPostfixOperation.operand=current}
		public Action getXPostfixOperationOperandAction_1_0_0() { return cXPostfixOperationOperandAction_1_0_0; }

		//feature=OpPostfix
		public Assignment getFeatureAssignment_1_0_1() { return cFeatureAssignment_1_0_1; }

		//OpPostfix
		public RuleCall getFeatureOpPostfixParserRuleCall_1_0_1_0() { return cFeatureOpPostfixParserRuleCall_1_0_1_0; }
	}

	public class OpPostfixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpPostfix");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpPostfix hidden(SL_COMMENT, WS):
		//	"++" | "--";
		public ParserRule getRule() { return rule; }

		//"++" | "--"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_0() { return cPlusSignPlusSignKeyword_0; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_1() { return cHyphenMinusHyphenMinusKeyword_1; }
	}

	public class XMemberFeatureCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XMemberFeatureCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cGroup_1_0_0.eContents().get(0);
		private final Action cXAssignmentAssignableAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0_0_1 = (Alternatives)cGroup_1_0_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0_0_0_1_0 = (Keyword)cAlternatives_1_0_0_0_1.eContents().get(0);
		private final Assignment cExplicitStaticAssignment_1_0_0_0_1_1 = (Assignment)cAlternatives_1_0_0_0_1.eContents().get(1);
		private final Keyword cExplicitStaticColonColonKeyword_1_0_0_0_1_1_0 = (Keyword)cExplicitStaticAssignment_1_0_0_0_1_1.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_0_2 = (Assignment)cGroup_1_0_0_0.eContents().get(2);
		private final RuleCall cFeatureIDTerminalRuleCall_1_0_0_0_2_0 = (RuleCall)cFeatureAssignment_1_0_0_0_2.eContents().get(0);
		private final RuleCall cOpSingleAssignParserRuleCall_1_0_0_0_3 = (RuleCall)cGroup_1_0_0_0.eContents().get(3);
		private final Assignment cValueAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cValueXAssignmentParserRuleCall_1_0_1_0 = (RuleCall)cValueAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_0_0 = (Group)cGroup_1_1_0.eContents().get(0);
		private final Action cXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0 = (Action)cGroup_1_1_0_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1_0_0_1 = (Alternatives)cGroup_1_1_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0_0_1_0 = (Keyword)cAlternatives_1_1_0_0_1.eContents().get(0);
		private final Assignment cNullSafeAssignment_1_1_0_0_1_1 = (Assignment)cAlternatives_1_1_0_0_1.eContents().get(1);
		private final Keyword cNullSafeQuestionMarkFullStopKeyword_1_1_0_0_1_1_0 = (Keyword)cNullSafeAssignment_1_1_0_0_1_1.eContents().get(0);
		private final Assignment cExplicitStaticAssignment_1_1_0_0_1_2 = (Assignment)cAlternatives_1_1_0_0_1.eContents().get(2);
		private final Keyword cExplicitStaticColonColonKeyword_1_1_0_0_1_2_0 = (Keyword)cExplicitStaticAssignment_1_1_0_0_1_2.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cTypeArgumentsIDTerminalRuleCall_1_1_1_1_0 = (RuleCall)cTypeArgumentsAssignment_1_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_1_2 = (Group)cGroup_1_1_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_1_1_2_0 = (Keyword)cGroup_1_1_1_2.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_1_1_1_2_1 = (Assignment)cGroup_1_1_1_2.eContents().get(1);
		private final RuleCall cTypeArgumentsIDTerminalRuleCall_1_1_1_2_1_0 = (RuleCall)cTypeArgumentsAssignment_1_1_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_1_1_3 = (Keyword)cGroup_1_1_1.eContents().get(3);
		private final Assignment cFeatureAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cFeatureIDTerminalRuleCall_1_1_2_0 = (RuleCall)cFeatureAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_1_3 = (Group)cGroup_1_1.eContents().get(3);
		private final Assignment cExplicitOperationCallAssignment_1_1_3_0 = (Assignment)cGroup_1_1_3.eContents().get(0);
		private final Keyword cExplicitOperationCallLeftParenthesisKeyword_1_1_3_0_0 = (Keyword)cExplicitOperationCallAssignment_1_1_3_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1_3_1 = (Alternatives)cGroup_1_1_3.eContents().get(1);
		private final Assignment cMemberCallArgumentsAssignment_1_1_3_1_0 = (Assignment)cAlternatives_1_1_3_1.eContents().get(0);
		private final RuleCall cMemberCallArgumentsXShortClosureParserRuleCall_1_1_3_1_0_0 = (RuleCall)cMemberCallArgumentsAssignment_1_1_3_1_0.eContents().get(0);
		private final Group cGroup_1_1_3_1_1 = (Group)cAlternatives_1_1_3_1.eContents().get(1);
		private final Assignment cMemberCallArgumentsAssignment_1_1_3_1_1_0 = (Assignment)cGroup_1_1_3_1_1.eContents().get(0);
		private final RuleCall cMemberCallArgumentsXExpressionParserRuleCall_1_1_3_1_1_0_0 = (RuleCall)cMemberCallArgumentsAssignment_1_1_3_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_3_1_1_1 = (Group)cGroup_1_1_3_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_3_1_1_1_0 = (Keyword)cGroup_1_1_3_1_1_1.eContents().get(0);
		private final Assignment cMemberCallArgumentsAssignment_1_1_3_1_1_1_1 = (Assignment)cGroup_1_1_3_1_1_1.eContents().get(1);
		private final RuleCall cMemberCallArgumentsXExpressionParserRuleCall_1_1_3_1_1_1_1_0 = (RuleCall)cMemberCallArgumentsAssignment_1_1_3_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_3_2 = (Keyword)cGroup_1_1_3.eContents().get(2);
		private final Assignment cMemberCallArgumentsAssignment_1_1_4 = (Assignment)cGroup_1_1.eContents().get(4);
		private final RuleCall cMemberCallArgumentsXClosureParserRuleCall_1_1_4_0 = (RuleCall)cMemberCallArgumentsAssignment_1_1_4.eContents().get(0);
		
		//XMemberFeatureCall returns XExpression hidden(SL_COMMENT, WS):
		//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::") feature=ID OpSingleAssign)
		//	value=XAssignment | => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::"))
		//	("<" typeArguments+=ID ("," typeArguments+=ID)* ">")? feature=ID (=> explicitOperationCall?="("
		//	(memberCallArguments+=XShortClosure | memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")?
		//	memberCallArguments+=XClosure?)*;
		public ParserRule getRule() { return rule; }

		//XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::") feature=ID OpSingleAssign)
		//value=XAssignment | => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::"))
		//("<" typeArguments+=ID ("," typeArguments+=ID)* ">")? feature=ID (=> explicitOperationCall?="("
		//(memberCallArguments+=XShortClosure | memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")?
		//memberCallArguments+=XClosure?)*
		public Group getGroup() { return cGroup; }

		//XPrimaryExpression
		public RuleCall getXPrimaryExpressionParserRuleCall_0() { return cXPrimaryExpressionParserRuleCall_0; }

		//(=> ({XAssignment.assignable=current} ("." | explicitStatic?="::") feature=ID OpSingleAssign) value=XAssignment | =>
		//({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<" typeArguments+=ID
		//("," typeArguments+=ID)* ">")? feature=ID (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
		//memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//=> ({XAssignment.assignable=current} ("." | explicitStatic?="::") feature=ID OpSingleAssign) value=XAssignment
		public Group getGroup_1_0() { return cGroup_1_0; }

		//=> ({XAssignment.assignable=current} ("." | explicitStatic?="::") feature=ID OpSingleAssign)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{XAssignment.assignable=current} ("." | explicitStatic?="::") feature=ID OpSingleAssign
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }

		//{XAssignment.assignable=current}
		public Action getXAssignmentAssignableAction_1_0_0_0_0() { return cXAssignmentAssignableAction_1_0_0_0_0; }

		//"." | explicitStatic?="::"
		public Alternatives getAlternatives_1_0_0_0_1() { return cAlternatives_1_0_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_1_0_0_0_1_0() { return cFullStopKeyword_1_0_0_0_1_0; }

		//explicitStatic?="::"
		public Assignment getExplicitStaticAssignment_1_0_0_0_1_1() { return cExplicitStaticAssignment_1_0_0_0_1_1; }

		//"::"
		public Keyword getExplicitStaticColonColonKeyword_1_0_0_0_1_1_0() { return cExplicitStaticColonColonKeyword_1_0_0_0_1_1_0; }

		//feature=ID
		public Assignment getFeatureAssignment_1_0_0_0_2() { return cFeatureAssignment_1_0_0_0_2; }

		//ID
		public RuleCall getFeatureIDTerminalRuleCall_1_0_0_0_2_0() { return cFeatureIDTerminalRuleCall_1_0_0_0_2_0; }

		//OpSingleAssign
		public RuleCall getOpSingleAssignParserRuleCall_1_0_0_0_3() { return cOpSingleAssignParserRuleCall_1_0_0_0_3; }

		//value=XAssignment
		public Assignment getValueAssignment_1_0_1() { return cValueAssignment_1_0_1; }

		//XAssignment
		public RuleCall getValueXAssignmentParserRuleCall_1_0_1_0() { return cValueXAssignmentParserRuleCall_1_0_1_0; }

		//=> ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<" typeArguments+=ID
		//("," typeArguments+=ID)* ">")? feature=ID (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
		//memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//=> ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::"))
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//{XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")
		public Group getGroup_1_1_0_0() { return cGroup_1_1_0_0; }

		//{XMemberFeatureCall.memberCallTarget=current}
		public Action getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0() { return cXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0; }

		//"." | nullSafe?="?." | explicitStatic?="::"
		public Alternatives getAlternatives_1_1_0_0_1() { return cAlternatives_1_1_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_1_1_0_0_1_0() { return cFullStopKeyword_1_1_0_0_1_0; }

		//nullSafe?="?."
		public Assignment getNullSafeAssignment_1_1_0_0_1_1() { return cNullSafeAssignment_1_1_0_0_1_1; }

		//"?."
		public Keyword getNullSafeQuestionMarkFullStopKeyword_1_1_0_0_1_1_0() { return cNullSafeQuestionMarkFullStopKeyword_1_1_0_0_1_1_0; }

		//explicitStatic?="::"
		public Assignment getExplicitStaticAssignment_1_1_0_0_1_2() { return cExplicitStaticAssignment_1_1_0_0_1_2; }

		//"::"
		public Keyword getExplicitStaticColonColonKeyword_1_1_0_0_1_2_0() { return cExplicitStaticColonColonKeyword_1_1_0_0_1_2_0; }

		//("<" typeArguments+=ID ("," typeArguments+=ID)* ">")?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_1_1_0() { return cLessThanSignKeyword_1_1_1_0; }

		//typeArguments+=ID
		public Assignment getTypeArgumentsAssignment_1_1_1_1() { return cTypeArgumentsAssignment_1_1_1_1; }

		//ID
		public RuleCall getTypeArgumentsIDTerminalRuleCall_1_1_1_1_0() { return cTypeArgumentsIDTerminalRuleCall_1_1_1_1_0; }

		//("," typeArguments+=ID)*
		public Group getGroup_1_1_1_2() { return cGroup_1_1_1_2; }

		//","
		public Keyword getCommaKeyword_1_1_1_2_0() { return cCommaKeyword_1_1_1_2_0; }

		//typeArguments+=ID
		public Assignment getTypeArgumentsAssignment_1_1_1_2_1() { return cTypeArgumentsAssignment_1_1_1_2_1; }

		//ID
		public RuleCall getTypeArgumentsIDTerminalRuleCall_1_1_1_2_1_0() { return cTypeArgumentsIDTerminalRuleCall_1_1_1_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_1_1_3() { return cGreaterThanSignKeyword_1_1_1_3; }

		//feature=ID
		public Assignment getFeatureAssignment_1_1_2() { return cFeatureAssignment_1_1_2; }

		//ID
		public RuleCall getFeatureIDTerminalRuleCall_1_1_2_0() { return cFeatureIDTerminalRuleCall_1_1_2_0; }

		//(=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure | memberCallArguments+=XExpression (","
		//memberCallArguments+=XExpression)*)? ")")?
		public Group getGroup_1_1_3() { return cGroup_1_1_3; }

		//=> explicitOperationCall?="("
		public Assignment getExplicitOperationCallAssignment_1_1_3_0() { return cExplicitOperationCallAssignment_1_1_3_0; }

		//"("
		public Keyword getExplicitOperationCallLeftParenthesisKeyword_1_1_3_0_0() { return cExplicitOperationCallLeftParenthesisKeyword_1_1_3_0_0; }

		//(memberCallArguments+=XShortClosure | memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)?
		public Alternatives getAlternatives_1_1_3_1() { return cAlternatives_1_1_3_1; }

		//memberCallArguments+=XShortClosure
		public Assignment getMemberCallArgumentsAssignment_1_1_3_1_0() { return cMemberCallArgumentsAssignment_1_1_3_1_0; }

		//XShortClosure
		public RuleCall getMemberCallArgumentsXShortClosureParserRuleCall_1_1_3_1_0_0() { return cMemberCallArgumentsXShortClosureParserRuleCall_1_1_3_1_0_0; }

		//memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*
		public Group getGroup_1_1_3_1_1() { return cGroup_1_1_3_1_1; }

		//memberCallArguments+=XExpression
		public Assignment getMemberCallArgumentsAssignment_1_1_3_1_1_0() { return cMemberCallArgumentsAssignment_1_1_3_1_1_0; }

		//XExpression
		public RuleCall getMemberCallArgumentsXExpressionParserRuleCall_1_1_3_1_1_0_0() { return cMemberCallArgumentsXExpressionParserRuleCall_1_1_3_1_1_0_0; }

		//("," memberCallArguments+=XExpression)*
		public Group getGroup_1_1_3_1_1_1() { return cGroup_1_1_3_1_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_3_1_1_1_0() { return cCommaKeyword_1_1_3_1_1_1_0; }

		//memberCallArguments+=XExpression
		public Assignment getMemberCallArgumentsAssignment_1_1_3_1_1_1_1() { return cMemberCallArgumentsAssignment_1_1_3_1_1_1_1; }

		//XExpression
		public RuleCall getMemberCallArgumentsXExpressionParserRuleCall_1_1_3_1_1_1_1_0() { return cMemberCallArgumentsXExpressionParserRuleCall_1_1_3_1_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_3_2() { return cRightParenthesisKeyword_1_1_3_2; }

		//memberCallArguments+=XClosure?
		public Assignment getMemberCallArgumentsAssignment_1_1_4() { return cMemberCallArgumentsAssignment_1_1_4; }

		//XClosure
		public RuleCall getMemberCallArgumentsXClosureParserRuleCall_1_1_4_0() { return cMemberCallArgumentsXClosureParserRuleCall_1_1_4_0; }
	}

	public class XPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXConstructorCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXBlockExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXSwitchExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXSynchronizedExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cXFeatureCallParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cXLiteralParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cXIfExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cXForLoopExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cXBasicForLoopExpressionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cXWhileExpressionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cXDoWhileExpressionParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cXThrowExpressionParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cXReturnExpressionParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cXTryCatchFinallyExpressionParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cXParenthesizedExpressionParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		
		//XPrimaryExpression returns XExpression hidden(SL_COMMENT, WS):
		//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
		//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
		//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
		public ParserRule getRule() { return rule; }

		//XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
		//XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression | XThrowExpression
		//| XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//XConstructorCall
		public RuleCall getXConstructorCallParserRuleCall_0() { return cXConstructorCallParserRuleCall_0; }

		//XBlockExpression
		public RuleCall getXBlockExpressionParserRuleCall_1() { return cXBlockExpressionParserRuleCall_1; }

		//XSwitchExpression
		public RuleCall getXSwitchExpressionParserRuleCall_2() { return cXSwitchExpressionParserRuleCall_2; }

		//XSynchronizedExpression
		public RuleCall getXSynchronizedExpressionParserRuleCall_3() { return cXSynchronizedExpressionParserRuleCall_3; }

		//XFeatureCall
		public RuleCall getXFeatureCallParserRuleCall_4() { return cXFeatureCallParserRuleCall_4; }

		//XLiteral
		public RuleCall getXLiteralParserRuleCall_5() { return cXLiteralParserRuleCall_5; }

		//XIfExpression
		public RuleCall getXIfExpressionParserRuleCall_6() { return cXIfExpressionParserRuleCall_6; }

		//XForLoopExpression
		public RuleCall getXForLoopExpressionParserRuleCall_7() { return cXForLoopExpressionParserRuleCall_7; }

		//XBasicForLoopExpression
		public RuleCall getXBasicForLoopExpressionParserRuleCall_8() { return cXBasicForLoopExpressionParserRuleCall_8; }

		//XWhileExpression
		public RuleCall getXWhileExpressionParserRuleCall_9() { return cXWhileExpressionParserRuleCall_9; }

		//XDoWhileExpression
		public RuleCall getXDoWhileExpressionParserRuleCall_10() { return cXDoWhileExpressionParserRuleCall_10; }

		//XThrowExpression
		public RuleCall getXThrowExpressionParserRuleCall_11() { return cXThrowExpressionParserRuleCall_11; }

		//XReturnExpression
		public RuleCall getXReturnExpressionParserRuleCall_12() { return cXReturnExpressionParserRuleCall_12; }

		//XTryCatchFinallyExpression
		public RuleCall getXTryCatchFinallyExpressionParserRuleCall_13() { return cXTryCatchFinallyExpressionParserRuleCall_13; }

		//XParenthesizedExpression
		public RuleCall getXParenthesizedExpressionParserRuleCall_14() { return cXParenthesizedExpressionParserRuleCall_14; }
	}

	public class XLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXCollectionLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXClosureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXBooleanLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXNumberLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cXNullLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cXStringLiteralParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cXTypeLiteralParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//XLiteral returns XExpression hidden(SL_COMMENT, WS):
		//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
		public ParserRule getRule() { return rule; }

		//XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//XCollectionLiteral
		public RuleCall getXCollectionLiteralParserRuleCall_0() { return cXCollectionLiteralParserRuleCall_0; }

		//XClosure
		public RuleCall getXClosureParserRuleCall_1() { return cXClosureParserRuleCall_1; }

		//XBooleanLiteral
		public RuleCall getXBooleanLiteralParserRuleCall_2() { return cXBooleanLiteralParserRuleCall_2; }

		//XNumberLiteral
		public RuleCall getXNumberLiteralParserRuleCall_3() { return cXNumberLiteralParserRuleCall_3; }

		//XNullLiteral
		public RuleCall getXNullLiteralParserRuleCall_4() { return cXNullLiteralParserRuleCall_4; }

		//XStringLiteral
		public RuleCall getXStringLiteralParserRuleCall_5() { return cXStringLiteralParserRuleCall_5; }

		//XTypeLiteral
		public RuleCall getXTypeLiteralParserRuleCall_6() { return cXTypeLiteralParserRuleCall_6; }
	}

	public class XCollectionLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XCollectionLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXSetLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXListLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//XCollectionLiteral hidden(SL_COMMENT, WS):
		//	XSetLiteral | XListLiteral;
		public ParserRule getRule() { return rule; }

		//XSetLiteral | XListLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//XSetLiteral
		public RuleCall getXSetLiteralParserRuleCall_0() { return cXSetLiteralParserRuleCall_0; }

		//XListLiteral
		public RuleCall getXListLiteralParserRuleCall_1() { return cXListLiteralParserRuleCall_1; }
	}

	public class XSetLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XSetLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXSetLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumberSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cElementsXExpressionParserRuleCall_3_0_0 = (RuleCall)cElementsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cElementsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cElementsXExpressionParserRuleCall_3_1_1_0 = (RuleCall)cElementsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//XSetLiteral hidden(SL_COMMENT, WS):
		//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
		public ParserRule getRule() { return rule; }

		//{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}"
		public Group getGroup() { return cGroup; }

		//{XSetLiteral}
		public Action getXSetLiteralAction_0() { return cXSetLiteralAction_0; }

		//"#"
		public Keyword getNumberSignKeyword_1() { return cNumberSignKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(elements+=XExpression ("," elements+=XExpression)*)?
		public Group getGroup_3() { return cGroup_3; }

		//elements+=XExpression
		public Assignment getElementsAssignment_3_0() { return cElementsAssignment_3_0; }

		//XExpression
		public RuleCall getElementsXExpressionParserRuleCall_3_0_0() { return cElementsXExpressionParserRuleCall_3_0_0; }

		//("," elements+=XExpression)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//elements+=XExpression
		public Assignment getElementsAssignment_3_1_1() { return cElementsAssignment_3_1_1; }

		//XExpression
		public RuleCall getElementsXExpressionParserRuleCall_3_1_1_0() { return cElementsXExpressionParserRuleCall_3_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class XListLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XListLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXListLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNumberSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cElementsXExpressionParserRuleCall_3_0_0 = (RuleCall)cElementsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cElementsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cElementsXExpressionParserRuleCall_3_1_1_0 = (RuleCall)cElementsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//XListLiteral hidden(SL_COMMENT, WS):
		//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
		public ParserRule getRule() { return rule; }

		//{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]"
		public Group getGroup() { return cGroup; }

		//{XListLiteral}
		public Action getXListLiteralAction_0() { return cXListLiteralAction_0; }

		//"#"
		public Keyword getNumberSignKeyword_1() { return cNumberSignKeyword_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//(elements+=XExpression ("," elements+=XExpression)*)?
		public Group getGroup_3() { return cGroup_3; }

		//elements+=XExpression
		public Assignment getElementsAssignment_3_0() { return cElementsAssignment_3_0; }

		//XExpression
		public RuleCall getElementsXExpressionParserRuleCall_3_0_0() { return cElementsXExpressionParserRuleCall_3_0_0; }

		//("," elements+=XExpression)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//elements+=XExpression
		public Assignment getElementsAssignment_3_1_1() { return cElementsAssignment_3_1_1; }

		//XExpression
		public RuleCall getElementsXExpressionParserRuleCall_3_1_1_0() { return cElementsXExpressionParserRuleCall_3_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class XClosureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XClosure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Action cXClosureAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Assignment cDeclaredFormalParametersAssignment_1_0_0_0 = (Assignment)cGroup_1_0_0.eContents().get(0);
		private final RuleCall cDeclaredFormalParametersIDTerminalRuleCall_1_0_0_0_0 = (RuleCall)cDeclaredFormalParametersAssignment_1_0_0_0.eContents().get(0);
		private final Group cGroup_1_0_0_1 = (Group)cGroup_1_0_0.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_0_1_0 = (Keyword)cGroup_1_0_0_1.eContents().get(0);
		private final Assignment cDeclaredFormalParametersAssignment_1_0_0_1_1 = (Assignment)cGroup_1_0_0_1.eContents().get(1);
		private final RuleCall cDeclaredFormalParametersIDTerminalRuleCall_1_0_0_1_1_0 = (RuleCall)cDeclaredFormalParametersAssignment_1_0_0_1_1.eContents().get(0);
		private final Assignment cExplicitSyntaxAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cExplicitSyntaxVerticalLineKeyword_1_0_1_0 = (Keyword)cExplicitSyntaxAssignment_1_0_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionXExpressionInClosureParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//XClosure returns XExpression hidden(SL_COMMENT, WS):
		//	=> ({XClosure} "[") => ((declaredFormalParameters+=ID ("," declaredFormalParameters+=ID)*)? explicitSyntax?="|")?
		//	expression=XExpressionInClosure "]";
		public ParserRule getRule() { return rule; }

		//=> ({XClosure} "[") => ((declaredFormalParameters+=ID ("," declaredFormalParameters+=ID)*)? explicitSyntax?="|")?
		//expression=XExpressionInClosure "]"
		public Group getGroup() { return cGroup; }

		//=> ({XClosure} "[")
		public Group getGroup_0() { return cGroup_0; }

		//{XClosure} "["
		public Group getGroup_0_0() { return cGroup_0_0; }

		//{XClosure}
		public Action getXClosureAction_0_0_0() { return cXClosureAction_0_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_0_1() { return cLeftSquareBracketKeyword_0_0_1; }

		//=> ((declaredFormalParameters+=ID ("," declaredFormalParameters+=ID)*)? explicitSyntax?="|")?
		public Group getGroup_1() { return cGroup_1; }

		//(declaredFormalParameters+=ID ("," declaredFormalParameters+=ID)*)? explicitSyntax?="|"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//(declaredFormalParameters+=ID ("," declaredFormalParameters+=ID)*)?
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//declaredFormalParameters+=ID
		public Assignment getDeclaredFormalParametersAssignment_1_0_0_0() { return cDeclaredFormalParametersAssignment_1_0_0_0; }

		//ID
		public RuleCall getDeclaredFormalParametersIDTerminalRuleCall_1_0_0_0_0() { return cDeclaredFormalParametersIDTerminalRuleCall_1_0_0_0_0; }

		//("," declaredFormalParameters+=ID)*
		public Group getGroup_1_0_0_1() { return cGroup_1_0_0_1; }

		//","
		public Keyword getCommaKeyword_1_0_0_1_0() { return cCommaKeyword_1_0_0_1_0; }

		//declaredFormalParameters+=ID
		public Assignment getDeclaredFormalParametersAssignment_1_0_0_1_1() { return cDeclaredFormalParametersAssignment_1_0_0_1_1; }

		//ID
		public RuleCall getDeclaredFormalParametersIDTerminalRuleCall_1_0_0_1_1_0() { return cDeclaredFormalParametersIDTerminalRuleCall_1_0_0_1_1_0; }

		//explicitSyntax?="|"
		public Assignment getExplicitSyntaxAssignment_1_0_1() { return cExplicitSyntaxAssignment_1_0_1; }

		//"|"
		public Keyword getExplicitSyntaxVerticalLineKeyword_1_0_1_0() { return cExplicitSyntaxVerticalLineKeyword_1_0_1_0; }

		//expression=XExpressionInClosure
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//XExpressionInClosure
		public RuleCall getExpressionXExpressionInClosureParserRuleCall_2_0() { return cExpressionXExpressionInClosureParserRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class XExpressionInClosureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XExpressionInClosure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXBlockExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cExpressionsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionsXExpressionOrVarDeclarationParserRuleCall_1_0_0 = (RuleCall)cExpressionsAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//XExpressionInClosure returns XExpression hidden(SL_COMMENT, WS):
		//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ";"?)*;
		public ParserRule getRule() { return rule; }

		//{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ";"?)*
		public Group getGroup() { return cGroup; }

		//{XBlockExpression}
		public Action getXBlockExpressionAction_0() { return cXBlockExpressionAction_0; }

		//(expressions+=XExpressionOrVarDeclaration ";"?)*
		public Group getGroup_1() { return cGroup_1; }

		//expressions+=XExpressionOrVarDeclaration
		public Assignment getExpressionsAssignment_1_0() { return cExpressionsAssignment_1_0; }

		//XExpressionOrVarDeclaration
		public RuleCall getExpressionsXExpressionOrVarDeclarationParserRuleCall_1_0_0() { return cExpressionsXExpressionOrVarDeclarationParserRuleCall_1_0_0; }

		//";"?
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}

	public class XShortClosureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XShortClosure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Action cXClosureAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Group cGroup_0_0_1 = (Group)cGroup_0_0.eContents().get(1);
		private final Assignment cDeclaredFormalParametersAssignment_0_0_1_0 = (Assignment)cGroup_0_0_1.eContents().get(0);
		private final RuleCall cDeclaredFormalParametersIDTerminalRuleCall_0_0_1_0_0 = (RuleCall)cDeclaredFormalParametersAssignment_0_0_1_0.eContents().get(0);
		private final Group cGroup_0_0_1_1 = (Group)cGroup_0_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_0_0_1_1_0 = (Keyword)cGroup_0_0_1_1.eContents().get(0);
		private final Assignment cDeclaredFormalParametersAssignment_0_0_1_1_1 = (Assignment)cGroup_0_0_1_1.eContents().get(1);
		private final RuleCall cDeclaredFormalParametersIDTerminalRuleCall_0_0_1_1_1_0 = (RuleCall)cDeclaredFormalParametersAssignment_0_0_1_1_1.eContents().get(0);
		private final Assignment cExplicitSyntaxAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final Keyword cExplicitSyntaxVerticalLineKeyword_0_0_2_0 = (Keyword)cExplicitSyntaxAssignment_0_0_2.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionXExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//XShortClosure returns XExpression hidden(SL_COMMENT, WS):
		//	=> ({XClosure} (declaredFormalParameters+=ID ("," declaredFormalParameters+=ID)*)? explicitSyntax?="|")
		//	expression=XExpression;
		public ParserRule getRule() { return rule; }

		//=> ({XClosure} (declaredFormalParameters+=ID ("," declaredFormalParameters+=ID)*)? explicitSyntax?="|")
		//expression=XExpression
		public Group getGroup() { return cGroup; }

		//=> ({XClosure} (declaredFormalParameters+=ID ("," declaredFormalParameters+=ID)*)? explicitSyntax?="|")
		public Group getGroup_0() { return cGroup_0; }

		//{XClosure} (declaredFormalParameters+=ID ("," declaredFormalParameters+=ID)*)? explicitSyntax?="|"
		public Group getGroup_0_0() { return cGroup_0_0; }

		//{XClosure}
		public Action getXClosureAction_0_0_0() { return cXClosureAction_0_0_0; }

		//(declaredFormalParameters+=ID ("," declaredFormalParameters+=ID)*)?
		public Group getGroup_0_0_1() { return cGroup_0_0_1; }

		//declaredFormalParameters+=ID
		public Assignment getDeclaredFormalParametersAssignment_0_0_1_0() { return cDeclaredFormalParametersAssignment_0_0_1_0; }

		//ID
		public RuleCall getDeclaredFormalParametersIDTerminalRuleCall_0_0_1_0_0() { return cDeclaredFormalParametersIDTerminalRuleCall_0_0_1_0_0; }

		//("," declaredFormalParameters+=ID)*
		public Group getGroup_0_0_1_1() { return cGroup_0_0_1_1; }

		//","
		public Keyword getCommaKeyword_0_0_1_1_0() { return cCommaKeyword_0_0_1_1_0; }

		//declaredFormalParameters+=ID
		public Assignment getDeclaredFormalParametersAssignment_0_0_1_1_1() { return cDeclaredFormalParametersAssignment_0_0_1_1_1; }

		//ID
		public RuleCall getDeclaredFormalParametersIDTerminalRuleCall_0_0_1_1_1_0() { return cDeclaredFormalParametersIDTerminalRuleCall_0_0_1_1_1_0; }

		//explicitSyntax?="|"
		public Assignment getExplicitSyntaxAssignment_0_0_2() { return cExplicitSyntaxAssignment_0_0_2; }

		//"|"
		public Keyword getExplicitSyntaxVerticalLineKeyword_0_0_2_0() { return cExplicitSyntaxVerticalLineKeyword_0_0_2_0; }

		//expression=XExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_1_0() { return cExpressionXExpressionParserRuleCall_1_0; }
	}

	public class XParenthesizedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XParenthesizedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cXExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//XParenthesizedExpression returns XExpression hidden(SL_COMMENT, WS):
		//	"(" XExpression ")";
		public ParserRule getRule() { return rule; }

		//"(" XExpression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//XExpression
		public RuleCall getXExpressionParserRuleCall_1() { return cXExpressionParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class XIfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XIfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXIfExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIfAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIfXExpressionParserRuleCall_3_0 = (RuleCall)cIfAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cThenAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cThenXExpressionParserRuleCall_5_0 = (RuleCall)cThenAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cElseKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cElseAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cElseXExpressionParserRuleCall_6_1_0 = (RuleCall)cElseAssignment_6_1.eContents().get(0);
		
		//XIfExpression returns XExpression hidden(SL_COMMENT, WS):
		//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
		public ParserRule getRule() { return rule; }

		//{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?
		public Group getGroup() { return cGroup; }

		//{XIfExpression}
		public Action getXIfExpressionAction_0() { return cXIfExpressionAction_0; }

		//"if"
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//if=XExpression
		public Assignment getIfAssignment_3() { return cIfAssignment_3; }

		//XExpression
		public RuleCall getIfXExpressionParserRuleCall_3_0() { return cIfXExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//then=XExpression
		public Assignment getThenAssignment_5() { return cThenAssignment_5; }

		//XExpression
		public RuleCall getThenXExpressionParserRuleCall_5_0() { return cThenXExpressionParserRuleCall_5_0; }

		//(=> "else" else=XExpression)?
		public Group getGroup_6() { return cGroup_6; }

		//=> "else"
		public Keyword getElseKeyword_6_0() { return cElseKeyword_6_0; }

		//else=XExpression
		public Assignment getElseAssignment_6_1() { return cElseAssignment_6_1; }

		//XExpression
		public RuleCall getElseXExpressionParserRuleCall_6_1_0() { return cElseXExpressionParserRuleCall_6_1_0; }
	}

	public class XSwitchExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XSwitchExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXSwitchExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSwitchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_0_0 = (Group)cGroup_2_0.eContents().get(0);
		private final Group cGroup_2_0_0_0 = (Group)cGroup_2_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_0_0_0_0 = (Keyword)cGroup_2_0_0_0.eContents().get(0);
		private final Assignment cDeclaredParamAssignment_2_0_0_0_1 = (Assignment)cGroup_2_0_0_0.eContents().get(1);
		private final RuleCall cDeclaredParamIDTerminalRuleCall_2_0_0_0_1_0 = (RuleCall)cDeclaredParamAssignment_2_0_0_0_1.eContents().get(0);
		private final Keyword cColonKeyword_2_0_0_0_2 = (Keyword)cGroup_2_0_0_0.eContents().get(2);
		private final Assignment cSwitchAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cSwitchXExpressionParserRuleCall_2_0_1_0 = (RuleCall)cSwitchAssignment_2_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cGroup_2_1.eContents().get(0);
		private final Group cGroup_2_1_0_0 = (Group)cGroup_2_1_0.eContents().get(0);
		private final Assignment cDeclaredParamAssignment_2_1_0_0_0 = (Assignment)cGroup_2_1_0_0.eContents().get(0);
		private final RuleCall cDeclaredParamIDTerminalRuleCall_2_1_0_0_0_0 = (RuleCall)cDeclaredParamAssignment_2_1_0_0_0.eContents().get(0);
		private final Keyword cColonKeyword_2_1_0_0_1 = (Keyword)cGroup_2_1_0_0.eContents().get(1);
		private final Assignment cSwitchAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cSwitchXExpressionParserRuleCall_2_1_1_0 = (RuleCall)cSwitchAssignment_2_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCasesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCasesXCasePartParserRuleCall_4_0 = (RuleCall)cCasesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cDefaultKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cDefaultAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cDefaultXExpressionParserRuleCall_5_2_0 = (RuleCall)cDefaultAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//XSwitchExpression returns XExpression hidden(SL_COMMENT, WS):
		//	{XSwitchExpression} "switch" (=> ("(" declaredParam=ID ":") switch=XExpression ")" | => (declaredParam=ID ":")?
		//	switch=XExpression) "{" cases+=XCasePart* ("default" ":" default=XExpression)? "}";
		public ParserRule getRule() { return rule; }

		//{XSwitchExpression} "switch" (=> ("(" declaredParam=ID ":") switch=XExpression ")" | => (declaredParam=ID ":")?
		//switch=XExpression) "{" cases+=XCasePart* ("default" ":" default=XExpression)? "}"
		public Group getGroup() { return cGroup; }

		//{XSwitchExpression}
		public Action getXSwitchExpressionAction_0() { return cXSwitchExpressionAction_0; }

		//"switch"
		public Keyword getSwitchKeyword_1() { return cSwitchKeyword_1; }

		//=> ("(" declaredParam=ID ":") switch=XExpression ")" | => (declaredParam=ID ":")? switch=XExpression
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//=> ("(" declaredParam=ID ":") switch=XExpression ")"
		public Group getGroup_2_0() { return cGroup_2_0; }

		//=> ("(" declaredParam=ID ":")
		public Group getGroup_2_0_0() { return cGroup_2_0_0; }

		//"(" declaredParam=ID ":"
		public Group getGroup_2_0_0_0() { return cGroup_2_0_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0_0_0_0() { return cLeftParenthesisKeyword_2_0_0_0_0; }

		//declaredParam=ID
		public Assignment getDeclaredParamAssignment_2_0_0_0_1() { return cDeclaredParamAssignment_2_0_0_0_1; }

		//ID
		public RuleCall getDeclaredParamIDTerminalRuleCall_2_0_0_0_1_0() { return cDeclaredParamIDTerminalRuleCall_2_0_0_0_1_0; }

		//":"
		public Keyword getColonKeyword_2_0_0_0_2() { return cColonKeyword_2_0_0_0_2; }

		//switch=XExpression
		public Assignment getSwitchAssignment_2_0_1() { return cSwitchAssignment_2_0_1; }

		//XExpression
		public RuleCall getSwitchXExpressionParserRuleCall_2_0_1_0() { return cSwitchXExpressionParserRuleCall_2_0_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_0_2() { return cRightParenthesisKeyword_2_0_2; }

		//=> (declaredParam=ID ":")? switch=XExpression
		public Group getGroup_2_1() { return cGroup_2_1; }

		//=> (declaredParam=ID ":")?
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }

		//declaredParam=ID ":"
		public Group getGroup_2_1_0_0() { return cGroup_2_1_0_0; }

		//declaredParam=ID
		public Assignment getDeclaredParamAssignment_2_1_0_0_0() { return cDeclaredParamAssignment_2_1_0_0_0; }

		//ID
		public RuleCall getDeclaredParamIDTerminalRuleCall_2_1_0_0_0_0() { return cDeclaredParamIDTerminalRuleCall_2_1_0_0_0_0; }

		//":"
		public Keyword getColonKeyword_2_1_0_0_1() { return cColonKeyword_2_1_0_0_1; }

		//switch=XExpression
		public Assignment getSwitchAssignment_2_1_1() { return cSwitchAssignment_2_1_1; }

		//XExpression
		public RuleCall getSwitchXExpressionParserRuleCall_2_1_1_0() { return cSwitchXExpressionParserRuleCall_2_1_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//cases+=XCasePart*
		public Assignment getCasesAssignment_4() { return cCasesAssignment_4; }

		//XCasePart
		public RuleCall getCasesXCasePartParserRuleCall_4_0() { return cCasesXCasePartParserRuleCall_4_0; }

		//("default" ":" default=XExpression)?
		public Group getGroup_5() { return cGroup_5; }

		//"default"
		public Keyword getDefaultKeyword_5_0() { return cDefaultKeyword_5_0; }

		//":"
		public Keyword getColonKeyword_5_1() { return cColonKeyword_5_1; }

		//default=XExpression
		public Assignment getDefaultAssignment_5_2() { return cDefaultAssignment_5_2; }

		//XExpression
		public RuleCall getDefaultXExpressionParserRuleCall_5_2_0() { return cDefaultXExpressionParserRuleCall_5_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class XCasePartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XCasePart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXCasePartAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeGuardAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeGuardIDTerminalRuleCall_1_0 = (RuleCall)cTypeGuardAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCaseKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCaseAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCaseXExpressionParserRuleCall_2_1_0 = (RuleCall)cCaseAssignment_2_1.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cColonKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cThenAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cThenXExpressionParserRuleCall_3_0_1_0 = (RuleCall)cThenAssignment_3_0_1.eContents().get(0);
		private final Assignment cFallThroughAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final Keyword cFallThroughCommaKeyword_3_1_0 = (Keyword)cFallThroughAssignment_3_1.eContents().get(0);
		
		//XCasePart hidden(SL_COMMENT, WS):
		//	{XCasePart} typeGuard=ID? ("case" case=XExpression)? (":" then=XExpression | fallThrough?=",");
		public ParserRule getRule() { return rule; }

		//{XCasePart} typeGuard=ID? ("case" case=XExpression)? (":" then=XExpression | fallThrough?=",")
		public Group getGroup() { return cGroup; }

		//{XCasePart}
		public Action getXCasePartAction_0() { return cXCasePartAction_0; }

		//typeGuard=ID?
		public Assignment getTypeGuardAssignment_1() { return cTypeGuardAssignment_1; }

		//ID
		public RuleCall getTypeGuardIDTerminalRuleCall_1_0() { return cTypeGuardIDTerminalRuleCall_1_0; }

		//("case" case=XExpression)?
		public Group getGroup_2() { return cGroup_2; }

		//"case"
		public Keyword getCaseKeyword_2_0() { return cCaseKeyword_2_0; }

		//case=XExpression
		public Assignment getCaseAssignment_2_1() { return cCaseAssignment_2_1; }

		//XExpression
		public RuleCall getCaseXExpressionParserRuleCall_2_1_0() { return cCaseXExpressionParserRuleCall_2_1_0; }

		//":" then=XExpression | fallThrough?=","
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//":" then=XExpression
		public Group getGroup_3_0() { return cGroup_3_0; }

		//":"
		public Keyword getColonKeyword_3_0_0() { return cColonKeyword_3_0_0; }

		//then=XExpression
		public Assignment getThenAssignment_3_0_1() { return cThenAssignment_3_0_1; }

		//XExpression
		public RuleCall getThenXExpressionParserRuleCall_3_0_1_0() { return cThenXExpressionParserRuleCall_3_0_1_0; }

		//fallThrough?=","
		public Assignment getFallThroughAssignment_3_1() { return cFallThroughAssignment_3_1; }

		//","
		public Keyword getFallThroughCommaKeyword_3_1_0() { return cFallThroughCommaKeyword_3_1_0; }
	}

	public class XForLoopExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XForLoopExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Action cXForLoopExpressionAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Keyword cForKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Assignment cDeclaredParamAssignment_0_0_3 = (Assignment)cGroup_0_0.eContents().get(3);
		private final RuleCall cDeclaredParamIDTerminalRuleCall_0_0_3_0 = (RuleCall)cDeclaredParamAssignment_0_0_3.eContents().get(0);
		private final Keyword cColonKeyword_0_0_4 = (Keyword)cGroup_0_0.eContents().get(4);
		private final Assignment cForExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cForExpressionXExpressionParserRuleCall_1_0 = (RuleCall)cForExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEachExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEachExpressionXExpressionParserRuleCall_3_0 = (RuleCall)cEachExpressionAssignment_3.eContents().get(0);
		
		//XForLoopExpression returns XExpression hidden(SL_COMMENT, WS):
		//	=> ({XForLoopExpression} "for" "(" declaredParam=ID ":") forExpression=XExpression ")" eachExpression=XExpression;
		public ParserRule getRule() { return rule; }

		//=> ({XForLoopExpression} "for" "(" declaredParam=ID ":") forExpression=XExpression ")" eachExpression=XExpression
		public Group getGroup() { return cGroup; }

		//=> ({XForLoopExpression} "for" "(" declaredParam=ID ":")
		public Group getGroup_0() { return cGroup_0; }

		//{XForLoopExpression} "for" "(" declaredParam=ID ":"
		public Group getGroup_0_0() { return cGroup_0_0; }

		//{XForLoopExpression}
		public Action getXForLoopExpressionAction_0_0_0() { return cXForLoopExpressionAction_0_0_0; }

		//"for"
		public Keyword getForKeyword_0_0_1() { return cForKeyword_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0_2() { return cLeftParenthesisKeyword_0_0_2; }

		//declaredParam=ID
		public Assignment getDeclaredParamAssignment_0_0_3() { return cDeclaredParamAssignment_0_0_3; }

		//ID
		public RuleCall getDeclaredParamIDTerminalRuleCall_0_0_3_0() { return cDeclaredParamIDTerminalRuleCall_0_0_3_0; }

		//":"
		public Keyword getColonKeyword_0_0_4() { return cColonKeyword_0_0_4; }

		//forExpression=XExpression
		public Assignment getForExpressionAssignment_1() { return cForExpressionAssignment_1; }

		//XExpression
		public RuleCall getForExpressionXExpressionParserRuleCall_1_0() { return cForExpressionXExpressionParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//eachExpression=XExpression
		public Assignment getEachExpressionAssignment_3() { return cEachExpressionAssignment_3; }

		//XExpression
		public RuleCall getEachExpressionXExpressionParserRuleCall_3_0() { return cEachExpressionXExpressionParserRuleCall_3_0; }
	}

	public class XBasicForLoopExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XBasicForLoopExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXBasicForLoopExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cInitExpressionsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cInitExpressionsXExpressionOrVarDeclarationParserRuleCall_3_0_0 = (RuleCall)cInitExpressionsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cInitExpressionsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cInitExpressionsXExpressionOrVarDeclarationParserRuleCall_3_1_1_0 = (RuleCall)cInitExpressionsAssignment_3_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpressionXExpressionParserRuleCall_5_0 = (RuleCall)cExpressionAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cUpdateExpressionsAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cUpdateExpressionsXExpressionParserRuleCall_7_0_0 = (RuleCall)cUpdateExpressionsAssignment_7_0.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Keyword cCommaKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cUpdateExpressionsAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cUpdateExpressionsXExpressionParserRuleCall_7_1_1_0 = (RuleCall)cUpdateExpressionsAssignment_7_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cEachExpressionAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cEachExpressionXExpressionParserRuleCall_9_0 = (RuleCall)cEachExpressionAssignment_9.eContents().get(0);
		
		//XBasicForLoopExpression returns XExpression hidden(SL_COMMENT, WS):
		//	{XBasicForLoopExpression} "for" "(" (initExpressions+=XExpressionOrVarDeclaration (","
		//	initExpressions+=XExpressionOrVarDeclaration)*)? ";" expression=XExpression? ";" (updateExpressions+=XExpression (","
		//	updateExpressions+=XExpression)*)? ")" eachExpression=XExpression;
		public ParserRule getRule() { return rule; }

		//{XBasicForLoopExpression} "for" "(" (initExpressions+=XExpressionOrVarDeclaration (","
		//initExpressions+=XExpressionOrVarDeclaration)*)? ";" expression=XExpression? ";" (updateExpressions+=XExpression (","
		//updateExpressions+=XExpression)*)? ")" eachExpression=XExpression
		public Group getGroup() { return cGroup; }

		//{XBasicForLoopExpression}
		public Action getXBasicForLoopExpressionAction_0() { return cXBasicForLoopExpressionAction_0; }

		//"for"
		public Keyword getForKeyword_1() { return cForKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(initExpressions+=XExpressionOrVarDeclaration ("," initExpressions+=XExpressionOrVarDeclaration)*)?
		public Group getGroup_3() { return cGroup_3; }

		//initExpressions+=XExpressionOrVarDeclaration
		public Assignment getInitExpressionsAssignment_3_0() { return cInitExpressionsAssignment_3_0; }

		//XExpressionOrVarDeclaration
		public RuleCall getInitExpressionsXExpressionOrVarDeclarationParserRuleCall_3_0_0() { return cInitExpressionsXExpressionOrVarDeclarationParserRuleCall_3_0_0; }

		//("," initExpressions+=XExpressionOrVarDeclaration)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//initExpressions+=XExpressionOrVarDeclaration
		public Assignment getInitExpressionsAssignment_3_1_1() { return cInitExpressionsAssignment_3_1_1; }

		//XExpressionOrVarDeclaration
		public RuleCall getInitExpressionsXExpressionOrVarDeclarationParserRuleCall_3_1_1_0() { return cInitExpressionsXExpressionOrVarDeclarationParserRuleCall_3_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }

		//expression=XExpression?
		public Assignment getExpressionAssignment_5() { return cExpressionAssignment_5; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_5_0() { return cExpressionXExpressionParserRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }

		//(updateExpressions+=XExpression ("," updateExpressions+=XExpression)*)?
		public Group getGroup_7() { return cGroup_7; }

		//updateExpressions+=XExpression
		public Assignment getUpdateExpressionsAssignment_7_0() { return cUpdateExpressionsAssignment_7_0; }

		//XExpression
		public RuleCall getUpdateExpressionsXExpressionParserRuleCall_7_0_0() { return cUpdateExpressionsXExpressionParserRuleCall_7_0_0; }

		//("," updateExpressions+=XExpression)*
		public Group getGroup_7_1() { return cGroup_7_1; }

		//","
		public Keyword getCommaKeyword_7_1_0() { return cCommaKeyword_7_1_0; }

		//updateExpressions+=XExpression
		public Assignment getUpdateExpressionsAssignment_7_1_1() { return cUpdateExpressionsAssignment_7_1_1; }

		//XExpression
		public RuleCall getUpdateExpressionsXExpressionParserRuleCall_7_1_1_0() { return cUpdateExpressionsXExpressionParserRuleCall_7_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }

		//eachExpression=XExpression
		public Assignment getEachExpressionAssignment_9() { return cEachExpressionAssignment_9; }

		//XExpression
		public RuleCall getEachExpressionXExpressionParserRuleCall_9_0() { return cEachExpressionXExpressionParserRuleCall_9_0; }
	}

	public class XWhileExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XWhileExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXWhileExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhileKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPredicateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPredicateXExpressionParserRuleCall_3_0 = (RuleCall)cPredicateAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBodyXExpressionParserRuleCall_5_0 = (RuleCall)cBodyAssignment_5.eContents().get(0);
		
		//XWhileExpression returns XExpression hidden(SL_COMMENT, WS):
		//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
		public ParserRule getRule() { return rule; }

		//{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression
		public Group getGroup() { return cGroup; }

		//{XWhileExpression}
		public Action getXWhileExpressionAction_0() { return cXWhileExpressionAction_0; }

		//"while"
		public Keyword getWhileKeyword_1() { return cWhileKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//predicate=XExpression
		public Assignment getPredicateAssignment_3() { return cPredicateAssignment_3; }

		//XExpression
		public RuleCall getPredicateXExpressionParserRuleCall_3_0() { return cPredicateXExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//body=XExpression
		public Assignment getBodyAssignment_5() { return cBodyAssignment_5; }

		//XExpression
		public RuleCall getBodyXExpressionParserRuleCall_5_0() { return cBodyXExpressionParserRuleCall_5_0; }
	}

	public class XDoWhileExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XDoWhileExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXDoWhileExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyXExpressionParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		private final Keyword cWhileKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPredicateAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPredicateXExpressionParserRuleCall_5_0 = (RuleCall)cPredicateAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//XDoWhileExpression returns XExpression hidden(SL_COMMENT, WS):
		//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
		public ParserRule getRule() { return rule; }

		//{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")"
		public Group getGroup() { return cGroup; }

		//{XDoWhileExpression}
		public Action getXDoWhileExpressionAction_0() { return cXDoWhileExpressionAction_0; }

		//"do"
		public Keyword getDoKeyword_1() { return cDoKeyword_1; }

		//body=XExpression
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//XExpression
		public RuleCall getBodyXExpressionParserRuleCall_2_0() { return cBodyXExpressionParserRuleCall_2_0; }

		//"while"
		public Keyword getWhileKeyword_3() { return cWhileKeyword_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//predicate=XExpression
		public Assignment getPredicateAssignment_5() { return cPredicateAssignment_5; }

		//XExpression
		public RuleCall getPredicateXExpressionParserRuleCall_5_0() { return cPredicateXExpressionParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class XBlockExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XBlockExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXBlockExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExpressionsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionsXExpressionOrVarDeclarationParserRuleCall_2_0_0 = (RuleCall)cExpressionsAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//XBlockExpression returns XExpression hidden(SL_COMMENT, WS):
		//	{XBlockExpression} "{" (expressions+=XExpressionOrVarDeclaration ";"?)* "}";
		public ParserRule getRule() { return rule; }

		//{XBlockExpression} "{" (expressions+=XExpressionOrVarDeclaration ";"?)* "}"
		public Group getGroup() { return cGroup; }

		//{XBlockExpression}
		public Action getXBlockExpressionAction_0() { return cXBlockExpressionAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(expressions+=XExpressionOrVarDeclaration ";"?)*
		public Group getGroup_2() { return cGroup_2; }

		//expressions+=XExpressionOrVarDeclaration
		public Assignment getExpressionsAssignment_2_0() { return cExpressionsAssignment_2_0; }

		//XExpressionOrVarDeclaration
		public RuleCall getExpressionsXExpressionOrVarDeclarationParserRuleCall_2_0_0() { return cExpressionsXExpressionOrVarDeclarationParserRuleCall_2_0_0; }

		//";"?
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class XExpressionOrVarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XExpressionOrVarDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//XExpressionOrVarDeclaration returns XExpression hidden(SL_COMMENT, WS):
		//	XVariableDeclaration | XExpression;
		public ParserRule getRule() { return rule; }

		//XVariableDeclaration | XExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//XVariableDeclaration
		public RuleCall getXVariableDeclarationParserRuleCall_0() { return cXVariableDeclarationParserRuleCall_0; }

		//XExpression
		public RuleCall getXExpressionParserRuleCall_1() { return cXExpressionParserRuleCall_1; }
	}

	public class XVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXVariableDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cWriteableAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cWriteableVarKeyword_1_0_0 = (Keyword)cWriteableAssignment_1_0.eContents().get(0);
		private final Keyword cValKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_0_0 = (Group)cGroup_2_0.eContents().get(0);
		private final Assignment cTypeAssignment_2_0_0_0 = (Assignment)cGroup_2_0_0.eContents().get(0);
		private final RuleCall cTypeIDTerminalRuleCall_2_0_0_0_0 = (RuleCall)cTypeAssignment_2_0_0_0.eContents().get(0);
		private final Assignment cNameAssignment_2_0_0_1 = (Assignment)cGroup_2_0_0.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_2_0_0_1_0 = (RuleCall)cNameAssignment_2_0_0_1.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRightAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRightXExpressionParserRuleCall_3_1_0 = (RuleCall)cRightAssignment_3_1.eContents().get(0);
		
		//XVariableDeclaration returns XExpression hidden(SL_COMMENT, WS):
		//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=ID name=ValidID) | name=ValidID) ("=" right=XExpression)?;
		public ParserRule getRule() { return rule; }

		//{XVariableDeclaration} (writeable?="var" | "val") (=> (type=ID name=ValidID) | name=ValidID) ("=" right=XExpression)?
		public Group getGroup() { return cGroup; }

		//{XVariableDeclaration}
		public Action getXVariableDeclarationAction_0() { return cXVariableDeclarationAction_0; }

		//writeable?="var" | "val"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//writeable?="var"
		public Assignment getWriteableAssignment_1_0() { return cWriteableAssignment_1_0; }

		//"var"
		public Keyword getWriteableVarKeyword_1_0_0() { return cWriteableVarKeyword_1_0_0; }

		//"val"
		public Keyword getValKeyword_1_1() { return cValKeyword_1_1; }

		//=> (type=ID name=ValidID) | name=ValidID
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//=> (type=ID name=ValidID)
		public Group getGroup_2_0() { return cGroup_2_0; }

		//type=ID name=ValidID
		public Group getGroup_2_0_0() { return cGroup_2_0_0; }

		//type=ID
		public Assignment getTypeAssignment_2_0_0_0() { return cTypeAssignment_2_0_0_0; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_2_0_0_0_0() { return cTypeIDTerminalRuleCall_2_0_0_0_0; }

		//name=ValidID
		public Assignment getNameAssignment_2_0_0_1() { return cNameAssignment_2_0_0_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0_0_1_0() { return cNameValidIDParserRuleCall_2_0_0_1_0; }

		//name=ValidID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_1_0() { return cNameValidIDParserRuleCall_2_1_0; }

		//("=" right=XExpression)?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//right=XExpression
		public Assignment getRightAssignment_3_1() { return cRightAssignment_3_1; }

		//XExpression
		public RuleCall getRightXExpressionParserRuleCall_3_1_0() { return cRightXExpressionParserRuleCall_3_1_0; }
	}

	public class XFeatureCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XFeatureCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXFeatureCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeArgumentsIDTerminalRuleCall_1_1_0 = (RuleCall)cTypeArgumentsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cTypeArgumentsIDTerminalRuleCall_1_2_1_0 = (RuleCall)cTypeArgumentsAssignment_1_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cFeatureAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFeatureIDTerminalRuleCall_2_0 = (RuleCall)cFeatureAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cExplicitOperationCallAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cExplicitOperationCallLeftParenthesisKeyword_3_0_0 = (Keyword)cExplicitOperationCallAssignment_3_0.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Assignment cFeatureCallArgumentsAssignment_3_1_0 = (Assignment)cAlternatives_3_1.eContents().get(0);
		private final RuleCall cFeatureCallArgumentsXShortClosureParserRuleCall_3_1_0_0 = (RuleCall)cFeatureCallArgumentsAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cAlternatives_3_1.eContents().get(1);
		private final Assignment cFeatureCallArgumentsAssignment_3_1_1_0 = (Assignment)cGroup_3_1_1.eContents().get(0);
		private final RuleCall cFeatureCallArgumentsXExpressionParserRuleCall_3_1_1_0_0 = (RuleCall)cFeatureCallArgumentsAssignment_3_1_1_0.eContents().get(0);
		private final Group cGroup_3_1_1_1 = (Group)cGroup_3_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_1_1_0 = (Keyword)cGroup_3_1_1_1.eContents().get(0);
		private final Assignment cFeatureCallArgumentsAssignment_3_1_1_1_1 = (Assignment)cGroup_3_1_1_1.eContents().get(1);
		private final RuleCall cFeatureCallArgumentsXExpressionParserRuleCall_3_1_1_1_1_0 = (RuleCall)cFeatureCallArgumentsAssignment_3_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cFeatureCallArgumentsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeatureCallArgumentsXClosureParserRuleCall_4_0 = (RuleCall)cFeatureCallArgumentsAssignment_4.eContents().get(0);
		
		/// *ID returns types::jvmFormalParameter:
		//	(parameterType=JvmTypeReference)? name=ValidID;
		//	
		//FullID returns types::jvmFormalParameter:
		//	parameterType=JvmTypeReference name=ValidID;* / XFeatureCall returns XExpression hidden(SL_COMMENT, WS):
		//	{XFeatureCall} ("<" typeArguments+=ID ("," typeArguments+=ID)* ">")? feature=ID (=> explicitOperationCall?="("
		//	(featureCallArguments+=XShortClosure | featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)?
		//	")")? featureCallArguments+=XClosure?;
		public ParserRule getRule() { return rule; }

		//{XFeatureCall} ("<" typeArguments+=ID ("," typeArguments+=ID)* ">")? feature=ID (=> explicitOperationCall?="("
		//(featureCallArguments+=XShortClosure | featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)?
		//")")? featureCallArguments+=XClosure?
		public Group getGroup() { return cGroup; }

		//{XFeatureCall}
		public Action getXFeatureCallAction_0() { return cXFeatureCallAction_0; }

		//("<" typeArguments+=ID ("," typeArguments+=ID)* ">")?
		public Group getGroup_1() { return cGroup_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }

		//typeArguments+=ID
		public Assignment getTypeArgumentsAssignment_1_1() { return cTypeArgumentsAssignment_1_1; }

		//ID
		public RuleCall getTypeArgumentsIDTerminalRuleCall_1_1_0() { return cTypeArgumentsIDTerminalRuleCall_1_1_0; }

		//("," typeArguments+=ID)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//typeArguments+=ID
		public Assignment getTypeArgumentsAssignment_1_2_1() { return cTypeArgumentsAssignment_1_2_1; }

		//ID
		public RuleCall getTypeArgumentsIDTerminalRuleCall_1_2_1_0() { return cTypeArgumentsIDTerminalRuleCall_1_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_3() { return cGreaterThanSignKeyword_1_3; }

		//feature=ID
		public Assignment getFeatureAssignment_2() { return cFeatureAssignment_2; }

		//ID
		public RuleCall getFeatureIDTerminalRuleCall_2_0() { return cFeatureIDTerminalRuleCall_2_0; }

		//(=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure | featureCallArguments+=XExpression (","
		//featureCallArguments+=XExpression)*)? ")")?
		public Group getGroup_3() { return cGroup_3; }

		//=> explicitOperationCall?="("
		public Assignment getExplicitOperationCallAssignment_3_0() { return cExplicitOperationCallAssignment_3_0; }

		//"("
		public Keyword getExplicitOperationCallLeftParenthesisKeyword_3_0_0() { return cExplicitOperationCallLeftParenthesisKeyword_3_0_0; }

		//(featureCallArguments+=XShortClosure | featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)?
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//featureCallArguments+=XShortClosure
		public Assignment getFeatureCallArgumentsAssignment_3_1_0() { return cFeatureCallArgumentsAssignment_3_1_0; }

		//XShortClosure
		public RuleCall getFeatureCallArgumentsXShortClosureParserRuleCall_3_1_0_0() { return cFeatureCallArgumentsXShortClosureParserRuleCall_3_1_0_0; }

		//featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }

		//featureCallArguments+=XExpression
		public Assignment getFeatureCallArgumentsAssignment_3_1_1_0() { return cFeatureCallArgumentsAssignment_3_1_1_0; }

		//XExpression
		public RuleCall getFeatureCallArgumentsXExpressionParserRuleCall_3_1_1_0_0() { return cFeatureCallArgumentsXExpressionParserRuleCall_3_1_1_0_0; }

		//("," featureCallArguments+=XExpression)*
		public Group getGroup_3_1_1_1() { return cGroup_3_1_1_1; }

		//","
		public Keyword getCommaKeyword_3_1_1_1_0() { return cCommaKeyword_3_1_1_1_0; }

		//featureCallArguments+=XExpression
		public Assignment getFeatureCallArgumentsAssignment_3_1_1_1_1() { return cFeatureCallArgumentsAssignment_3_1_1_1_1; }

		//XExpression
		public RuleCall getFeatureCallArgumentsXExpressionParserRuleCall_3_1_1_1_1_0() { return cFeatureCallArgumentsXExpressionParserRuleCall_3_1_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }

		//featureCallArguments+=XClosure?
		public Assignment getFeatureCallArgumentsAssignment_4() { return cFeatureCallArgumentsAssignment_4; }

		//XClosure
		public RuleCall getFeatureCallArgumentsXClosureParserRuleCall_4_0() { return cFeatureCallArgumentsXClosureParserRuleCall_4_0; }
	}

	public class FeatureCallIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FeatureCallID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValidIDParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cExtendsKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cStaticKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cImportKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cExtensionKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//FeatureCallID:
		//	ValidID | "extends" | "static" | "import" | "extension";
		public ParserRule getRule() { return rule; }

		//ValidID | "extends" | "static" | "import" | "extension"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_0() { return cValidIDParserRuleCall_0; }

		//"extends"
		public Keyword getExtendsKeyword_1() { return cExtendsKeyword_1; }

		//"static"
		public Keyword getStaticKeyword_2() { return cStaticKeyword_2; }

		//"import"
		public Keyword getImportKeyword_3() { return cImportKeyword_3; }

		//"extension"
		public Keyword getExtensionKeyword_4() { return cExtensionKeyword_4; }
	}

	public class IdOrSuperElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IdOrSuper");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFeatureCallIDParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cSuperKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//IdOrSuper:
		//	FeatureCallID | "super";
		public ParserRule getRule() { return rule; }

		//FeatureCallID | "super"
		public Alternatives getAlternatives() { return cAlternatives; }

		//FeatureCallID
		public RuleCall getFeatureCallIDParserRuleCall_0() { return cFeatureCallIDParserRuleCall_0; }

		//"super"
		public Keyword getSuperKeyword_1() { return cSuperKeyword_1; }
	}

	public class XConstructorCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XConstructorCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXConstructorCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNewKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConstructorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstructorIDTerminalRuleCall_2_0 = (RuleCall)cConstructorAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLessThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTypeArgumentsIDTerminalRuleCall_3_1_0 = (RuleCall)cTypeArgumentsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cTypeArgumentsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cTypeArgumentsIDTerminalRuleCall_3_2_1_0 = (RuleCall)cTypeArgumentsAssignment_3_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cExplicitConstructorCallAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cExplicitConstructorCallLeftParenthesisKeyword_4_0_0 = (Keyword)cExplicitConstructorCallAssignment_4_0.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Assignment cArgumentsAssignment_4_1_0 = (Assignment)cAlternatives_4_1.eContents().get(0);
		private final RuleCall cArgumentsXShortClosureParserRuleCall_4_1_0_0 = (RuleCall)cArgumentsAssignment_4_1_0.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cAlternatives_4_1.eContents().get(1);
		private final Assignment cArgumentsAssignment_4_1_1_0 = (Assignment)cGroup_4_1_1.eContents().get(0);
		private final RuleCall cArgumentsXExpressionParserRuleCall_4_1_1_0_0 = (RuleCall)cArgumentsAssignment_4_1_1_0.eContents().get(0);
		private final Group cGroup_4_1_1_1 = (Group)cGroup_4_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_1_1_0 = (Keyword)cGroup_4_1_1_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_4_1_1_1_1 = (Assignment)cGroup_4_1_1_1.eContents().get(1);
		private final RuleCall cArgumentsXExpressionParserRuleCall_4_1_1_1_1_0 = (RuleCall)cArgumentsAssignment_4_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cArgumentsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cArgumentsXClosureParserRuleCall_5_0 = (RuleCall)cArgumentsAssignment_5.eContents().get(0);
		
		//XConstructorCall returns XExpression hidden(SL_COMMENT, WS):
		//	{XConstructorCall} "new" constructor=ID ("<" typeArguments+=ID ("," typeArguments+=ID)* ">")? (=>
		//	explicitConstructorCall?="(" (arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")?
		//	arguments+=XClosure?;
		public ParserRule getRule() { return rule; }

		//{XConstructorCall} "new" constructor=ID ("<" typeArguments+=ID ("," typeArguments+=ID)* ">")? (=>
		//explicitConstructorCall?="(" (arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")?
		//arguments+=XClosure?
		public Group getGroup() { return cGroup; }

		//{XConstructorCall}
		public Action getXConstructorCallAction_0() { return cXConstructorCallAction_0; }

		//"new"
		public Keyword getNewKeyword_1() { return cNewKeyword_1; }

		//constructor=ID
		public Assignment getConstructorAssignment_2() { return cConstructorAssignment_2; }

		//ID
		public RuleCall getConstructorIDTerminalRuleCall_2_0() { return cConstructorIDTerminalRuleCall_2_0; }

		//(=> "<" typeArguments+=ID ("," typeArguments+=ID)* ">")?
		public Group getGroup_3() { return cGroup_3; }

		//=> "<"
		public Keyword getLessThanSignKeyword_3_0() { return cLessThanSignKeyword_3_0; }

		//typeArguments+=ID
		public Assignment getTypeArgumentsAssignment_3_1() { return cTypeArgumentsAssignment_3_1; }

		//ID
		public RuleCall getTypeArgumentsIDTerminalRuleCall_3_1_0() { return cTypeArgumentsIDTerminalRuleCall_3_1_0; }

		//("," typeArguments+=ID)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//typeArguments+=ID
		public Assignment getTypeArgumentsAssignment_3_2_1() { return cTypeArgumentsAssignment_3_2_1; }

		//ID
		public RuleCall getTypeArgumentsIDTerminalRuleCall_3_2_1_0() { return cTypeArgumentsIDTerminalRuleCall_3_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3_3() { return cGreaterThanSignKeyword_3_3; }

		//(=> explicitConstructorCall?="(" (arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)?
		//")")?
		public Group getGroup_4() { return cGroup_4; }

		//=> explicitConstructorCall?="("
		public Assignment getExplicitConstructorCallAssignment_4_0() { return cExplicitConstructorCallAssignment_4_0; }

		//"("
		public Keyword getExplicitConstructorCallLeftParenthesisKeyword_4_0_0() { return cExplicitConstructorCallLeftParenthesisKeyword_4_0_0; }

		//(arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)?
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }

		//arguments+=XShortClosure
		public Assignment getArgumentsAssignment_4_1_0() { return cArgumentsAssignment_4_1_0; }

		//XShortClosure
		public RuleCall getArgumentsXShortClosureParserRuleCall_4_1_0_0() { return cArgumentsXShortClosureParserRuleCall_4_1_0_0; }

		//arguments+=XExpression ("," arguments+=XExpression)*
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }

		//arguments+=XExpression
		public Assignment getArgumentsAssignment_4_1_1_0() { return cArgumentsAssignment_4_1_1_0; }

		//XExpression
		public RuleCall getArgumentsXExpressionParserRuleCall_4_1_1_0_0() { return cArgumentsXExpressionParserRuleCall_4_1_1_0_0; }

		//("," arguments+=XExpression)*
		public Group getGroup_4_1_1_1() { return cGroup_4_1_1_1; }

		//","
		public Keyword getCommaKeyword_4_1_1_1_0() { return cCommaKeyword_4_1_1_1_0; }

		//arguments+=XExpression
		public Assignment getArgumentsAssignment_4_1_1_1_1() { return cArgumentsAssignment_4_1_1_1_1; }

		//XExpression
		public RuleCall getArgumentsXExpressionParserRuleCall_4_1_1_1_1_0() { return cArgumentsXExpressionParserRuleCall_4_1_1_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_2() { return cRightParenthesisKeyword_4_2; }

		//arguments+=XClosure?
		public Assignment getArgumentsAssignment_5() { return cArgumentsAssignment_5; }

		//XClosure
		public RuleCall getArgumentsXClosureParserRuleCall_5_0() { return cArgumentsXClosureParserRuleCall_5_0; }
	}

	public class XBooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XBooleanLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXBooleanLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cFalseKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Assignment cIsTrueAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cIsTrueTrueKeyword_1_1_0 = (Keyword)cIsTrueAssignment_1_1.eContents().get(0);
		
		//XBooleanLiteral returns XExpression hidden(SL_COMMENT, WS):
		//	{XBooleanLiteral} ("false" | isTrue?="true");
		public ParserRule getRule() { return rule; }

		//{XBooleanLiteral} ("false" | isTrue?="true")
		public Group getGroup() { return cGroup; }

		//{XBooleanLiteral}
		public Action getXBooleanLiteralAction_0() { return cXBooleanLiteralAction_0; }

		//"false" | isTrue?="true"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"false"
		public Keyword getFalseKeyword_1_0() { return cFalseKeyword_1_0; }

		//isTrue?="true"
		public Assignment getIsTrueAssignment_1_1() { return cIsTrueAssignment_1_1; }

		//"true"
		public Keyword getIsTrueTrueKeyword_1_1_0() { return cIsTrueTrueKeyword_1_1_0; }
	}

	public class XNullLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XNullLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXNullLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//XNullLiteral returns XExpression hidden(SL_COMMENT, WS):
		//	{XNullLiteral} "null";
		public ParserRule getRule() { return rule; }

		//{XNullLiteral} "null"
		public Group getGroup() { return cGroup; }

		//{XNullLiteral}
		public Action getXNullLiteralAction_0() { return cXNullLiteralAction_0; }

		//"null"
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}

	public class XNumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XNumberLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXNumberLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueNumberParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//XNumberLiteral returns XExpression hidden(SL_COMMENT, WS):
		//	{XNumberLiteral} value=Number;
		public ParserRule getRule() { return rule; }

		//{XNumberLiteral} value=Number
		public Group getGroup() { return cGroup; }

		//{XNumberLiteral}
		public Action getXNumberLiteralAction_0() { return cXNumberLiteralAction_0; }

		//value=Number
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Number
		public RuleCall getValueNumberParserRuleCall_1_0() { return cValueNumberParserRuleCall_1_0; }
	}

	public class XStringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XStringLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXStringLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//XStringLiteral returns XExpression hidden(SL_COMMENT, WS):
		//	{XStringLiteral} value=STRING;
		public ParserRule getRule() { return rule; }

		//{XStringLiteral} value=STRING
		public Group getGroup() { return cGroup; }

		//{XStringLiteral}
		public Action getXStringLiteralAction_0() { return cXStringLiteralAction_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}

	public class XTypeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XTypeLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXTypeLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTypeofKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeIDTerminalRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cArrayDimensionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cArrayDimensionsArrayBracketsParserRuleCall_4_0 = (RuleCall)cArrayDimensionsAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//XTypeLiteral returns XExpression hidden(SL_COMMENT, WS):
		//	{XTypeLiteral} "typeof" "(" type=ID arrayDimensions+=ArrayBrackets* ")";
		public ParserRule getRule() { return rule; }

		//{XTypeLiteral} "typeof" "(" type=ID arrayDimensions+=ArrayBrackets* ")"
		public Group getGroup() { return cGroup; }

		//{XTypeLiteral}
		public Action getXTypeLiteralAction_0() { return cXTypeLiteralAction_0; }

		//"typeof"
		public Keyword getTypeofKeyword_1() { return cTypeofKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//type=ID
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_3_0() { return cTypeIDTerminalRuleCall_3_0; }

		//arrayDimensions+=ArrayBrackets*
		public Assignment getArrayDimensionsAssignment_4() { return cArrayDimensionsAssignment_4; }

		//ArrayBrackets
		public RuleCall getArrayDimensionsArrayBracketsParserRuleCall_4_0() { return cArrayDimensionsArrayBracketsParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class XThrowExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XThrowExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXThrowExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cThrowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionXExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//XThrowExpression returns XExpression hidden(SL_COMMENT, WS):
		//	{XThrowExpression} "throw" expression=XExpression;
		public ParserRule getRule() { return rule; }

		//{XThrowExpression} "throw" expression=XExpression
		public Group getGroup() { return cGroup; }

		//{XThrowExpression}
		public Action getXThrowExpressionAction_0() { return cXThrowExpressionAction_0; }

		//"throw"
		public Keyword getThrowKeyword_1() { return cThrowKeyword_1; }

		//expression=XExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_2_0() { return cExpressionXExpressionParserRuleCall_2_0; }
	}

	public class XReturnExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XReturnExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXReturnExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionXExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//XReturnExpression returns XExpression hidden(SL_COMMENT, WS):
		//	{XReturnExpression} "return" -> expression=XExpression?;
		public ParserRule getRule() { return rule; }

		//{XReturnExpression} "return" -> expression=XExpression?
		public Group getGroup() { return cGroup; }

		//{XReturnExpression}
		public Action getXReturnExpressionAction_0() { return cXReturnExpressionAction_0; }

		//"return"
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }

		//-> expression=XExpression?
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_2_0() { return cExpressionXExpressionParserRuleCall_2_0; }
	}

	public class XTryCatchFinallyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XTryCatchFinallyExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXTryCatchFinallyExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionXExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cCatchClausesAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cCatchClausesXCatchClauseParserRuleCall_3_0_0_0 = (RuleCall)cCatchClausesAssignment_3_0_0.eContents().get(0);
		private final Group cGroup_3_0_1 = (Group)cGroup_3_0.eContents().get(1);
		private final Keyword cFinallyKeyword_3_0_1_0 = (Keyword)cGroup_3_0_1.eContents().get(0);
		private final Assignment cFinallyExpressionAssignment_3_0_1_1 = (Assignment)cGroup_3_0_1.eContents().get(1);
		private final RuleCall cFinallyExpressionXExpressionParserRuleCall_3_0_1_1_0 = (RuleCall)cFinallyExpressionAssignment_3_0_1_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cFinallyKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cFinallyExpressionAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cFinallyExpressionXExpressionParserRuleCall_3_1_1_0 = (RuleCall)cFinallyExpressionAssignment_3_1_1.eContents().get(0);
		
		//XTryCatchFinallyExpression returns XExpression hidden(SL_COMMENT, WS):
		//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
		//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
		public ParserRule getRule() { return rule; }

		//{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
		//finallyExpression=XExpression)? | "finally" finallyExpression=XExpression)
		public Group getGroup() { return cGroup; }

		//{XTryCatchFinallyExpression}
		public Action getXTryCatchFinallyExpressionAction_0() { return cXTryCatchFinallyExpressionAction_0; }

		//"try"
		public Keyword getTryKeyword_1() { return cTryKeyword_1; }

		//expression=XExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_2_0() { return cExpressionXExpressionParserRuleCall_2_0; }

		//catchClauses+=XCatchClause+ ("finally" finallyExpression=XExpression)? | "finally" finallyExpression=XExpression
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//catchClauses+=XCatchClause+ ("finally" finallyExpression=XExpression)?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//catchClauses+=XCatchClause+
		public Assignment getCatchClausesAssignment_3_0_0() { return cCatchClausesAssignment_3_0_0; }

		//XCatchClause
		public RuleCall getCatchClausesXCatchClauseParserRuleCall_3_0_0_0() { return cCatchClausesXCatchClauseParserRuleCall_3_0_0_0; }

		//(=> "finally" finallyExpression=XExpression)?
		public Group getGroup_3_0_1() { return cGroup_3_0_1; }

		//=> "finally"
		public Keyword getFinallyKeyword_3_0_1_0() { return cFinallyKeyword_3_0_1_0; }

		//finallyExpression=XExpression
		public Assignment getFinallyExpressionAssignment_3_0_1_1() { return cFinallyExpressionAssignment_3_0_1_1; }

		//XExpression
		public RuleCall getFinallyExpressionXExpressionParserRuleCall_3_0_1_1_0() { return cFinallyExpressionXExpressionParserRuleCall_3_0_1_1_0; }

		//"finally" finallyExpression=XExpression
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"finally"
		public Keyword getFinallyKeyword_3_1_0() { return cFinallyKeyword_3_1_0; }

		//finallyExpression=XExpression
		public Assignment getFinallyExpressionAssignment_3_1_1() { return cFinallyExpressionAssignment_3_1_1; }

		//XExpression
		public RuleCall getFinallyExpressionXExpressionParserRuleCall_3_1_1_0() { return cFinallyExpressionXExpressionParserRuleCall_3_1_1_0; }
	}

	public class XSynchronizedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XSynchronizedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Action cXSynchronizedExpressionAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Keyword cSynchronizedKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Assignment cParamAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParamXExpressionParserRuleCall_1_0 = (RuleCall)cParamAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionXExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//XSynchronizedExpression returns XExpression hidden(SL_COMMENT, WS):
		//	=> ({XSynchronizedExpression} "synchronized" "(") param=XExpression ")" expression=XExpression;
		public ParserRule getRule() { return rule; }

		//=> ({XSynchronizedExpression} "synchronized" "(") param=XExpression ")" expression=XExpression
		public Group getGroup() { return cGroup; }

		//=> ({XSynchronizedExpression} "synchronized" "(")
		public Group getGroup_0() { return cGroup_0; }

		//{XSynchronizedExpression} "synchronized" "("
		public Group getGroup_0_0() { return cGroup_0_0; }

		//{XSynchronizedExpression}
		public Action getXSynchronizedExpressionAction_0_0_0() { return cXSynchronizedExpressionAction_0_0_0; }

		//"synchronized"
		public Keyword getSynchronizedKeyword_0_0_1() { return cSynchronizedKeyword_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0_2() { return cLeftParenthesisKeyword_0_0_2; }

		//param=XExpression
		public Assignment getParamAssignment_1() { return cParamAssignment_1; }

		//XExpression
		public RuleCall getParamXExpressionParserRuleCall_1_0() { return cParamXExpressionParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//expression=XExpression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_3_0() { return cExpressionXExpressionParserRuleCall_3_0; }
	}

	public class XCatchClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XCatchClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCatchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDeclaredParamAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclaredParamIDTerminalRuleCall_2_0 = (RuleCall)cDeclaredParamAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionXExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		
		//XCatchClause hidden(SL_COMMENT, WS):
		//	"catch" "(" declaredParam=ID ")" expression=XExpression;
		public ParserRule getRule() { return rule; }

		//=> "catch" "(" declaredParam=ID ")" expression=XExpression
		public Group getGroup() { return cGroup; }

		//=> "catch"
		public Keyword getCatchKeyword_0() { return cCatchKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//declaredParam=ID
		public Assignment getDeclaredParamAssignment_2() { return cDeclaredParamAssignment_2; }

		//ID
		public RuleCall getDeclaredParamIDTerminalRuleCall_2_0() { return cDeclaredParamIDTerminalRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//expression=XExpression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_4_0() { return cExpressionXExpressionParserRuleCall_4_0; }
	}

	public class ArrayBracketsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayBrackets");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ArrayBrackets hidden(SL_COMMENT, WS):
		//	"[" ID "]";
		public ParserRule getRule() { return rule; }

		//"[" ID "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValidIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cValidIDParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName hidden(SL_COMMENT, WS):
		//	ValidID ("." ValidID)*;
		public ParserRule getRule() { return rule; }

		//ValidID ("." ValidID)*
		public Group getGroup() { return cGroup; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_0() { return cValidIDParserRuleCall_0; }

		//(=> "." ValidID)*
		public Group getGroup_1() { return cGroup_1; }

		//=> "."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_1_1() { return cValidIDParserRuleCall_1_1; }
	}

	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Number");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHEXTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cDECIMALTerminalRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_1_1_0 = (RuleCall)cAlternatives_1_1_1.eContents().get(0);
		private final RuleCall cDECIMALTerminalRuleCall_1_1_1_1 = (RuleCall)cAlternatives_1_1_1.eContents().get(1);
		
		//Number hidden(SL_COMMENT, WS):
		//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
		public ParserRule getRule() { return rule; }

		//HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?
		public Alternatives getAlternatives() { return cAlternatives; }

		//HEX
		public RuleCall getHEXTerminalRuleCall_0() { return cHEXTerminalRuleCall_0; }

		//(INT | DECIMAL) ("." (INT | DECIMAL))?
		public Group getGroup_1() { return cGroup_1; }

		//INT | DECIMAL
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_0_0() { return cINTTerminalRuleCall_1_0_0; }

		//DECIMAL
		public RuleCall getDECIMALTerminalRuleCall_1_0_1() { return cDECIMALTerminalRuleCall_1_0_1; }

		//("." (INT | DECIMAL))?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"."
		public Keyword getFullStopKeyword_1_1_0() { return cFullStopKeyword_1_1_0; }

		//INT | DECIMAL
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1_1_0() { return cINTTerminalRuleCall_1_1_1_0; }

		//DECIMAL
		public RuleCall getDECIMALTerminalRuleCall_1_1_1_1() { return cDECIMALTerminalRuleCall_1_1_1_1; }
	}

	public class ValidIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValidID");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ValidID hidden(SL_COMMENT, WS):
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class StaticQualifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StaticQualifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValidIDParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		/// **
		// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
		// * which makes downstream grammars break on classloading, when a rule is removed.
		// * / StaticQualifier hidden(SL_COMMENT, WS):
		//	(ValidID "::")+;
		public ParserRule getRule() { return rule; }

		//(ValidID "::")+
		public Group getGroup() { return cGroup; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_0() { return cValidIDParserRuleCall_0; }

		//"::"
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }
	}
	
	
	private final ModelElements pModel;
	private final MemberElements pMember;
	private final ParameterElements pParameter;
	private final XExpressionElements pXExpression;
	private final XAssignmentElements pXAssignment;
	private final OpSingleAssignElements pOpSingleAssign;
	private final OpMultiAssignElements pOpMultiAssign;
	private final XOrExpressionElements pXOrExpression;
	private final OpOrElements pOpOr;
	private final XAndExpressionElements pXAndExpression;
	private final OpAndElements pOpAnd;
	private final XEqualityExpressionElements pXEqualityExpression;
	private final OpEqualityElements pOpEquality;
	private final XRelationalExpressionElements pXRelationalExpression;
	private final OpCompareElements pOpCompare;
	private final XOtherOperatorExpressionElements pXOtherOperatorExpression;
	private final OpOtherElements pOpOther;
	private final XAdditiveExpressionElements pXAdditiveExpression;
	private final OpAddElements pOpAdd;
	private final XMultiplicativeExpressionElements pXMultiplicativeExpression;
	private final OpMultiElements pOpMulti;
	private final XUnaryOperationElements pXUnaryOperation;
	private final OpUnaryElements pOpUnary;
	private final XCastedExpressionElements pXCastedExpression;
	private final XPostfixOperationElements pXPostfixOperation;
	private final OpPostfixElements pOpPostfix;
	private final XMemberFeatureCallElements pXMemberFeatureCall;
	private final XPrimaryExpressionElements pXPrimaryExpression;
	private final XLiteralElements pXLiteral;
	private final XCollectionLiteralElements pXCollectionLiteral;
	private final XSetLiteralElements pXSetLiteral;
	private final XListLiteralElements pXListLiteral;
	private final XClosureElements pXClosure;
	private final XExpressionInClosureElements pXExpressionInClosure;
	private final XShortClosureElements pXShortClosure;
	private final XParenthesizedExpressionElements pXParenthesizedExpression;
	private final XIfExpressionElements pXIfExpression;
	private final XSwitchExpressionElements pXSwitchExpression;
	private final XCasePartElements pXCasePart;
	private final XForLoopExpressionElements pXForLoopExpression;
	private final XBasicForLoopExpressionElements pXBasicForLoopExpression;
	private final XWhileExpressionElements pXWhileExpression;
	private final XDoWhileExpressionElements pXDoWhileExpression;
	private final XBlockExpressionElements pXBlockExpression;
	private final XExpressionOrVarDeclarationElements pXExpressionOrVarDeclaration;
	private final XVariableDeclarationElements pXVariableDeclaration;
	private final XFeatureCallElements pXFeatureCall;
	private final FeatureCallIDElements pFeatureCallID;
	private final IdOrSuperElements pIdOrSuper;
	private final XConstructorCallElements pXConstructorCall;
	private final XBooleanLiteralElements pXBooleanLiteral;
	private final XNullLiteralElements pXNullLiteral;
	private final XNumberLiteralElements pXNumberLiteral;
	private final XStringLiteralElements pXStringLiteral;
	private final XTypeLiteralElements pXTypeLiteral;
	private final XThrowExpressionElements pXThrowExpression;
	private final XReturnExpressionElements pXReturnExpression;
	private final XTryCatchFinallyExpressionElements pXTryCatchFinallyExpression;
	private final XSynchronizedExpressionElements pXSynchronizedExpression;
	private final XCatchClauseElements pXCatchClause;
	private final ArrayBracketsElements pArrayBrackets;
	private final QualifiedNameElements pQualifiedName;
	private final NumberElements pNumber;
	private final ValidIDElements pValidID;
	private final TerminalRule tSTRING;
	private final StaticQualifierElements pStaticQualifier;
	private final TerminalRule tID;
	private final TerminalRule tHEX;
	private final TerminalRule tINT;
	private final TerminalRule tDECIMAL;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public TutorialGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pModel = new ModelElements();
		this.pMember = new MemberElements();
		this.pParameter = new ParameterElements();
		this.pXExpression = new XExpressionElements();
		this.pXAssignment = new XAssignmentElements();
		this.pOpSingleAssign = new OpSingleAssignElements();
		this.pOpMultiAssign = new OpMultiAssignElements();
		this.pXOrExpression = new XOrExpressionElements();
		this.pOpOr = new OpOrElements();
		this.pXAndExpression = new XAndExpressionElements();
		this.pOpAnd = new OpAndElements();
		this.pXEqualityExpression = new XEqualityExpressionElements();
		this.pOpEquality = new OpEqualityElements();
		this.pXRelationalExpression = new XRelationalExpressionElements();
		this.pOpCompare = new OpCompareElements();
		this.pXOtherOperatorExpression = new XOtherOperatorExpressionElements();
		this.pOpOther = new OpOtherElements();
		this.pXAdditiveExpression = new XAdditiveExpressionElements();
		this.pOpAdd = new OpAddElements();
		this.pXMultiplicativeExpression = new XMultiplicativeExpressionElements();
		this.pOpMulti = new OpMultiElements();
		this.pXUnaryOperation = new XUnaryOperationElements();
		this.pOpUnary = new OpUnaryElements();
		this.pXCastedExpression = new XCastedExpressionElements();
		this.pXPostfixOperation = new XPostfixOperationElements();
		this.pOpPostfix = new OpPostfixElements();
		this.pXMemberFeatureCall = new XMemberFeatureCallElements();
		this.pXPrimaryExpression = new XPrimaryExpressionElements();
		this.pXLiteral = new XLiteralElements();
		this.pXCollectionLiteral = new XCollectionLiteralElements();
		this.pXSetLiteral = new XSetLiteralElements();
		this.pXListLiteral = new XListLiteralElements();
		this.pXClosure = new XClosureElements();
		this.pXExpressionInClosure = new XExpressionInClosureElements();
		this.pXShortClosure = new XShortClosureElements();
		this.pXParenthesizedExpression = new XParenthesizedExpressionElements();
		this.pXIfExpression = new XIfExpressionElements();
		this.pXSwitchExpression = new XSwitchExpressionElements();
		this.pXCasePart = new XCasePartElements();
		this.pXForLoopExpression = new XForLoopExpressionElements();
		this.pXBasicForLoopExpression = new XBasicForLoopExpressionElements();
		this.pXWhileExpression = new XWhileExpressionElements();
		this.pXDoWhileExpression = new XDoWhileExpressionElements();
		this.pXBlockExpression = new XBlockExpressionElements();
		this.pXExpressionOrVarDeclaration = new XExpressionOrVarDeclarationElements();
		this.pXVariableDeclaration = new XVariableDeclarationElements();
		this.pXFeatureCall = new XFeatureCallElements();
		this.pFeatureCallID = new FeatureCallIDElements();
		this.pIdOrSuper = new IdOrSuperElements();
		this.pXConstructorCall = new XConstructorCallElements();
		this.pXBooleanLiteral = new XBooleanLiteralElements();
		this.pXNullLiteral = new XNullLiteralElements();
		this.pXNumberLiteral = new XNumberLiteralElements();
		this.pXStringLiteral = new XStringLiteralElements();
		this.pXTypeLiteral = new XTypeLiteralElements();
		this.pXThrowExpression = new XThrowExpressionElements();
		this.pXReturnExpression = new XReturnExpressionElements();
		this.pXTryCatchFinallyExpression = new XTryCatchFinallyExpressionElements();
		this.pXSynchronizedExpression = new XSynchronizedExpressionElements();
		this.pXCatchClause = new XCatchClauseElements();
		this.pArrayBrackets = new ArrayBracketsElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pNumber = new NumberElements();
		this.pValidID = new ValidIDElements();
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING");
		this.pStaticQualifier = new StaticQualifierElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID");
		this.tHEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT");
		this.tDECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DECIMAL");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.euclideanspace.pbase.Tutorial".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model hidden(SL_COMMENT, WS):
	//	m+=Member*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	/// *
	// * This is an inner element inside a class, interface or enum, such as:
	// * 'val' or 'var' returns EuclidField
	// * 'def' method returns EuclidFunction
	// * inner class returns EuclidInnerClass
	// * / Member returns EuclidMember hidden(SL_COMMENT, WS):
	//	(extension?="extension" (final?="val" | "var")? type=ID name1=ValidID? | static?="static"? (type=ID | (final?="val" |
	//	"var")) name2=ValidID) ("=" initialValue=XExpression)? ";"? //| {EuclidInnerClass.annotationInfo = current}
	//	"class" name=ValidID ("<" typeParameters+=ID ("," typeParameters+=ID)* ">")? ("extends" extends=ID)? ("implements"
	//	implements+=ID ("," ID)*)? "{" members+=Member* "}" //{EuclidMember} annotations+=XAnnotation*
	//	//{EuclidField.annotationInfo = current}
	//	//visibility=Visibility?
	//	| ("def" //| {EuclidFunction.annotationInfo = current}
	//	| override?="override") / *visibility=Visibility?* / static?="static"? dispatch?="dispatch"? ("<" typeParameters+=ID (","
	//	typeParameters+=ID)* ">")? (=> (returnType=ID name3=ValidID "(") / * =>(returnType=ID createExtensionInfo=CreateExtensionInfo name=ValidID '(')
	//      |* / //| =>(createExtensionInfo=CreateExtensionInfo name=ValidID '(')
	//	| name4=ValidID "(") (parameters+=Parameter ("," parameters+=Parameter)*)? ")" ("throws" exceptions+=ID (","
	//	exceptions+=ID)*)? expression=XBlockExpression? | / *| {EuclidConstructor.annotationInfo = current}
	//    visibility=Visibility?* / "new" ("<" typeParameters+=ID ("," typeParameters+=ID)* ">")? "(" (parameters+=Parameter
	//	("," parameters+=Parameter)*)? ")" ("throws" exceptions+=ID ("," exceptions+=ID)*)? expression=XBlockExpression;
	public MemberElements getMemberAccess() {
		return pMember;
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}

	//Parameter returns EuclidParameter: //annotations+=XAnnotation*
	//	parameterType=ID varArg?="..."? name=ValidID;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	/// *returns XExpression* / XExpression hidden(SL_COMMENT, WS):
	//	XAssignment;
	public XExpressionElements getXExpressionAccess() {
		return pXExpression;
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression hidden(SL_COMMENT, WS):
	//	{XAssignment} feature=ID OpSingleAssign value=XAssignment | XOrExpression (=> ({XBinaryOperation.leftOperand=current}
	//	feature=OpMultiAssign) rightOperand=XAssignment)?;
	public XAssignmentElements getXAssignmentAccess() {
		return pXAssignment;
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign hidden(SL_COMMENT, WS):
	//	"=";
	public OpSingleAssignElements getOpSingleAssignAccess() {
		return pOpSingleAssign;
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign hidden(SL_COMMENT, WS):
	//	"+=" | "-=" | "*=" | "/=" | "%=" | "<" "<" "=" | ">" ">"? ">=";
	public OpMultiAssignElements getOpMultiAssignAccess() {
		return pOpMultiAssign;
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression hidden(SL_COMMENT, WS):
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpOr) rightOperand=XAndExpression)*;
	public XOrExpressionElements getXOrExpressionAccess() {
		return pXOrExpression;
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public OpOrElements getOpOrAccess() {
		return pOpOr;
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression hidden(SL_COMMENT, WS):
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpAnd) rightOperand=XEqualityExpression)*;
	public XAndExpressionElements getXAndExpressionAccess() {
		return pXAndExpression;
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public OpAndElements getOpAndAccess() {
		return pOpAnd;
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression hidden(SL_COMMENT, WS):
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpEquality)
	//	rightOperand=XRelationalExpression)*;
	public XEqualityExpressionElements getXEqualityExpressionAccess() {
		return pXEqualityExpression;
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public OpEqualityElements getOpEqualityAccess() {
		return pOpEquality;
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression hidden(SL_COMMENT, WS):
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=ID | =>
	//	({XBinaryOperation.leftOperand=current} feature=OpCompare) rightOperand=XOtherOperatorExpression)*;
	public XRelationalExpressionElements getXRelationalExpressionAccess() {
		return pXRelationalExpression;
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<" "=" | ">" | "<";
	public OpCompareElements getOpCompareAccess() {
		return pOpCompare;
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression hidden(SL_COMMENT, WS):
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpOther) rightOperand=XAdditiveExpression)*;
	public XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return pXOtherOperatorExpression;
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:";
	public OpOtherElements getOpOtherAccess() {
		return pOpOther;
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression hidden(SL_COMMENT, WS):
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=OpAdd)
	//	rightOperand=XMultiplicativeExpression)*;
	public XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return pXAdditiveExpression;
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public OpAddElements getOpAddAccess() {
		return pOpAdd;
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression hidden(SL_COMMENT, WS):
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=OpMulti) rightOperand=XUnaryOperation)*;
	public XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return pXMultiplicativeExpression;
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public OpMultiElements getOpMultiAccess() {
		return pOpMulti;
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression hidden(SL_COMMENT, WS):
	//	{XUnaryOperation} feature=OpUnary operand=XUnaryOperation | => XCastedExpression;
	public XUnaryOperationElements getXUnaryOperationAccess() {
		return pXUnaryOperation;
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public OpUnaryElements getOpUnaryAccess() {
		return pOpUnary;
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression hidden(SL_COMMENT, WS):
	//	XPostfixOperation (=> ({XCastedExpression.target=current} "as") type=ID)*;
	public XCastedExpressionElements getXCastedExpressionAccess() {
		return pXCastedExpression;
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation returns XExpression hidden(SL_COMMENT, WS):
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=OpPostfix)?;
	public XPostfixOperationElements getXPostfixOperationAccess() {
		return pXPostfixOperation;
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix hidden(SL_COMMENT, WS):
	//	"++" | "--";
	public OpPostfixElements getOpPostfixAccess() {
		return pOpPostfix;
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression hidden(SL_COMMENT, WS):
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::") feature=ID OpSingleAssign)
	//	value=XAssignment | => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::"))
	//	("<" typeArguments+=ID ("," typeArguments+=ID)* ">")? feature=ID (=> explicitOperationCall?="("
	//	(memberCallArguments+=XShortClosure | memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")?
	//	memberCallArguments+=XClosure?)*;
	public XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return pXMemberFeatureCall;
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression hidden(SL_COMMENT, WS):
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return pXPrimaryExpression;
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression hidden(SL_COMMENT, WS):
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XLiteralElements getXLiteralAccess() {
		return pXLiteral;
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral hidden(SL_COMMENT, WS):
	//	XSetLiteral | XListLiteral;
	public XCollectionLiteralElements getXCollectionLiteralAccess() {
		return pXCollectionLiteral;
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral hidden(SL_COMMENT, WS):
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XSetLiteralElements getXSetLiteralAccess() {
		return pXSetLiteral;
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral hidden(SL_COMMENT, WS):
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XListLiteralElements getXListLiteralAccess() {
		return pXListLiteral;
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression hidden(SL_COMMENT, WS):
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=ID ("," declaredFormalParameters+=ID)*)? explicitSyntax?="|")?
	//	expression=XExpressionInClosure "]";
	public XClosureElements getXClosureAccess() {
		return pXClosure;
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression hidden(SL_COMMENT, WS):
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ";"?)*;
	public XExpressionInClosureElements getXExpressionInClosureAccess() {
		return pXExpressionInClosure;
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression hidden(SL_COMMENT, WS):
	//	=> ({XClosure} (declaredFormalParameters+=ID ("," declaredFormalParameters+=ID)*)? explicitSyntax?="|")
	//	expression=XExpression;
	public XShortClosureElements getXShortClosureAccess() {
		return pXShortClosure;
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression hidden(SL_COMMENT, WS):
	//	"(" XExpression ")";
	public XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return pXParenthesizedExpression;
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression hidden(SL_COMMENT, WS):
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XIfExpressionElements getXIfExpressionAccess() {
		return pXIfExpression;
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression hidden(SL_COMMENT, WS):
	//	{XSwitchExpression} "switch" (=> ("(" declaredParam=ID ":") switch=XExpression ")" | => (declaredParam=ID ":")?
	//	switch=XExpression) "{" cases+=XCasePart* ("default" ":" default=XExpression)? "}";
	public XSwitchExpressionElements getXSwitchExpressionAccess() {
		return pXSwitchExpression;
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart hidden(SL_COMMENT, WS):
	//	{XCasePart} typeGuard=ID? ("case" case=XExpression)? (":" then=XExpression | fallThrough?=",");
	public XCasePartElements getXCasePartAccess() {
		return pXCasePart;
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression hidden(SL_COMMENT, WS):
	//	=> ({XForLoopExpression} "for" "(" declaredParam=ID ":") forExpression=XExpression ")" eachExpression=XExpression;
	public XForLoopExpressionElements getXForLoopExpressionAccess() {
		return pXForLoopExpression;
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XBasicForLoopExpression returns XExpression hidden(SL_COMMENT, WS):
	//	{XBasicForLoopExpression} "for" "(" (initExpressions+=XExpressionOrVarDeclaration (","
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ";" expression=XExpression? ";" (updateExpressions+=XExpression (","
	//	updateExpressions+=XExpression)*)? ")" eachExpression=XExpression;
	public XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return pXBasicForLoopExpression;
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression hidden(SL_COMMENT, WS):
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XWhileExpressionElements getXWhileExpressionAccess() {
		return pXWhileExpression;
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression hidden(SL_COMMENT, WS):
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return pXDoWhileExpression;
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression hidden(SL_COMMENT, WS):
	//	{XBlockExpression} "{" (expressions+=XExpressionOrVarDeclaration ";"?)* "}";
	public XBlockExpressionElements getXBlockExpressionAccess() {
		return pXBlockExpression;
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration returns XExpression hidden(SL_COMMENT, WS):
	//	XVariableDeclaration | XExpression;
	public XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return pXExpressionOrVarDeclaration;
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XVariableDeclaration returns XExpression hidden(SL_COMMENT, WS):
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=ID name=ValidID) | name=ValidID) ("=" right=XExpression)?;
	public XVariableDeclarationElements getXVariableDeclarationAccess() {
		return pXVariableDeclaration;
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	/// *ID returns types::jvmFormalParameter:
	//	(parameterType=JvmTypeReference)? name=ValidID;
	//	
	//FullID returns types::jvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;* / XFeatureCall returns XExpression hidden(SL_COMMENT, WS):
	//	{XFeatureCall} ("<" typeArguments+=ID ("," typeArguments+=ID)* ">")? feature=ID (=> explicitOperationCall?="("
	//	(featureCallArguments+=XShortClosure | featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)?
	//	")")? featureCallArguments+=XClosure?;
	public XFeatureCallElements getXFeatureCallAccess() {
		return pXFeatureCall;
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public FeatureCallIDElements getFeatureCallIDAccess() {
		return pFeatureCallID;
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public IdOrSuperElements getIdOrSuperAccess() {
		return pIdOrSuper;
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression hidden(SL_COMMENT, WS):
	//	{XConstructorCall} "new" constructor=ID ("<" typeArguments+=ID ("," typeArguments+=ID)* ">")? (=>
	//	explicitConstructorCall?="(" (arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")?
	//	arguments+=XClosure?;
	public XConstructorCallElements getXConstructorCallAccess() {
		return pXConstructorCall;
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression hidden(SL_COMMENT, WS):
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XBooleanLiteralElements getXBooleanLiteralAccess() {
		return pXBooleanLiteral;
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression hidden(SL_COMMENT, WS):
	//	{XNullLiteral} "null";
	public XNullLiteralElements getXNullLiteralAccess() {
		return pXNullLiteral;
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression hidden(SL_COMMENT, WS):
	//	{XNumberLiteral} value=Number;
	public XNumberLiteralElements getXNumberLiteralAccess() {
		return pXNumberLiteral;
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression hidden(SL_COMMENT, WS):
	//	{XStringLiteral} value=STRING;
	public XStringLiteralElements getXStringLiteralAccess() {
		return pXStringLiteral;
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression hidden(SL_COMMENT, WS):
	//	{XTypeLiteral} "typeof" "(" type=ID arrayDimensions+=ArrayBrackets* ")";
	public XTypeLiteralElements getXTypeLiteralAccess() {
		return pXTypeLiteral;
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression hidden(SL_COMMENT, WS):
	//	{XThrowExpression} "throw" expression=XExpression;
	public XThrowExpressionElements getXThrowExpressionAccess() {
		return pXThrowExpression;
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression hidden(SL_COMMENT, WS):
	//	{XReturnExpression} "return" -> expression=XExpression?;
	public XReturnExpressionElements getXReturnExpressionAccess() {
		return pXReturnExpression;
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression hidden(SL_COMMENT, WS):
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return pXTryCatchFinallyExpression;
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression returns XExpression hidden(SL_COMMENT, WS):
	//	=> ({XSynchronizedExpression} "synchronized" "(") param=XExpression ")" expression=XExpression;
	public XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return pXSynchronizedExpression;
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause hidden(SL_COMMENT, WS):
	//	"catch" "(" declaredParam=ID ")" expression=XExpression;
	public XCatchClauseElements getXCatchClauseAccess() {
		return pXCatchClause;
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//ArrayBrackets hidden(SL_COMMENT, WS):
	//	"[" ID "]";
	public ArrayBracketsElements getArrayBracketsAccess() {
		return pArrayBrackets;
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//QualifiedName hidden(SL_COMMENT, WS):
	//	ValidID ("." ValidID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden(SL_COMMENT, WS):
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//ValidID hidden(SL_COMMENT, WS):
	//	ID;
	public ValidIDElements getValidIDAccess() {
		return pValidID;
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier hidden(SL_COMMENT, WS):
	//	(ValidID "::")+;
	public StaticQualifierElements getStaticQualifierAccess() {
		return pStaticQualifier;
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return tHEX;
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return tINT;
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return tDECIMAL;
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return tWS;
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	} 
}
