/*
* generated by Xtext
*/
grammar InternalDemo;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package com.euclideanspace.macro.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.euclideanspace.macro.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.euclideanspace.macro.services.DemoGrammarAccess;

}

@parser::members {
 
 	private DemoGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(DemoGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getContentsAssignment()); }
(rule__Model__ContentsAssignment)
{ after(grammarAccess.getModelAccess().getContentsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRecurse
entryRuleRecurse 
:
{ before(grammarAccess.getRecurseRule()); }
	 ruleRecurse
{ after(grammarAccess.getRecurseRule()); } 
	 EOF 
;

// Rule Recurse
ruleRecurse
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRecurseAccess().getGroup()); }
(rule__Recurse__Group__0)
{ after(grammarAccess.getRecurseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMacroDef
entryRuleMacroDef 
:
{ before(grammarAccess.getMacroDefRule()); }
	 ruleMacroDef
{ after(grammarAccess.getMacroDefRule()); } 
	 EOF 
;

// Rule MacroDef
ruleMacroDef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMacroDefAccess().getGroup()); }
(rule__MacroDef__Group__0)
{ after(grammarAccess.getMacroDefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Recurse__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecurseAccess().getMdAssignment_1_0()); }
(rule__Recurse__MdAssignment_1_0)
{ after(grammarAccess.getRecurseAccess().getMdAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getRecurseAccess().getGroup_1_1()); }
(rule__Recurse__Group_1_1__0)
{ after(grammarAccess.getRecurseAccess().getGroup_1_1()); }
)

    |(
{ before(grammarAccess.getRecurseAccess().getNAssignment_1_2()); }
(rule__Recurse__NAssignment_1_2)
{ after(grammarAccess.getRecurseAccess().getNAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Recurse__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Recurse__Group__0__Impl
	rule__Recurse__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Recurse__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecurseAccess().getRecurseAction_0()); }
(

)
{ after(grammarAccess.getRecurseAccess().getRecurseAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Recurse__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Recurse__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Recurse__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getRecurseAccess().getAlternatives_1()); }
(rule__Recurse__Alternatives_1)
{ after(grammarAccess.getRecurseAccess().getAlternatives_1()); }
)
(
{ before(grammarAccess.getRecurseAccess().getAlternatives_1()); }
(rule__Recurse__Alternatives_1)*
{ after(grammarAccess.getRecurseAccess().getAlternatives_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Recurse__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Recurse__Group_1_1__0__Impl
	rule__Recurse__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Recurse__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecurseAccess().getLeftCurlyBracketKeyword_1_1_0()); }

	'{' 

{ after(grammarAccess.getRecurseAccess().getLeftCurlyBracketKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Recurse__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Recurse__Group_1_1__1__Impl
	rule__Recurse__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Recurse__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecurseAccess().getRAssignment_1_1_1()); }
(rule__Recurse__RAssignment_1_1_1)
{ after(grammarAccess.getRecurseAccess().getRAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Recurse__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Recurse__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Recurse__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecurseAccess().getRightCurlyBracketKeyword_1_1_2()); }

	'}' 

{ after(grammarAccess.getRecurseAccess().getRightCurlyBracketKeyword_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MacroDef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MacroDef__Group__0__Impl
	rule__MacroDef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MacroDef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMacroDefAccess().getMacroKeyword_0()); }

	'macro' 

{ after(grammarAccess.getMacroDefAccess().getMacroKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MacroDef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MacroDef__Group__1__Impl
	rule__MacroDef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MacroDef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMacroDefAccess().getMnAssignment_1()); }
(rule__MacroDef__MnAssignment_1)
{ after(grammarAccess.getMacroDefAccess().getMnAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MacroDef__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MacroDef__Group__2__Impl
	rule__MacroDef__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MacroDef__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMacroDefAccess().getMAssignment_2()); }
(rule__MacroDef__MAssignment_2)
{ after(grammarAccess.getMacroDefAccess().getMAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MacroDef__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MacroDef__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MacroDef__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMacroDefAccess().getEndmacroKeyword_3()); }

	'endmacro' 

{ after(grammarAccess.getMacroDefAccess().getEndmacroKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__Model__ContentsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getContentsRecurseParserRuleCall_0()); }
	ruleRecurse{ after(grammarAccess.getModelAccess().getContentsRecurseParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Recurse__MdAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecurseAccess().getMdMacroDefParserRuleCall_1_0_0()); }
	ruleMacroDef{ after(grammarAccess.getRecurseAccess().getMdMacroDefParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Recurse__RAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecurseAccess().getRRecurseParserRuleCall_1_1_1_0()); }
	ruleRecurse{ after(grammarAccess.getRecurseAccess().getRRecurseParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Recurse__NAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRecurseAccess().getNIDTerminalRuleCall_1_2_0()); }
	RULE_ID{ after(grammarAccess.getRecurseAccess().getNIDTerminalRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MacroDef__MnAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMacroDefAccess().getMnIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getMacroDefAccess().getMnIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MacroDef__MAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMacroDefAccess().getMRecurseParserRuleCall_2_0()); }
	ruleRecurse{ after(grammarAccess.getMacroDefAccess().getMRecurseParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


