/*
* generated by Xtext
*/
package com.euclideanspace.macro.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DemoGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cContentsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cContentsRecurseParserRuleCall_0 = (RuleCall)cContentsAssignment.eContents().get(0);
		
		/// *
		// * Overview of this project here:
		// * https://github.com/martinbaker/xtextadd/tree/master/macro
		// * / Model:
		//	contents+=Recurse;
		public ParserRule getRule() { return rule; }

		//contents+=Recurse
		public Assignment getContentsAssignment() { return cContentsAssignment; }

		//Recurse
		public RuleCall getContentsRecurseParserRuleCall_0() { return cContentsRecurseParserRuleCall_0; }
	}

	public class RecurseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Recurse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRecurseAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cMdAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cMdMacroDefParserRuleCall_1_0_0 = (RuleCall)cMdAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cRAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRRecurseParserRuleCall_1_1_1_0 = (RuleCall)cRAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cNAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cNIDTerminalRuleCall_1_2_0 = (RuleCall)cNAssignment_1_2.eContents().get(0);
		
		//Recurse:
		//	{Recurse} (md+=MacroDef | "{" r+=Recurse "}" | n+=ID)+;
		public ParserRule getRule() { return rule; }

		//{Recurse} (md+=MacroDef | "{" r+=Recurse "}" | n+=ID)+
		public Group getGroup() { return cGroup; }

		//{Recurse}
		public Action getRecurseAction_0() { return cRecurseAction_0; }

		//(md+=MacroDef | "{" r+=Recurse "}" | n+=ID)+
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//md+=MacroDef
		public Assignment getMdAssignment_1_0() { return cMdAssignment_1_0; }

		//MacroDef
		public RuleCall getMdMacroDefParserRuleCall_1_0_0() { return cMdMacroDefParserRuleCall_1_0_0; }

		//"{" r+=Recurse "}"
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_1_0() { return cLeftCurlyBracketKeyword_1_1_0; }

		//r+=Recurse
		public Assignment getRAssignment_1_1_1() { return cRAssignment_1_1_1; }

		//Recurse
		public RuleCall getRRecurseParserRuleCall_1_1_1_0() { return cRRecurseParserRuleCall_1_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_1_2() { return cRightCurlyBracketKeyword_1_1_2; }

		//n+=ID
		public Assignment getNAssignment_1_2() { return cNAssignment_1_2; }

		//ID
		public RuleCall getNIDTerminalRuleCall_1_2_0() { return cNIDTerminalRuleCall_1_2_0; }
	}

	public class MacroDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MacroDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMacroKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMnAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMnIDTerminalRuleCall_1_0 = (RuleCall)cMnAssignment_1.eContents().get(0);
		private final Assignment cMAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMRecurseParserRuleCall_2_0 = (RuleCall)cMAssignment_2.eContents().get(0);
		private final Keyword cEndmacroKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MacroDef:
		//	"macro" mn=ID m=Recurse "endmacro";
		public ParserRule getRule() { return rule; }

		//"macro" mn=ID m=Recurse "endmacro"
		public Group getGroup() { return cGroup; }

		//"macro"
		public Keyword getMacroKeyword_0() { return cMacroKeyword_0; }

		//mn=ID
		public Assignment getMnAssignment_1() { return cMnAssignment_1; }

		//ID
		public RuleCall getMnIDTerminalRuleCall_1_0() { return cMnIDTerminalRuleCall_1_0; }

		//m=Recurse
		public Assignment getMAssignment_2() { return cMAssignment_2; }

		//Recurse
		public RuleCall getMRecurseParserRuleCall_2_0() { return cMRecurseParserRuleCall_2_0; }

		//"endmacro"
		public Keyword getEndmacroKeyword_3() { return cEndmacroKeyword_3; }
	}
	
	
	private final ModelElements pModel;
	private final RecurseElements pRecurse;
	private final MacroDefElements pMacroDef;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DemoGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pRecurse = new RecurseElements();
		this.pMacroDef = new MacroDefElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.euclideanspace.macro.Demo".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// *
	// * Overview of this project here:
	// * https://github.com/martinbaker/xtextadd/tree/master/macro
	// * / Model:
	//	contents+=Recurse;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Recurse:
	//	{Recurse} (md+=MacroDef | "{" r+=Recurse "}" | n+=ID)+;
	public RecurseElements getRecurseAccess() {
		return pRecurse;
	}
	
	public ParserRule getRecurseRule() {
		return getRecurseAccess().getRule();
	}

	//MacroDef:
	//	"macro" mn=ID m=Recurse "endmacro";
	public MacroDefElements getMacroDefAccess() {
		return pMacroDef;
	}
	
	public ParserRule getMacroDefRule() {
		return getMacroDefAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
