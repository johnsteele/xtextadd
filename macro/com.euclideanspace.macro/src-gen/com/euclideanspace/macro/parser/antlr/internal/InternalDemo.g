/*
* generated by Xtext
*/
grammar InternalDemo;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.euclideanspace.macro.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.euclideanspace.macro.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.euclideanspace.macro.services.DemoGrammarAccess;

}

@parser::members {

 	private DemoGrammarAccess grammarAccess;
 	
    public InternalDemoParser(TokenStream input, DemoGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected DemoGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getContentsRecurseParserRuleCall_0()); 
	    }
		lv_contents_0_0=ruleRecurse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"contents",
        		lv_contents_0_0, 
        		"Recurse");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleRecurse
entryRuleRecurse returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRecurseRule()); }
	 iv_ruleRecurse=ruleRecurse 
	 { $current=$iv_ruleRecurse.current; } 
	 EOF 
;

// Rule Recurse
ruleRecurse returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRecurseAccess().getRecurseAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getRecurseAccess().getMdMacroDefParserRuleCall_1_0_0()); 
	    }
		lv_md_1_0=ruleMacroDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecurseRule());
	        }
       		add(
       			$current, 
       			"md",
        		lv_md_1_0, 
        		"MacroDef");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRecurseAccess().getLeftCurlyBracketKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecurseAccess().getRRecurseParserRuleCall_1_1_1_0()); 
	    }
		lv_r_3_0=ruleRecurse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecurseRule());
	        }
       		add(
       			$current, 
       			"r",
        		lv_r_3_0, 
        		"Recurse");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRecurseAccess().getRightCurlyBracketKeyword_1_1_2());
    }
)
    |(
(
		lv_n_5_0=RULE_ID
		{
			newLeafNode(lv_n_5_0, grammarAccess.getRecurseAccess().getNIDTerminalRuleCall_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRecurseRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"n",
        		lv_n_5_0, 
        		"ID");
	    }

)
))+)
;





// Entry rule entryRuleMacroDef
entryRuleMacroDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMacroDefRule()); }
	 iv_ruleMacroDef=ruleMacroDef 
	 { $current=$iv_ruleMacroDef.current; } 
	 EOF 
;

// Rule MacroDef
ruleMacroDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='macro' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMacroDefAccess().getMacroKeyword_0());
    }
(
(
		lv_mn_1_0=RULE_ID
		{
			newLeafNode(lv_mn_1_0, grammarAccess.getMacroDefAccess().getMnIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMacroDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"mn",
        		lv_mn_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMacroDefAccess().getMRecurseParserRuleCall_2_0()); 
	    }
		lv_m_2_0=ruleRecurse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMacroDefRule());
	        }
       		set(
       			$current, 
       			"m",
        		lv_m_2_0, 
        		"Recurse");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='endmacro' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMacroDefAccess().getEndmacroKeyword_3());
    }
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


