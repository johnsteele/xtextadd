/*
* generated by Xtext
*/
package com.euclideanspace.xgener.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import com.euclideanspace.xgener.services.GenGrammarAccess;

public class GenParser extends AbstractContentAssistParser {
	
	@Inject
	private GenGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected com.euclideanspace.xgener.ui.contentassist.antlr.internal.InternalGenParser createParser() {
		com.euclideanspace.xgener.ui.contentassist.antlr.internal.InternalGenParser result = new com.euclideanspace.xgener.ui.contentassist.antlr.internal.InternalGenParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelAccess().getAlternatives(), "rule__Model__Alternatives");
					put(grammarAccess.getClassTypeAccess().getAlternatives_2(), "rule__ClassType__Alternatives_2");
					put(grammarAccess.getClassTypeAccess().getBlockingAlternatives_2_3_1_0(), "rule__ClassType__BlockingAlternatives_2_3_1_0");
					put(grammarAccess.getProcedureAccess().getAlternatives_2(), "rule__Procedure__Alternatives_2");
					put(grammarAccess.getProcedureAccess().getTypesAlternatives_2_2_1_0(), "rule__Procedure__TypesAlternatives_2_2_1_0");
					put(grammarAccess.getStatementAccess().getAlternatives_2(), "rule__Statement__Alternatives_2");
					put(grammarAccess.getPrecedenceAccess().getAlternatives(), "rule__Precedence__Alternatives");
					put(grammarAccess.getPrecedenceAccess().getLiteralAlternatives_5_2_0(), "rule__Precedence__LiteralAlternatives_5_2_0");
					put(grammarAccess.getMultIDAccess().getAlternatives_1(), "rule__MultID__Alternatives_1");
					put(grammarAccess.getMultStringAccess().getAlternatives_1(), "rule__MultString__Alternatives_1");
					put(grammarAccess.getClassTypeAccess().getGroup(), "rule__ClassType__Group__0");
					put(grammarAccess.getClassTypeAccess().getGroup_2_1(), "rule__ClassType__Group_2_1__0");
					put(grammarAccess.getClassTypeAccess().getGroup_2_2(), "rule__ClassType__Group_2_2__0");
					put(grammarAccess.getClassTypeAccess().getGroup_2_3(), "rule__ClassType__Group_2_3__0");
					put(grammarAccess.getProcedureAccess().getGroup(), "rule__Procedure__Group__0");
					put(grammarAccess.getProcedureAccess().getGroup_2_0(), "rule__Procedure__Group_2_0__0");
					put(grammarAccess.getProcedureAccess().getGroup_2_1(), "rule__Procedure__Group_2_1__0");
					put(grammarAccess.getProcedureAccess().getGroup_2_2(), "rule__Procedure__Group_2_2__0");
					put(grammarAccess.getStatementAccess().getGroup(), "rule__Statement__Group__0");
					put(grammarAccess.getStatementAccess().getGroup_2_0(), "rule__Statement__Group_2_0__0");
					put(grammarAccess.getStatementAccess().getGroup_2_1(), "rule__Statement__Group_2_1__0");
					put(grammarAccess.getStatementAccess().getGroup_2_2(), "rule__Statement__Group_2_2__0");
					put(grammarAccess.getStatementAccess().getGroup_2_3(), "rule__Statement__Group_2_3__0");
					put(grammarAccess.getStatementAccess().getGroup_2_3_2(), "rule__Statement__Group_2_3_2__0");
					put(grammarAccess.getStatementAccess().getGroup_2_4(), "rule__Statement__Group_2_4__0");
					put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
					put(grammarAccess.getPrecedenceAccess().getGroup_0(), "rule__Precedence__Group_0__0");
					put(grammarAccess.getPrecedenceAccess().getGroup_1(), "rule__Precedence__Group_1__0");
					put(grammarAccess.getPrecedenceAccess().getGroup_2(), "rule__Precedence__Group_2__0");
					put(grammarAccess.getPrecedenceAccess().getGroup_3(), "rule__Precedence__Group_3__0");
					put(grammarAccess.getPrecedenceAccess().getGroup_4(), "rule__Precedence__Group_4__0");
					put(grammarAccess.getPrecedenceAccess().getGroup_5(), "rule__Precedence__Group_5__0");
					put(grammarAccess.getPrecedenceAccess().getGroup_6(), "rule__Precedence__Group_6__0");
					put(grammarAccess.getPrecedenceAccess().getGroup_7(), "rule__Precedence__Group_7__0");
					put(grammarAccess.getPrecedenceAccess().getGroup_8(), "rule__Precedence__Group_8__0");
					put(grammarAccess.getMultIDAccess().getGroup(), "rule__MultID__Group__0");
					put(grammarAccess.getMultIDAccess().getGroup_1_1(), "rule__MultID__Group_1_1__0");
					put(grammarAccess.getMultStringAccess().getGroup(), "rule__MultString__Group__0");
					put(grammarAccess.getMultStringAccess().getGroup_1_1(), "rule__MultString__Group_1_1__0");
					put(grammarAccess.getModelAccess().getClasAssignment_0(), "rule__Model__ClasAssignment_0");
					put(grammarAccess.getModelAccess().getProcAssignment_1(), "rule__Model__ProcAssignment_1");
					put(grammarAccess.getModelAccess().getStatemAssignment_2(), "rule__Model__StatemAssignment_2");
					put(grammarAccess.getModelAccess().getExpAssignment_3(), "rule__Model__ExpAssignment_3");
					put(grammarAccess.getClassTypeAccess().getNameAssignment_1(), "rule__ClassType__NameAssignment_1");
					put(grammarAccess.getClassTypeAccess().getNoclassAssignment_2_0(), "rule__ClassType__NoclassAssignment_2_0");
					put(grammarAccess.getClassTypeAccess().getPrefixAssignment_2_1_1(), "rule__ClassType__PrefixAssignment_2_1_1");
					put(grammarAccess.getClassTypeAccess().getSuffixAssignment_2_2_1(), "rule__ClassType__SuffixAssignment_2_2_1");
					put(grammarAccess.getClassTypeAccess().getBlockingAssignment_2_3_1(), "rule__ClassType__BlockingAssignment_2_3_1");
					put(grammarAccess.getProcedureAccess().getNameAssignment_1(), "rule__Procedure__NameAssignment_1");
					put(grammarAccess.getProcedureAccess().getPrefixAssignment_2_0_1(), "rule__Procedure__PrefixAssignment_2_0_1");
					put(grammarAccess.getProcedureAccess().getSuffixAssignment_2_1_1(), "rule__Procedure__SuffixAssignment_2_1_1");
					put(grammarAccess.getProcedureAccess().getTypesAssignment_2_2_1(), "rule__Procedure__TypesAssignment_2_2_1");
					put(grammarAccess.getStatementAccess().getNameAssignment_1(), "rule__Statement__NameAssignment_1");
					put(grammarAccess.getStatementAccess().getRepAssignment_2_0_1(), "rule__Statement__RepAssignment_2_0_1");
					put(grammarAccess.getStatementAccess().getUntilAssignment_2_0_3(), "rule__Statement__UntilAssignment_2_0_3");
					put(grammarAccess.getStatementAccess().getWhileAssignment_2_1_1(), "rule__Statement__WhileAssignment_2_1_1");
					put(grammarAccess.getStatementAccess().getDoAssignment_2_1_3(), "rule__Statement__DoAssignment_2_1_3");
					put(grammarAccess.getStatementAccess().getForAssignment_2_2_1(), "rule__Statement__ForAssignment_2_2_1");
					put(grammarAccess.getStatementAccess().getVarAssignment_2_3_1(), "rule__Statement__VarAssignment_2_3_1");
					put(grammarAccess.getStatementAccess().getExAssignment_2_3_2_1(), "rule__Statement__ExAssignment_2_3_2_1");
					put(grammarAccess.getStatementAccess().getValAssignment_2_4_1(), "rule__Statement__ValAssignment_2_4_1");
					put(grammarAccess.getStatementAccess().getExAssignment_2_4_3(), "rule__Statement__ExAssignment_2_4_3");
					put(grammarAccess.getExpressionAccess().getNameAssignment_1(), "rule__Expression__NameAssignment_1");
					put(grammarAccess.getExpressionAccess().getPrecAssignment_2(), "rule__Expression__PrecAssignment_2");
					put(grammarAccess.getPrecedenceAccess().getRuletypAssignment_0_0(), "rule__Precedence__RuletypAssignment_0_0");
					put(grammarAccess.getPrecedenceAccess().getRuleAssignment_0_1(), "rule__Precedence__RuleAssignment_0_1");
					put(grammarAccess.getPrecedenceAccess().getRuletypAssignment_1_0(), "rule__Precedence__RuletypAssignment_1_0");
					put(grammarAccess.getPrecedenceAccess().getRuleAssignment_1_1(), "rule__Precedence__RuleAssignment_1_1");
					put(grammarAccess.getPrecedenceAccess().getPrefixAssignment_1_2(), "rule__Precedence__PrefixAssignment_1_2");
					put(grammarAccess.getPrecedenceAccess().getPar1Assignment_1_3(), "rule__Precedence__Par1Assignment_1_3");
					put(grammarAccess.getPrecedenceAccess().getRuletypAssignment_2_0(), "rule__Precedence__RuletypAssignment_2_0");
					put(grammarAccess.getPrecedenceAccess().getRuleAssignment_2_1(), "rule__Precedence__RuleAssignment_2_1");
					put(grammarAccess.getPrecedenceAccess().getPar1Assignment_2_2(), "rule__Precedence__Par1Assignment_2_2");
					put(grammarAccess.getPrecedenceAccess().getSuffixAssignment_2_3(), "rule__Precedence__SuffixAssignment_2_3");
					put(grammarAccess.getPrecedenceAccess().getRuletypAssignment_3_0(), "rule__Precedence__RuletypAssignment_3_0");
					put(grammarAccess.getPrecedenceAccess().getRuleAssignment_3_1(), "rule__Precedence__RuleAssignment_3_1");
					put(grammarAccess.getPrecedenceAccess().getPar1Assignment_3_2(), "rule__Precedence__Par1Assignment_3_2");
					put(grammarAccess.getPrecedenceAccess().getInfixAssignment_3_3(), "rule__Precedence__InfixAssignment_3_3");
					put(grammarAccess.getPrecedenceAccess().getPar2Assignment_3_4(), "rule__Precedence__Par2Assignment_3_4");
					put(grammarAccess.getPrecedenceAccess().getRuletypAssignment_4_0(), "rule__Precedence__RuletypAssignment_4_0");
					put(grammarAccess.getPrecedenceAccess().getRuleAssignment_4_1(), "rule__Precedence__RuleAssignment_4_1");
					put(grammarAccess.getPrecedenceAccess().getPar1Assignment_4_2(), "rule__Precedence__Par1Assignment_4_2");
					put(grammarAccess.getPrecedenceAccess().getInfixleftAssignment_4_3(), "rule__Precedence__InfixleftAssignment_4_3");
					put(grammarAccess.getPrecedenceAccess().getPar2Assignment_4_4(), "rule__Precedence__Par2Assignment_4_4");
					put(grammarAccess.getPrecedenceAccess().getRuletypAssignment_5_0(), "rule__Precedence__RuletypAssignment_5_0");
					put(grammarAccess.getPrecedenceAccess().getRuleAssignment_5_1(), "rule__Precedence__RuleAssignment_5_1");
					put(grammarAccess.getPrecedenceAccess().getLiteralAssignment_5_2(), "rule__Precedence__LiteralAssignment_5_2");
					put(grammarAccess.getPrecedenceAccess().getRuletypAssignment_6_0(), "rule__Precedence__RuletypAssignment_6_0");
					put(grammarAccess.getPrecedenceAccess().getRuleAssignment_6_1(), "rule__Precedence__RuleAssignment_6_1");
					put(grammarAccess.getPrecedenceAccess().getBracketAssignment_6_2(), "rule__Precedence__BracketAssignment_6_2");
					put(grammarAccess.getPrecedenceAccess().getRuletypAssignment_7_0(), "rule__Precedence__RuletypAssignment_7_0");
					put(grammarAccess.getPrecedenceAccess().getRuleAssignment_7_1(), "rule__Precedence__RuleAssignment_7_1");
					put(grammarAccess.getPrecedenceAccess().getBracesAssignment_7_2(), "rule__Precedence__BracesAssignment_7_2");
					put(grammarAccess.getPrecedenceAccess().getRuletypAssignment_8_0(), "rule__Precedence__RuletypAssignment_8_0");
					put(grammarAccess.getPrecedenceAccess().getRuleAssignment_8_1(), "rule__Precedence__RuleAssignment_8_1");
					put(grammarAccess.getPrecedenceAccess().getParenthesisAssignment_8_2(), "rule__Precedence__ParenthesisAssignment_8_2");
					put(grammarAccess.getMultIDAccess().getMiAssignment_1_0(), "rule__MultID__MiAssignment_1_0");
					put(grammarAccess.getMultIDAccess().getMiAssignment_1_1_1(), "rule__MultID__MiAssignment_1_1_1");
					put(grammarAccess.getMultStringAccess().getMsAssignment_1_0(), "rule__MultString__MsAssignment_1_0");
					put(grammarAccess.getMultStringAccess().getMsAssignment_1_1_1(), "rule__MultString__MsAssignment_1_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			com.euclideanspace.xgener.ui.contentassist.antlr.internal.InternalGenParser typedParser = (com.euclideanspace.xgener.ui.contentassist.antlr.internal.InternalGenParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public GenGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(GenGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
