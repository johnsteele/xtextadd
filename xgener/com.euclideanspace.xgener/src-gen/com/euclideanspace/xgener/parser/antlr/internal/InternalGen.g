/*
* generated by Xtext
*/
grammar InternalGen;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.euclideanspace.xgener.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.euclideanspace.xgener.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.euclideanspace.xgener.services.GenGrammarAccess;

}

@parser::members {

 	private GenGrammarAccess grammarAccess;
 	
    public InternalGenParser(TokenStream input, GenGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected GenGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getClasClassTypeParserRuleCall_0_0()); 
	    }
		lv_clas_0_0=ruleClassType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"clas",
        		lv_clas_0_0, 
        		"ClassType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getProcProcedureParserRuleCall_1_0()); 
	    }
		lv_proc_1_0=ruleProcedure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"proc",
        		lv_proc_1_0, 
        		"Procedure");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getStatemStatementParserRuleCall_2_0()); 
	    }
		lv_statem_2_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"statem",
        		lv_statem_2_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getExpExpressionParserRuleCall_3_0()); 
	    }
		lv_exp_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"exp",
        		lv_exp_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*
;





// Entry rule entryRuleClassType
entryRuleClassType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassTypeRule()); }
	 iv_ruleClassType=ruleClassType 
	 { $current=$iv_ruleClassType.current; } 
	 EOF 
;

// Rule ClassType
ruleClassType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='CLASS' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClassTypeAccess().getCLASSKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getClassTypeAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)((
(
		lv_noclass_2_0=	'NOCLASS' 
    {
        newLeafNode(lv_noclass_2_0, grammarAccess.getClassTypeAccess().getNoclassNOCLASSKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassTypeRule());
	        }
       		addWithLastConsumed($current, "noclass", lv_noclass_2_0, "NOCLASS");
	    }

)
)
    |(	otherlv_3='PREFIX' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getClassTypeAccess().getPREFIXKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassTypeAccess().getPrefixMultIDParserRuleCall_2_1_1_0()); 
	    }
		lv_prefix_4_0=ruleMultID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassTypeRule());
	        }
       		add(
       			$current, 
       			"prefix",
        		lv_prefix_4_0, 
        		"MultID");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_5='SUFFIX' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getClassTypeAccess().getSUFFIXKeyword_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassTypeAccess().getSuffixMultIDParserRuleCall_2_2_1_0()); 
	    }
		lv_suffix_6_0=ruleMultID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassTypeRule());
	        }
       		add(
       			$current, 
       			"suffix",
        		lv_suffix_6_0, 
        		"MultID");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_7='BLOCKING' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getClassTypeAccess().getBLOCKINGKeyword_2_3_0());
    }
(
(
(
		lv_blocking_8_1=	'BRACES' 
    {
        newLeafNode(lv_blocking_8_1, grammarAccess.getClassTypeAccess().getBlockingBRACESKeyword_2_3_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassTypeRule());
	        }
       		addWithLastConsumed($current, "blocking", lv_blocking_8_1, null);
	    }

    |		lv_blocking_8_2=	'INDENT' 
    {
        newLeafNode(lv_blocking_8_2, grammarAccess.getClassTypeAccess().getBlockingINDENTKeyword_2_3_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassTypeRule());
	        }
       		addWithLastConsumed($current, "blocking", lv_blocking_8_2, null);
	    }

)

)
)))*)
;





// Entry rule entryRuleProcedure
entryRuleProcedure returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProcedureRule()); }
	 iv_ruleProcedure=ruleProcedure 
	 { $current=$iv_ruleProcedure.current; } 
	 EOF 
;

// Rule Procedure
ruleProcedure returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='PROCEDURE' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getProcedureAccess().getPROCEDUREKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getProcedureAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcedureRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)((	otherlv_2='PREFIX' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getProcedureAccess().getPREFIXKeyword_2_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcedureAccess().getPrefixMultIDParserRuleCall_2_0_1_0()); 
	    }
		lv_prefix_3_0=ruleMultID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcedureRule());
	        }
       		add(
       			$current, 
       			"prefix",
        		lv_prefix_3_0, 
        		"MultID");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_4='SUFFIX' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getProcedureAccess().getSUFFIXKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcedureAccess().getSuffixMultIDParserRuleCall_2_1_1_0()); 
	    }
		lv_suffix_5_0=ruleMultID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcedureRule());
	        }
       		add(
       			$current, 
       			"suffix",
        		lv_suffix_5_0, 
        		"MultID");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_6='TYPES' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getProcedureAccess().getTYPESKeyword_2_2_0());
    }
(
(
(
		lv_types_7_1=	'COLONSEPERATED' 
    {
        newLeafNode(lv_types_7_1, grammarAccess.getProcedureAccess().getTypesCOLONSEPERATEDKeyword_2_2_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcedureRule());
	        }
       		addWithLastConsumed($current, "types", lv_types_7_1, null);
	    }

    |		lv_types_7_2=	'SPACESEPERATED' 
    {
        newLeafNode(lv_types_7_2, grammarAccess.getProcedureAccess().getTypesSPACESEPERATEDKeyword_2_2_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcedureRule());
	        }
       		addWithLastConsumed($current, "types", lv_types_7_2, null);
	    }

    |		lv_types_7_3=	'INHEADER' 
    {
        newLeafNode(lv_types_7_3, grammarAccess.getProcedureAccess().getTypesINHEADERKeyword_2_2_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcedureRule());
	        }
       		addWithLastConsumed($current, "types", lv_types_7_3, null);
	    }

    |		lv_types_7_4=	'INFERRED' 
    {
        newLeafNode(lv_types_7_4, grammarAccess.getProcedureAccess().getTypesINFERREDKeyword_2_2_1_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcedureRule());
	        }
       		addWithLastConsumed($current, "types", lv_types_7_4, null);
	    }

    |		lv_types_7_5=	'UNTYPED' 
    {
        newLeafNode(lv_types_7_5, grammarAccess.getProcedureAccess().getTypesUNTYPEDKeyword_2_2_1_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcedureRule());
	        }
       		addWithLastConsumed($current, "types", lv_types_7_5, null);
	    }

)

)
)))*)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='STATEMENT' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStatementAccess().getSTATEMENTKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getStatementAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)((	otherlv_2='REPEAT' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStatementAccess().getREPEATKeyword_2_0_0());
    }
(
(
		lv_rep_3_0=RULE_ID
		{
			newLeafNode(lv_rep_3_0, grammarAccess.getStatementAccess().getRepIDTerminalRuleCall_2_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rep",
        		lv_rep_3_0, 
        		"ID");
	    }

)
)	otherlv_4='UNTIL' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStatementAccess().getUNTILKeyword_2_0_2());
    }
(
(
		lv_until_5_0=RULE_ID
		{
			newLeafNode(lv_until_5_0, grammarAccess.getStatementAccess().getUntilIDTerminalRuleCall_2_0_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"until",
        		lv_until_5_0, 
        		"ID");
	    }

)
))
    |(	otherlv_6='WHILE' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getStatementAccess().getWHILEKeyword_2_1_0());
    }
(
(
		lv_while_7_0=RULE_ID
		{
			newLeafNode(lv_while_7_0, grammarAccess.getStatementAccess().getWhileIDTerminalRuleCall_2_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"while",
        		lv_while_7_0, 
        		"ID");
	    }

)
)	otherlv_8='DO' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getStatementAccess().getDOKeyword_2_1_2());
    }
(
(
		lv_do_9_0=RULE_ID
		{
			newLeafNode(lv_do_9_0, grammarAccess.getStatementAccess().getDoIDTerminalRuleCall_2_1_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"do",
        		lv_do_9_0, 
        		"ID");
	    }

)
))
    |(	otherlv_10='FOR' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getStatementAccess().getFORKeyword_2_2_0());
    }
(
(
		lv_for_11_0=RULE_ID
		{
			newLeafNode(lv_for_11_0, grammarAccess.getStatementAccess().getForIDTerminalRuleCall_2_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"for",
        		lv_for_11_0, 
        		"ID");
	    }

)
))
    |(	otherlv_12='VAR' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getStatementAccess().getVARKeyword_2_3_0());
    }
(
(
		lv_var_13_0=RULE_ID
		{
			newLeafNode(lv_var_13_0, grammarAccess.getStatementAccess().getVarIDTerminalRuleCall_2_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"var",
        		lv_var_13_0, 
        		"ID");
	    }

)
)(	otherlv_14='=' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getStatementAccess().getEqualsSignKeyword_2_3_2_0());
    }
(
(
		lv_ex_15_0=RULE_ID
		{
			newLeafNode(lv_ex_15_0, grammarAccess.getStatementAccess().getExIDTerminalRuleCall_2_3_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ex",
        		lv_ex_15_0, 
        		"ID");
	    }

)
))?)
    |(	otherlv_16='VAL' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getStatementAccess().getVALKeyword_2_4_0());
    }
(
(
		lv_val_17_0=RULE_ID
		{
			newLeafNode(lv_val_17_0, grammarAccess.getStatementAccess().getValIDTerminalRuleCall_2_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"val",
        		lv_val_17_0, 
        		"ID");
	    }

)
)	otherlv_18='=' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getStatementAccess().getEqualsSignKeyword_2_4_2());
    }
(
(
		lv_ex_19_0=RULE_ID
		{
			newLeafNode(lv_ex_19_0, grammarAccess.getStatementAccess().getExIDTerminalRuleCall_2_4_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ex",
        		lv_ex_19_0, 
        		"ID");
	    }

)
))))
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='EXPRESSION' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExpressionAccess().getEXPRESSIONKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getExpressionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionAccess().getPrecPrecedenceParserRuleCall_2_0()); 
	    }
		lv_prec_2_0=rulePrecedence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionRule());
	        }
       		add(
       			$current, 
       			"prec",
        		lv_prec_2_0, 
        		"Precedence");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRulePrecedence
entryRulePrecedence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrecedenceRule()); }
	 iv_rulePrecedence=rulePrecedence 
	 { $current=$iv_rulePrecedence.current; } 
	 EOF 
;

// Rule Precedence
rulePrecedence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_ruletyp_0_0=	'CALLER' 
    {
        newLeafNode(lv_ruletyp_0_0, grammarAccess.getPrecedenceAccess().getRuletypCALLERKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed($current, "ruletyp", lv_ruletyp_0_0, "CALLER");
	    }

)
)(
(
		lv_rule_1_0=RULE_ID
		{
			newLeafNode(lv_rule_1_0, grammarAccess.getPrecedenceAccess().getRuleIDTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rule",
        		lv_rule_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPrecedenceAccess().getFullStopKeyword_0_2_0());
    }
(
(
		lv_feature1_3_0=RULE_ID
		{
			newLeafNode(lv_feature1_3_0, grammarAccess.getPrecedenceAccess().getFeature1IDTerminalRuleCall_0_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"feature1",
        		lv_feature1_3_0, 
        		"ID");
	    }

)
))?)
    |((
(
		lv_ruletyp_4_0=	'PREFIX' 
    {
        newLeafNode(lv_ruletyp_4_0, grammarAccess.getPrecedenceAccess().getRuletypPREFIXKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed($current, "ruletyp", lv_ruletyp_4_0, "PREFIX");
	    }

)
)(
(
		lv_rule_5_0=RULE_ID
		{
			newLeafNode(lv_rule_5_0, grammarAccess.getPrecedenceAccess().getRuleIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rule",
        		lv_rule_5_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrecedenceAccess().getPrefixMultStringParserRuleCall_1_2_0()); 
	    }
		lv_prefix_6_0=ruleMultString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrecedenceRule());
	        }
       		set(
       			$current, 
       			"prefix",
        		lv_prefix_6_0, 
        		"MultString");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_feature1_7_0=RULE_ID
		{
			newLeafNode(lv_feature1_7_0, grammarAccess.getPrecedenceAccess().getFeature1IDTerminalRuleCall_1_3_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"feature1",
        		lv_feature1_7_0, 
        		"ID");
	    }

)
)	otherlv_8='=' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getPrecedenceAccess().getEqualsSignKeyword_1_3_1());
    }
)?(
(
		lv_par1_9_0=RULE_ID
		{
			newLeafNode(lv_par1_9_0, grammarAccess.getPrecedenceAccess().getPar1IDTerminalRuleCall_1_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"par1",
        		lv_par1_9_0, 
        		"ID");
	    }

)
))
    |((
(
		lv_ruletyp_10_0=	'SUFFIX' 
    {
        newLeafNode(lv_ruletyp_10_0, grammarAccess.getPrecedenceAccess().getRuletypSUFFIXKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed($current, "ruletyp", lv_ruletyp_10_0, "SUFFIX");
	    }

)
)(
(
		lv_rule_11_0=RULE_ID
		{
			newLeafNode(lv_rule_11_0, grammarAccess.getPrecedenceAccess().getRuleIDTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rule",
        		lv_rule_11_0, 
        		"ID");
	    }

)
)((
(
		lv_feature1_12_0=RULE_ID
		{
			newLeafNode(lv_feature1_12_0, grammarAccess.getPrecedenceAccess().getFeature1IDTerminalRuleCall_2_2_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"feature1",
        		lv_feature1_12_0, 
        		"ID");
	    }

)
)	otherlv_13='=' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getPrecedenceAccess().getEqualsSignKeyword_2_2_1());
    }
)?(
(
		lv_par1_14_0=RULE_ID
		{
			newLeafNode(lv_par1_14_0, grammarAccess.getPrecedenceAccess().getPar1IDTerminalRuleCall_2_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"par1",
        		lv_par1_14_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrecedenceAccess().getSuffixMultStringParserRuleCall_2_4_0()); 
	    }
		lv_suffix_15_0=ruleMultString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrecedenceRule());
	        }
       		set(
       			$current, 
       			"suffix",
        		lv_suffix_15_0, 
        		"MultString");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		lv_ruletyp_16_0=	'INFIX' 
    {
        newLeafNode(lv_ruletyp_16_0, grammarAccess.getPrecedenceAccess().getRuletypINFIXKeyword_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed($current, "ruletyp", lv_ruletyp_16_0, "INFIX");
	    }

)
)(
(
		lv_rule_17_0=RULE_ID
		{
			newLeafNode(lv_rule_17_0, grammarAccess.getPrecedenceAccess().getRuleIDTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rule",
        		lv_rule_17_0, 
        		"ID");
	    }

)
)((
(
		lv_feature1_18_0=RULE_ID
		{
			newLeafNode(lv_feature1_18_0, grammarAccess.getPrecedenceAccess().getFeature1IDTerminalRuleCall_3_2_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"feature1",
        		lv_feature1_18_0, 
        		"ID");
	    }

)
)	otherlv_19='=' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getPrecedenceAccess().getEqualsSignKeyword_3_2_1());
    }
)?(
(
		lv_par1_20_0=RULE_ID
		{
			newLeafNode(lv_par1_20_0, grammarAccess.getPrecedenceAccess().getPar1IDTerminalRuleCall_3_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"par1",
        		lv_par1_20_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrecedenceAccess().getInfixMultStringParserRuleCall_3_4_0()); 
	    }
		lv_infix_21_0=ruleMultString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrecedenceRule());
	        }
       		set(
       			$current, 
       			"infix",
        		lv_infix_21_0, 
        		"MultString");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_feature2_22_0=RULE_ID
		{
			newLeafNode(lv_feature2_22_0, grammarAccess.getPrecedenceAccess().getFeature2IDTerminalRuleCall_3_5_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"feature2",
        		lv_feature2_22_0, 
        		"ID");
	    }

)
)	otherlv_23='=' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getPrecedenceAccess().getEqualsSignKeyword_3_5_1());
    }
)?(
(
		lv_par2_24_0=RULE_ID
		{
			newLeafNode(lv_par2_24_0, grammarAccess.getPrecedenceAccess().getPar2IDTerminalRuleCall_3_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"par2",
        		lv_par2_24_0, 
        		"ID");
	    }

)
))
    |((
(
		lv_ruletyp_25_0=	'INFIXADD' 
    {
        newLeafNode(lv_ruletyp_25_0, grammarAccess.getPrecedenceAccess().getRuletypINFIXADDKeyword_4_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed($current, "ruletyp", lv_ruletyp_25_0, "INFIXADD");
	    }

)
)(
(
		lv_rule_26_0=RULE_ID
		{
			newLeafNode(lv_rule_26_0, grammarAccess.getPrecedenceAccess().getRuleIDTerminalRuleCall_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rule",
        		lv_rule_26_0, 
        		"ID");
	    }

)
)((
(
		lv_feature1_27_0=RULE_ID
		{
			newLeafNode(lv_feature1_27_0, grammarAccess.getPrecedenceAccess().getFeature1IDTerminalRuleCall_4_2_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"feature1",
        		lv_feature1_27_0, 
        		"ID");
	    }

)
)	otherlv_28='=' 
    {
    	newLeafNode(otherlv_28, grammarAccess.getPrecedenceAccess().getEqualsSignKeyword_4_2_1());
    }
)?(
(
		lv_par1_29_0=RULE_ID
		{
			newLeafNode(lv_par1_29_0, grammarAccess.getPrecedenceAccess().getPar1IDTerminalRuleCall_4_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"par1",
        		lv_par1_29_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrecedenceAccess().getInfixMultStringParserRuleCall_4_4_0()); 
	    }
		lv_infix_30_0=ruleMultString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrecedenceRule());
	        }
       		set(
       			$current, 
       			"infix",
        		lv_infix_30_0, 
        		"MultString");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_feature2_31_0=RULE_ID
		{
			newLeafNode(lv_feature2_31_0, grammarAccess.getPrecedenceAccess().getFeature2IDTerminalRuleCall_4_5_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"feature2",
        		lv_feature2_31_0, 
        		"ID");
	    }

)
)	otherlv_32='=' 
    {
    	newLeafNode(otherlv_32, grammarAccess.getPrecedenceAccess().getEqualsSignKeyword_4_5_1());
    }
)?(
(
		lv_par2_33_0=RULE_ID
		{
			newLeafNode(lv_par2_33_0, grammarAccess.getPrecedenceAccess().getPar2IDTerminalRuleCall_4_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"par2",
        		lv_par2_33_0, 
        		"ID");
	    }

)
))
    |((
(
		lv_ruletyp_34_0=	'INFIXLEFT' 
    {
        newLeafNode(lv_ruletyp_34_0, grammarAccess.getPrecedenceAccess().getRuletypINFIXLEFTKeyword_5_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed($current, "ruletyp", lv_ruletyp_34_0, "INFIXLEFT");
	    }

)
)(
(
		lv_rule_35_0=RULE_ID
		{
			newLeafNode(lv_rule_35_0, grammarAccess.getPrecedenceAccess().getRuleIDTerminalRuleCall_5_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rule",
        		lv_rule_35_0, 
        		"ID");
	    }

)
)(
(
		lv_par1_36_0=RULE_ID
		{
			newLeafNode(lv_par1_36_0, grammarAccess.getPrecedenceAccess().getPar1IDTerminalRuleCall_5_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"par1",
        		lv_par1_36_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrecedenceAccess().getInfixleftMultStringParserRuleCall_5_3_0()); 
	    }
		lv_infixleft_37_0=ruleMultString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrecedenceRule());
	        }
       		set(
       			$current, 
       			"infixleft",
        		lv_infixleft_37_0, 
        		"MultString");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_par2_38_0=RULE_ID
		{
			newLeafNode(lv_par2_38_0, grammarAccess.getPrecedenceAccess().getPar2IDTerminalRuleCall_5_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"par2",
        		lv_par2_38_0, 
        		"ID");
	    }

)
))
    |((
(
		lv_ruletyp_39_0=	'LITERAL' 
    {
        newLeafNode(lv_ruletyp_39_0, grammarAccess.getPrecedenceAccess().getRuletypLITERALKeyword_6_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed($current, "ruletyp", lv_ruletyp_39_0, "LITERAL");
	    }

)
)(
(
		lv_rule_40_0=RULE_ID
		{
			newLeafNode(lv_rule_40_0, grammarAccess.getPrecedenceAccess().getRuleIDTerminalRuleCall_6_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rule",
        		lv_rule_40_0, 
        		"ID");
	    }

)
)(
(
(
		lv_literal_41_1=	'INT' 
    {
        newLeafNode(lv_literal_41_1, grammarAccess.getPrecedenceAccess().getLiteralINTKeyword_6_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed($current, "literal", lv_literal_41_1, null);
	    }

    |		lv_literal_41_2=	'STRING' 
    {
        newLeafNode(lv_literal_41_2, grammarAccess.getPrecedenceAccess().getLiteralSTRINGKeyword_6_2_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed($current, "literal", lv_literal_41_2, null);
	    }

    |		lv_literal_41_3=	'BOOL' 
    {
        newLeafNode(lv_literal_41_3, grammarAccess.getPrecedenceAccess().getLiteralBOOLKeyword_6_2_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed($current, "literal", lv_literal_41_3, null);
	    }

    |		lv_literal_41_4=	'FLOAT' 
    {
        newLeafNode(lv_literal_41_4, grammarAccess.getPrecedenceAccess().getLiteralFLOATKeyword_6_2_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed($current, "literal", lv_literal_41_4, null);
	    }

)

)
))
    |((
(
		lv_ruletyp_42_0=	'BRACKET' 
    {
        newLeafNode(lv_ruletyp_42_0, grammarAccess.getPrecedenceAccess().getRuletypBRACKETKeyword_7_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed($current, "ruletyp", lv_ruletyp_42_0, "BRACKET");
	    }

)
)(
(
		lv_rule_43_0=RULE_ID
		{
			newLeafNode(lv_rule_43_0, grammarAccess.getPrecedenceAccess().getRuleIDTerminalRuleCall_7_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rule",
        		lv_rule_43_0, 
        		"ID");
	    }

)
)(
(
		lv_bracket_44_0=RULE_ID
		{
			newLeafNode(lv_bracket_44_0, grammarAccess.getPrecedenceAccess().getBracketIDTerminalRuleCall_7_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"bracket",
        		lv_bracket_44_0, 
        		"ID");
	    }

)
))
    |((
(
		lv_ruletyp_45_0=	'BRACES' 
    {
        newLeafNode(lv_ruletyp_45_0, grammarAccess.getPrecedenceAccess().getRuletypBRACESKeyword_8_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed($current, "ruletyp", lv_ruletyp_45_0, "BRACES");
	    }

)
)(
(
		lv_rule_46_0=RULE_ID
		{
			newLeafNode(lv_rule_46_0, grammarAccess.getPrecedenceAccess().getRuleIDTerminalRuleCall_8_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rule",
        		lv_rule_46_0, 
        		"ID");
	    }

)
)(
(
		lv_braces_47_0=RULE_ID
		{
			newLeafNode(lv_braces_47_0, grammarAccess.getPrecedenceAccess().getBracesIDTerminalRuleCall_8_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"braces",
        		lv_braces_47_0, 
        		"ID");
	    }

)
))
    |((
(
		lv_ruletyp_48_0=	'PARENTHESIS' 
    {
        newLeafNode(lv_ruletyp_48_0, grammarAccess.getPrecedenceAccess().getRuletypPARENTHESISKeyword_9_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed($current, "ruletyp", lv_ruletyp_48_0, "PARENTHESIS");
	    }

)
)(
(
		lv_rule_49_0=RULE_ID
		{
			newLeafNode(lv_rule_49_0, grammarAccess.getPrecedenceAccess().getRuleIDTerminalRuleCall_9_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rule",
        		lv_rule_49_0, 
        		"ID");
	    }

)
)(
(
		lv_parenthesis_50_0=RULE_ID
		{
			newLeafNode(lv_parenthesis_50_0, grammarAccess.getPrecedenceAccess().getParenthesisIDTerminalRuleCall_9_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrecedenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"parenthesis",
        		lv_parenthesis_50_0, 
        		"ID");
	    }

)
)))
;





// Entry rule entryRuleMultID
entryRuleMultID returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultIDRule()); }
	 iv_ruleMultID=ruleMultID 
	 { $current=$iv_ruleMultID.current; } 
	 EOF 
;

// Rule MultID
ruleMultID returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getMultIDAccess().getMultIDAction_0(),
            $current);
    }
)((
(
		lv_mi_1_0=RULE_ID
		{
			newLeafNode(lv_mi_1_0, grammarAccess.getMultIDAccess().getMiIDTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultIDRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"mi",
        		lv_mi_1_0, 
        		"ID");
	    }

)
)
    |(	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMultIDAccess().getLeftSquareBracketKeyword_1_1_0());
    }
(
(
		lv_mi_3_0=RULE_ID
		{
			newLeafNode(lv_mi_3_0, grammarAccess.getMultIDAccess().getMiIDTerminalRuleCall_1_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultIDRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"mi",
        		lv_mi_3_0, 
        		"ID");
	    }

)
)*	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMultIDAccess().getRightSquareBracketKeyword_1_1_2());
    }
)))
;





// Entry rule entryRuleMultString
entryRuleMultString returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultStringRule()); }
	 iv_ruleMultString=ruleMultString 
	 { $current=$iv_ruleMultString.current; } 
	 EOF 
;

// Rule MultString
ruleMultString returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getMultStringAccess().getMultStringAction_0(),
            $current);
    }
)((
(
		lv_ms_1_0=RULE_STRING
		{
			newLeafNode(lv_ms_1_0, grammarAccess.getMultStringAccess().getMsSTRINGTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultStringRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"ms",
        		lv_ms_1_0, 
        		"STRING");
	    }

)
)
    |(	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMultStringAccess().getLeftSquareBracketKeyword_1_1_0());
    }
(
(
		lv_ms_3_0=RULE_STRING
		{
			newLeafNode(lv_ms_3_0, grammarAccess.getMultStringAccess().getMsSTRINGTerminalRuleCall_1_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultStringRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"ms",
        		lv_ms_3_0, 
        		"STRING");
	    }

)
)*	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMultStringAccess().getRightSquareBracketKeyword_1_1_2());
    }
)))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


