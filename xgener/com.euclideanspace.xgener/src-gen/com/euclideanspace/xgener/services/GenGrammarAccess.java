/*
* generated by Xtext
*/
package com.euclideanspace.xgener.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class GenGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cClasAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cClasClassTypeParserRuleCall_0_0 = (RuleCall)cClasAssignment_0.eContents().get(0);
		private final Assignment cProcAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cProcProcedureParserRuleCall_1_0 = (RuleCall)cProcAssignment_1.eContents().get(0);
		private final Assignment cStatemAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStatemStatementParserRuleCall_2_0 = (RuleCall)cStatemAssignment_2.eContents().get(0);
		private final Assignment cExpAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cExpExpressionParserRuleCall_3_0 = (RuleCall)cExpAssignment_3.eContents().get(0);
		
		//Model:
		//	(clas+=ClassType | proc+=Procedure | statem+=Statement | exp+=Expression)*;
		public ParserRule getRule() { return rule; }

		//(clas+=ClassType | proc+=Procedure | statem+=Statement | exp+=Expression)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//clas+=ClassType
		public Assignment getClasAssignment_0() { return cClasAssignment_0; }

		//ClassType
		public RuleCall getClasClassTypeParserRuleCall_0_0() { return cClasClassTypeParserRuleCall_0_0; }

		//proc+=Procedure
		public Assignment getProcAssignment_1() { return cProcAssignment_1; }

		//Procedure
		public RuleCall getProcProcedureParserRuleCall_1_0() { return cProcProcedureParserRuleCall_1_0; }

		//statem+=Statement
		public Assignment getStatemAssignment_2() { return cStatemAssignment_2; }

		//Statement
		public RuleCall getStatemStatementParserRuleCall_2_0() { return cStatemStatementParserRuleCall_2_0; }

		//exp+=Expression
		public Assignment getExpAssignment_3() { return cExpAssignment_3; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_3_0() { return cExpExpressionParserRuleCall_3_0; }
	}

	public class ClassTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cNoclassAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cNoclassNoclassKeyword_2_0_0 = (Keyword)cNoclassAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cPrefixKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cPrefixAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cPrefixMultIDParserRuleCall_2_1_1_0 = (RuleCall)cPrefixAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cAlternatives_2.eContents().get(2);
		private final Keyword cSuffixKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cSuffixAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cSuffixMultIDParserRuleCall_2_2_1_0 = (RuleCall)cSuffixAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cAlternatives_2.eContents().get(3);
		private final Keyword cBlockingKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cBlockingAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final Alternatives cBlockingAlternatives_2_3_1_0 = (Alternatives)cBlockingAssignment_2_3_1.eContents().get(0);
		private final Keyword cBlockingBracesKeyword_2_3_1_0_0 = (Keyword)cBlockingAlternatives_2_3_1_0.eContents().get(0);
		private final Keyword cBlockingIndentKeyword_2_3_1_0_1 = (Keyword)cBlockingAlternatives_2_3_1_0.eContents().get(1);
		
		//ClassType:
		//	"class" name=ID (noclass+="noclass" | "prefix" prefix+=MultID | "suffix" suffix+=MultID | "blocking"
		//	blocking+=("braces" | "indent"))*;
		public ParserRule getRule() { return rule; }

		//"class" name=ID (noclass+="noclass" | "prefix" prefix+=MultID | "suffix" suffix+=MultID | "blocking" blocking+=("braces"
		//| "indent"))*
		public Group getGroup() { return cGroup; }

		//"class"
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(noclass+="noclass" | "prefix" prefix+=MultID | "suffix" suffix+=MultID | "blocking" blocking+=("braces" | "indent"))*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//noclass+="noclass"
		public Assignment getNoclassAssignment_2_0() { return cNoclassAssignment_2_0; }

		//"noclass"
		public Keyword getNoclassNoclassKeyword_2_0_0() { return cNoclassNoclassKeyword_2_0_0; }

		//"prefix" prefix+=MultID
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"prefix"
		public Keyword getPrefixKeyword_2_1_0() { return cPrefixKeyword_2_1_0; }

		//prefix+=MultID
		public Assignment getPrefixAssignment_2_1_1() { return cPrefixAssignment_2_1_1; }

		//MultID
		public RuleCall getPrefixMultIDParserRuleCall_2_1_1_0() { return cPrefixMultIDParserRuleCall_2_1_1_0; }

		//"suffix" suffix+=MultID
		public Group getGroup_2_2() { return cGroup_2_2; }

		//"suffix"
		public Keyword getSuffixKeyword_2_2_0() { return cSuffixKeyword_2_2_0; }

		//suffix+=MultID
		public Assignment getSuffixAssignment_2_2_1() { return cSuffixAssignment_2_2_1; }

		//MultID
		public RuleCall getSuffixMultIDParserRuleCall_2_2_1_0() { return cSuffixMultIDParserRuleCall_2_2_1_0; }

		//"blocking" blocking+=("braces" | "indent")
		public Group getGroup_2_3() { return cGroup_2_3; }

		//"blocking"
		public Keyword getBlockingKeyword_2_3_0() { return cBlockingKeyword_2_3_0; }

		//blocking+=("braces" | "indent")
		public Assignment getBlockingAssignment_2_3_1() { return cBlockingAssignment_2_3_1; }

		//"braces" | "indent"
		public Alternatives getBlockingAlternatives_2_3_1_0() { return cBlockingAlternatives_2_3_1_0; }

		//"braces"
		public Keyword getBlockingBracesKeyword_2_3_1_0_0() { return cBlockingBracesKeyword_2_3_1_0_0; }

		//"indent"
		public Keyword getBlockingIndentKeyword_2_3_1_0_1() { return cBlockingIndentKeyword_2_3_1_0_1; }
	}

	public class ProcedureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Procedure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcedureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cPrefixKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cPrefixAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cPrefixMultIDParserRuleCall_2_0_1_0 = (RuleCall)cPrefixAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cSuffixKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cSuffixAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cSuffixMultIDParserRuleCall_2_1_1_0 = (RuleCall)cSuffixAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cAlternatives_2.eContents().get(2);
		private final Keyword cTypesKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cTypesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final Alternatives cTypesAlternatives_2_2_1_0 = (Alternatives)cTypesAssignment_2_2_1.eContents().get(0);
		private final Keyword cTypesColonSeperatedKeyword_2_2_1_0_0 = (Keyword)cTypesAlternatives_2_2_1_0.eContents().get(0);
		private final Keyword cTypesSpaceSeperatedKeyword_2_2_1_0_1 = (Keyword)cTypesAlternatives_2_2_1_0.eContents().get(1);
		private final Keyword cTypesInHeaderKeyword_2_2_1_0_2 = (Keyword)cTypesAlternatives_2_2_1_0.eContents().get(2);
		private final Keyword cTypesInferredKeyword_2_2_1_0_3 = (Keyword)cTypesAlternatives_2_2_1_0.eContents().get(3);
		private final Keyword cTypesUntypedKeyword_2_2_1_0_4 = (Keyword)cTypesAlternatives_2_2_1_0.eContents().get(4);
		
		//Procedure:
		//	"procedure" name=ID ("prefix" prefix+=MultID | "suffix" suffix+=MultID | "types" types+=("colonSeperated" |
		//	"spaceSeperated" | "inHeader" | "inferred" | "untyped"))*;
		public ParserRule getRule() { return rule; }

		//"procedure" name=ID ("prefix" prefix+=MultID | "suffix" suffix+=MultID | "types" types+=("colonSeperated" |
		//"spaceSeperated" | "inHeader" | "inferred" | "untyped"))*
		public Group getGroup() { return cGroup; }

		//"procedure"
		public Keyword getProcedureKeyword_0() { return cProcedureKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("prefix" prefix+=MultID | "suffix" suffix+=MultID | "types" types+=("colonSeperated" | "spaceSeperated" | "inHeader" |
		//"inferred" | "untyped"))*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"prefix" prefix+=MultID
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"prefix"
		public Keyword getPrefixKeyword_2_0_0() { return cPrefixKeyword_2_0_0; }

		//prefix+=MultID
		public Assignment getPrefixAssignment_2_0_1() { return cPrefixAssignment_2_0_1; }

		//MultID
		public RuleCall getPrefixMultIDParserRuleCall_2_0_1_0() { return cPrefixMultIDParserRuleCall_2_0_1_0; }

		//"suffix" suffix+=MultID
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"suffix"
		public Keyword getSuffixKeyword_2_1_0() { return cSuffixKeyword_2_1_0; }

		//suffix+=MultID
		public Assignment getSuffixAssignment_2_1_1() { return cSuffixAssignment_2_1_1; }

		//MultID
		public RuleCall getSuffixMultIDParserRuleCall_2_1_1_0() { return cSuffixMultIDParserRuleCall_2_1_1_0; }

		//"types" types+=("colonSeperated" | "spaceSeperated" | "inHeader" | "inferred" | "untyped")
		public Group getGroup_2_2() { return cGroup_2_2; }

		//"types"
		public Keyword getTypesKeyword_2_2_0() { return cTypesKeyword_2_2_0; }

		//types+=("colonSeperated" | "spaceSeperated" | "inHeader" | "inferred" | "untyped")
		public Assignment getTypesAssignment_2_2_1() { return cTypesAssignment_2_2_1; }

		//"colonSeperated" | "spaceSeperated" | "inHeader" | "inferred" | "untyped"
		public Alternatives getTypesAlternatives_2_2_1_0() { return cTypesAlternatives_2_2_1_0; }

		//"colonSeperated"
		public Keyword getTypesColonSeperatedKeyword_2_2_1_0_0() { return cTypesColonSeperatedKeyword_2_2_1_0_0; }

		//"spaceSeperated"
		public Keyword getTypesSpaceSeperatedKeyword_2_2_1_0_1() { return cTypesSpaceSeperatedKeyword_2_2_1_0_1; }

		//"inHeader"
		public Keyword getTypesInHeaderKeyword_2_2_1_0_2() { return cTypesInHeaderKeyword_2_2_1_0_2; }

		//"inferred"
		public Keyword getTypesInferredKeyword_2_2_1_0_3() { return cTypesInferredKeyword_2_2_1_0_3; }

		//"untyped"
		public Keyword getTypesUntypedKeyword_2_2_1_0_4() { return cTypesUntypedKeyword_2_2_1_0_4; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cRepeatKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cRepAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cRepIDTerminalRuleCall_2_0_1_0 = (RuleCall)cRepAssignment_2_0_1.eContents().get(0);
		private final Keyword cUntilKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Assignment cUntilAssignment_2_0_3 = (Assignment)cGroup_2_0.eContents().get(3);
		private final RuleCall cUntilIDTerminalRuleCall_2_0_3_0 = (RuleCall)cUntilAssignment_2_0_3.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cWhileKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cWhileAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cWhileIDTerminalRuleCall_2_1_1_0 = (RuleCall)cWhileAssignment_2_1_1.eContents().get(0);
		private final Keyword cDoKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Assignment cDoAssignment_2_1_3 = (Assignment)cGroup_2_1.eContents().get(3);
		private final RuleCall cDoIDTerminalRuleCall_2_1_3_0 = (RuleCall)cDoAssignment_2_1_3.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cAlternatives_2.eContents().get(2);
		private final Keyword cForKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cForAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cForIDTerminalRuleCall_2_2_1_0 = (RuleCall)cForAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cAlternatives_2.eContents().get(3);
		private final Keyword cVarKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cVarAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cVarIDTerminalRuleCall_2_3_1_0 = (RuleCall)cVarAssignment_2_3_1.eContents().get(0);
		private final Group cGroup_2_3_2 = (Group)cGroup_2_3.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_3_2_0 = (Keyword)cGroup_2_3_2.eContents().get(0);
		private final Assignment cExAssignment_2_3_2_1 = (Assignment)cGroup_2_3_2.eContents().get(1);
		private final RuleCall cExIDTerminalRuleCall_2_3_2_1_0 = (RuleCall)cExAssignment_2_3_2_1.eContents().get(0);
		private final Group cGroup_2_4 = (Group)cAlternatives_2.eContents().get(4);
		private final Keyword cValKeyword_2_4_0 = (Keyword)cGroup_2_4.eContents().get(0);
		private final Assignment cValAssignment_2_4_1 = (Assignment)cGroup_2_4.eContents().get(1);
		private final RuleCall cValIDTerminalRuleCall_2_4_1_0 = (RuleCall)cValAssignment_2_4_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_4_2 = (Keyword)cGroup_2_4.eContents().get(2);
		private final Assignment cExAssignment_2_4_3 = (Assignment)cGroup_2_4.eContents().get(3);
		private final RuleCall cExIDTerminalRuleCall_2_4_3_0 = (RuleCall)cExAssignment_2_4_3.eContents().get(0);
		
		//Statement:
		//	"statement" name=ID ("repeat" rep=ID "until" until=ID | "while" while=ID "do" do=ID | "for" for=ID | "var" var=ID ("="
		//	ex=ID)? | "val" val=ID "=" ex=ID);
		public ParserRule getRule() { return rule; }

		//"statement" name=ID ("repeat" rep=ID "until" until=ID | "while" while=ID "do" do=ID | "for" for=ID | "var" var=ID ("="
		//ex=ID)? | "val" val=ID "=" ex=ID)
		public Group getGroup() { return cGroup; }

		//"statement"
		public Keyword getStatementKeyword_0() { return cStatementKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"repeat" rep=ID "until" until=ID | "while" while=ID "do" do=ID | "for" for=ID | "var" var=ID ("=" ex=ID)? | "val" val=ID
		//"=" ex=ID
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"repeat" rep=ID "until" until=ID
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"repeat"
		public Keyword getRepeatKeyword_2_0_0() { return cRepeatKeyword_2_0_0; }

		//rep=ID
		public Assignment getRepAssignment_2_0_1() { return cRepAssignment_2_0_1; }

		//ID
		public RuleCall getRepIDTerminalRuleCall_2_0_1_0() { return cRepIDTerminalRuleCall_2_0_1_0; }

		//"until"
		public Keyword getUntilKeyword_2_0_2() { return cUntilKeyword_2_0_2; }

		//until=ID
		public Assignment getUntilAssignment_2_0_3() { return cUntilAssignment_2_0_3; }

		//ID
		public RuleCall getUntilIDTerminalRuleCall_2_0_3_0() { return cUntilIDTerminalRuleCall_2_0_3_0; }

		//"while" while=ID "do" do=ID
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"while"
		public Keyword getWhileKeyword_2_1_0() { return cWhileKeyword_2_1_0; }

		//while=ID
		public Assignment getWhileAssignment_2_1_1() { return cWhileAssignment_2_1_1; }

		//ID
		public RuleCall getWhileIDTerminalRuleCall_2_1_1_0() { return cWhileIDTerminalRuleCall_2_1_1_0; }

		//"do"
		public Keyword getDoKeyword_2_1_2() { return cDoKeyword_2_1_2; }

		//do=ID
		public Assignment getDoAssignment_2_1_3() { return cDoAssignment_2_1_3; }

		//ID
		public RuleCall getDoIDTerminalRuleCall_2_1_3_0() { return cDoIDTerminalRuleCall_2_1_3_0; }

		//"for" for=ID
		public Group getGroup_2_2() { return cGroup_2_2; }

		//"for"
		public Keyword getForKeyword_2_2_0() { return cForKeyword_2_2_0; }

		//for=ID
		public Assignment getForAssignment_2_2_1() { return cForAssignment_2_2_1; }

		//ID
		public RuleCall getForIDTerminalRuleCall_2_2_1_0() { return cForIDTerminalRuleCall_2_2_1_0; }

		//"var" var=ID ("=" ex=ID)?
		public Group getGroup_2_3() { return cGroup_2_3; }

		//"var"
		public Keyword getVarKeyword_2_3_0() { return cVarKeyword_2_3_0; }

		//var=ID
		public Assignment getVarAssignment_2_3_1() { return cVarAssignment_2_3_1; }

		//ID
		public RuleCall getVarIDTerminalRuleCall_2_3_1_0() { return cVarIDTerminalRuleCall_2_3_1_0; }

		//("=" ex=ID)?
		public Group getGroup_2_3_2() { return cGroup_2_3_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_3_2_0() { return cEqualsSignKeyword_2_3_2_0; }

		//ex=ID
		public Assignment getExAssignment_2_3_2_1() { return cExAssignment_2_3_2_1; }

		//ID
		public RuleCall getExIDTerminalRuleCall_2_3_2_1_0() { return cExIDTerminalRuleCall_2_3_2_1_0; }

		//"val" val=ID "=" ex=ID
		public Group getGroup_2_4() { return cGroup_2_4; }

		//"val"
		public Keyword getValKeyword_2_4_0() { return cValKeyword_2_4_0; }

		//val=ID
		public Assignment getValAssignment_2_4_1() { return cValAssignment_2_4_1; }

		//ID
		public RuleCall getValIDTerminalRuleCall_2_4_1_0() { return cValIDTerminalRuleCall_2_4_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_4_2() { return cEqualsSignKeyword_2_4_2; }

		//ex=ID
		public Assignment getExAssignment_2_4_3() { return cExAssignment_2_4_3; }

		//ID
		public RuleCall getExIDTerminalRuleCall_2_4_3_0() { return cExIDTerminalRuleCall_2_4_3_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExpressionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cPrefixKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cPrefixAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cPrefixMultStringParserRuleCall_2_0_1_0 = (RuleCall)cPrefixAssignment_2_0_1.eContents().get(0);
		private final Assignment cPar1Assignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cPar1IDTerminalRuleCall_2_0_2_0 = (RuleCall)cPar1Assignment_2_0_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cSuffixKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cPar1Assignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cPar1IDTerminalRuleCall_2_1_1_0 = (RuleCall)cPar1Assignment_2_1_1.eContents().get(0);
		private final Assignment cSuffixAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cSuffixMultStringParserRuleCall_2_1_2_0 = (RuleCall)cSuffixAssignment_2_1_2.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cAlternatives_2.eContents().get(2);
		private final Keyword cInfixKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cPar1Assignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cPar1IDTerminalRuleCall_2_2_1_0 = (RuleCall)cPar1Assignment_2_2_1.eContents().get(0);
		private final Assignment cInfixAssignment_2_2_2 = (Assignment)cGroup_2_2.eContents().get(2);
		private final RuleCall cInfixMultStringParserRuleCall_2_2_2_0 = (RuleCall)cInfixAssignment_2_2_2.eContents().get(0);
		private final Assignment cPar2Assignment_2_2_3 = (Assignment)cGroup_2_2.eContents().get(3);
		private final RuleCall cPar2IDTerminalRuleCall_2_2_3_0 = (RuleCall)cPar2Assignment_2_2_3.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cAlternatives_2.eContents().get(3);
		private final Keyword cInfixleftKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cPar1Assignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cPar1IDTerminalRuleCall_2_3_1_0 = (RuleCall)cPar1Assignment_2_3_1.eContents().get(0);
		private final Assignment cInfixleftAssignment_2_3_2 = (Assignment)cGroup_2_3.eContents().get(2);
		private final RuleCall cInfixleftMultStringParserRuleCall_2_3_2_0 = (RuleCall)cInfixleftAssignment_2_3_2.eContents().get(0);
		private final Assignment cPar2Assignment_2_3_3 = (Assignment)cGroup_2_3.eContents().get(3);
		private final RuleCall cPar2IDTerminalRuleCall_2_3_3_0 = (RuleCall)cPar2Assignment_2_3_3.eContents().get(0);
		private final Group cGroup_2_4 = (Group)cAlternatives_2.eContents().get(4);
		private final Keyword cLiteralKeyword_2_4_0 = (Keyword)cGroup_2_4.eContents().get(0);
		private final Assignment cLiteralAssignment_2_4_1 = (Assignment)cGroup_2_4.eContents().get(1);
		private final Alternatives cLiteralAlternatives_2_4_1_0 = (Alternatives)cLiteralAssignment_2_4_1.eContents().get(0);
		private final Keyword cLiteralIntKeyword_2_4_1_0_0 = (Keyword)cLiteralAlternatives_2_4_1_0.eContents().get(0);
		private final Keyword cLiteralStringKeyword_2_4_1_0_1 = (Keyword)cLiteralAlternatives_2_4_1_0.eContents().get(1);
		private final Keyword cLiteralBoolKeyword_2_4_1_0_2 = (Keyword)cLiteralAlternatives_2_4_1_0.eContents().get(2);
		private final Keyword cLiteralFloatKeyword_2_4_1_0_3 = (Keyword)cLiteralAlternatives_2_4_1_0.eContents().get(3);
		private final Group cGroup_2_5 = (Group)cAlternatives_2.eContents().get(5);
		private final Keyword cBracketKeyword_2_5_0 = (Keyword)cGroup_2_5.eContents().get(0);
		private final Assignment cBracketAssignment_2_5_1 = (Assignment)cGroup_2_5.eContents().get(1);
		private final RuleCall cBracketIDTerminalRuleCall_2_5_1_0 = (RuleCall)cBracketAssignment_2_5_1.eContents().get(0);
		private final Group cGroup_2_6 = (Group)cAlternatives_2.eContents().get(6);
		private final Keyword cBracesKeyword_2_6_0 = (Keyword)cGroup_2_6.eContents().get(0);
		private final Assignment cBracesAssignment_2_6_1 = (Assignment)cGroup_2_6.eContents().get(1);
		private final RuleCall cBracesIDTerminalRuleCall_2_6_1_0 = (RuleCall)cBracesAssignment_2_6_1.eContents().get(0);
		private final Group cGroup_2_7 = (Group)cAlternatives_2.eContents().get(7);
		private final Keyword cParenthasisKeyword_2_7_0 = (Keyword)cGroup_2_7.eContents().get(0);
		private final Assignment cParenthasisAssignment_2_7_1 = (Assignment)cGroup_2_7.eContents().get(1);
		private final RuleCall cParenthasisIDTerminalRuleCall_2_7_1_0 = (RuleCall)cParenthasisAssignment_2_7_1.eContents().get(0);
		
		//Expression:
		//	"expression" name=ID ("prefix" prefix+=MultString par1+=ID | "suffix" par1+=ID suffix+=MultString | "infix" par1+=ID
		//	infix+=MultString par2+=ID | "infixleft" par1+=ID infixleft+=MultString par2+=ID | "literal" literal+=("int" |
		//	"string" | "bool" | "float") | "bracket" bracket+=ID | "braces" braces+=ID | "parenthasis" parenthasis+=ID)*;
		public ParserRule getRule() { return rule; }

		//"expression" name=ID ("prefix" prefix+=MultString par1+=ID | "suffix" par1+=ID suffix+=MultString | "infix" par1+=ID
		//infix+=MultString par2+=ID | "infixleft" par1+=ID infixleft+=MultString par2+=ID | "literal" literal+=("int" | "string"
		//| "bool" | "float") | "bracket" bracket+=ID | "braces" braces+=ID | "parenthasis" parenthasis+=ID)*
		public Group getGroup() { return cGroup; }

		//"expression"
		public Keyword getExpressionKeyword_0() { return cExpressionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("prefix" prefix+=MultString par1+=ID | "suffix" par1+=ID suffix+=MultString | "infix" par1+=ID infix+=MultString
		//par2+=ID | "infixleft" par1+=ID infixleft+=MultString par2+=ID | "literal" literal+=("int" | "string" | "bool" |
		//"float") | "bracket" bracket+=ID | "braces" braces+=ID | "parenthasis" parenthasis+=ID)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"prefix" prefix+=MultString par1+=ID
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"prefix"
		public Keyword getPrefixKeyword_2_0_0() { return cPrefixKeyword_2_0_0; }

		//prefix+=MultString
		public Assignment getPrefixAssignment_2_0_1() { return cPrefixAssignment_2_0_1; }

		//MultString
		public RuleCall getPrefixMultStringParserRuleCall_2_0_1_0() { return cPrefixMultStringParserRuleCall_2_0_1_0; }

		//par1+=ID
		public Assignment getPar1Assignment_2_0_2() { return cPar1Assignment_2_0_2; }

		//ID
		public RuleCall getPar1IDTerminalRuleCall_2_0_2_0() { return cPar1IDTerminalRuleCall_2_0_2_0; }

		//"suffix" par1+=ID suffix+=MultString
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"suffix"
		public Keyword getSuffixKeyword_2_1_0() { return cSuffixKeyword_2_1_0; }

		//par1+=ID
		public Assignment getPar1Assignment_2_1_1() { return cPar1Assignment_2_1_1; }

		//ID
		public RuleCall getPar1IDTerminalRuleCall_2_1_1_0() { return cPar1IDTerminalRuleCall_2_1_1_0; }

		//suffix+=MultString
		public Assignment getSuffixAssignment_2_1_2() { return cSuffixAssignment_2_1_2; }

		//MultString
		public RuleCall getSuffixMultStringParserRuleCall_2_1_2_0() { return cSuffixMultStringParserRuleCall_2_1_2_0; }

		//"infix" par1+=ID infix+=MultString par2+=ID
		public Group getGroup_2_2() { return cGroup_2_2; }

		//"infix"
		public Keyword getInfixKeyword_2_2_0() { return cInfixKeyword_2_2_0; }

		//par1+=ID
		public Assignment getPar1Assignment_2_2_1() { return cPar1Assignment_2_2_1; }

		//ID
		public RuleCall getPar1IDTerminalRuleCall_2_2_1_0() { return cPar1IDTerminalRuleCall_2_2_1_0; }

		//infix+=MultString
		public Assignment getInfixAssignment_2_2_2() { return cInfixAssignment_2_2_2; }

		//MultString
		public RuleCall getInfixMultStringParserRuleCall_2_2_2_0() { return cInfixMultStringParserRuleCall_2_2_2_0; }

		//par2+=ID
		public Assignment getPar2Assignment_2_2_3() { return cPar2Assignment_2_2_3; }

		//ID
		public RuleCall getPar2IDTerminalRuleCall_2_2_3_0() { return cPar2IDTerminalRuleCall_2_2_3_0; }

		//"infixleft" par1+=ID infixleft+=MultString par2+=ID
		public Group getGroup_2_3() { return cGroup_2_3; }

		//"infixleft"
		public Keyword getInfixleftKeyword_2_3_0() { return cInfixleftKeyword_2_3_0; }

		//par1+=ID
		public Assignment getPar1Assignment_2_3_1() { return cPar1Assignment_2_3_1; }

		//ID
		public RuleCall getPar1IDTerminalRuleCall_2_3_1_0() { return cPar1IDTerminalRuleCall_2_3_1_0; }

		//infixleft+=MultString
		public Assignment getInfixleftAssignment_2_3_2() { return cInfixleftAssignment_2_3_2; }

		//MultString
		public RuleCall getInfixleftMultStringParserRuleCall_2_3_2_0() { return cInfixleftMultStringParserRuleCall_2_3_2_0; }

		//par2+=ID
		public Assignment getPar2Assignment_2_3_3() { return cPar2Assignment_2_3_3; }

		//ID
		public RuleCall getPar2IDTerminalRuleCall_2_3_3_0() { return cPar2IDTerminalRuleCall_2_3_3_0; }

		//"literal" literal+=("int" | "string" | "bool" | "float")
		public Group getGroup_2_4() { return cGroup_2_4; }

		//"literal"
		public Keyword getLiteralKeyword_2_4_0() { return cLiteralKeyword_2_4_0; }

		//literal+=("int" | "string" | "bool" | "float")
		public Assignment getLiteralAssignment_2_4_1() { return cLiteralAssignment_2_4_1; }

		//"int" | "string" | "bool" | "float"
		public Alternatives getLiteralAlternatives_2_4_1_0() { return cLiteralAlternatives_2_4_1_0; }

		//"int"
		public Keyword getLiteralIntKeyword_2_4_1_0_0() { return cLiteralIntKeyword_2_4_1_0_0; }

		//"string"
		public Keyword getLiteralStringKeyword_2_4_1_0_1() { return cLiteralStringKeyword_2_4_1_0_1; }

		//"bool"
		public Keyword getLiteralBoolKeyword_2_4_1_0_2() { return cLiteralBoolKeyword_2_4_1_0_2; }

		//"float"
		public Keyword getLiteralFloatKeyword_2_4_1_0_3() { return cLiteralFloatKeyword_2_4_1_0_3; }

		//"bracket" bracket+=ID
		public Group getGroup_2_5() { return cGroup_2_5; }

		//"bracket"
		public Keyword getBracketKeyword_2_5_0() { return cBracketKeyword_2_5_0; }

		//bracket+=ID
		public Assignment getBracketAssignment_2_5_1() { return cBracketAssignment_2_5_1; }

		//ID
		public RuleCall getBracketIDTerminalRuleCall_2_5_1_0() { return cBracketIDTerminalRuleCall_2_5_1_0; }

		//"braces" braces+=ID
		public Group getGroup_2_6() { return cGroup_2_6; }

		//"braces"
		public Keyword getBracesKeyword_2_6_0() { return cBracesKeyword_2_6_0; }

		//braces+=ID
		public Assignment getBracesAssignment_2_6_1() { return cBracesAssignment_2_6_1; }

		//ID
		public RuleCall getBracesIDTerminalRuleCall_2_6_1_0() { return cBracesIDTerminalRuleCall_2_6_1_0; }

		//"parenthasis" parenthasis+=ID
		public Group getGroup_2_7() { return cGroup_2_7; }

		//"parenthasis"
		public Keyword getParenthasisKeyword_2_7_0() { return cParenthasisKeyword_2_7_0; }

		//parenthasis+=ID
		public Assignment getParenthasisAssignment_2_7_1() { return cParenthasisAssignment_2_7_1; }

		//ID
		public RuleCall getParenthasisIDTerminalRuleCall_2_7_1_0() { return cParenthasisIDTerminalRuleCall_2_7_1_0; }
	}

	public class MultIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//MultID:
		//	ID | "[" ID* "]";
		public ParserRule getRule() { return rule; }

		//ID | "[" ID* "]"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//"[" ID* "]"
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//ID*
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}

	public class MultStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//MultString:
		//	STRING | "[" STRING* "]";
		public ParserRule getRule() { return rule; }

		//STRING | "[" STRING* "]"
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//"[" STRING* "]"
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//STRING*
		public RuleCall getSTRINGTerminalRuleCall_1_1() { return cSTRINGTerminalRuleCall_1_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}
	
	
	private final ModelElements pModel;
	private final ClassTypeElements pClassType;
	private final ProcedureElements pProcedure;
	private final StatementElements pStatement;
	private final ExpressionElements pExpression;
	private final MultIDElements pMultID;
	private final MultStringElements pMultString;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GenGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pClassType = new ClassTypeElements();
		this.pProcedure = new ProcedureElements();
		this.pStatement = new StatementElements();
		this.pExpression = new ExpressionElements();
		this.pMultID = new MultIDElements();
		this.pMultString = new MultStringElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.euclideanspace.xgener.Gen".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	(clas+=ClassType | proc+=Procedure | statem+=Statement | exp+=Expression)*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//ClassType:
	//	"class" name=ID (noclass+="noclass" | "prefix" prefix+=MultID | "suffix" suffix+=MultID | "blocking"
	//	blocking+=("braces" | "indent"))*;
	public ClassTypeElements getClassTypeAccess() {
		return pClassType;
	}
	
	public ParserRule getClassTypeRule() {
		return getClassTypeAccess().getRule();
	}

	//Procedure:
	//	"procedure" name=ID ("prefix" prefix+=MultID | "suffix" suffix+=MultID | "types" types+=("colonSeperated" |
	//	"spaceSeperated" | "inHeader" | "inferred" | "untyped"))*;
	public ProcedureElements getProcedureAccess() {
		return pProcedure;
	}
	
	public ParserRule getProcedureRule() {
		return getProcedureAccess().getRule();
	}

	//Statement:
	//	"statement" name=ID ("repeat" rep=ID "until" until=ID | "while" while=ID "do" do=ID | "for" for=ID | "var" var=ID ("="
	//	ex=ID)? | "val" val=ID "=" ex=ID);
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//Expression:
	//	"expression" name=ID ("prefix" prefix+=MultString par1+=ID | "suffix" par1+=ID suffix+=MultString | "infix" par1+=ID
	//	infix+=MultString par2+=ID | "infixleft" par1+=ID infixleft+=MultString par2+=ID | "literal" literal+=("int" |
	//	"string" | "bool" | "float") | "bracket" bracket+=ID | "braces" braces+=ID | "parenthasis" parenthasis+=ID)*;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//MultID:
	//	ID | "[" ID* "]";
	public MultIDElements getMultIDAccess() {
		return pMultID;
	}
	
	public ParserRule getMultIDRule() {
		return getMultIDAccess().getRule();
	}

	//MultString:
	//	STRING | "[" STRING* "]";
	public MultStringElements getMultStringAccess() {
		return pMultString;
	}
	
	public ParserRule getMultStringRule() {
		return getMultStringAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
